{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/yilia/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/love.js","path":"love.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/assets/wx_pay.jpg","path":"assets/wx_pay.jpg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/assets/9zai.jpg","path":"assets/9zai.jpg","modified":1,"renderable":1},{"_id":"themes/yilia/source/assets/letra.jpg","path":"assets/letra.jpg","modified":1,"renderable":1},{"_id":"themes/yilia/source/articleImage/2020-06-29/1.png","path":"articleImage/2020-06-29/1.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/articleImage/2020-06-29/2.png","path":"articleImage/2020-06-29/2.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/articleImage/2020-07-03/2.png","path":"articleImage/2020-07-03/2.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/articleImage/2020-07-03/4.png","path":"articleImage/2020-07-03/4.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/articleImage/2020-07-07/udp.png","path":"articleImage/2020-07-07/udp.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/assets/karon.jpg","path":"assets/karon.jpg","modified":1,"renderable":1},{"_id":"themes/yilia/source/articleImage/2020-07-03/3.jpg","path":"articleImage/2020-07-03/3.jpg","modified":1,"renderable":1},{"_id":"themes/yilia/source/articleImage/2020-07-03/3.png","path":"articleImage/2020-07-03/3.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/articleImage/2020-07-07/3.png","path":"articleImage/2020-07-07/3.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/articleImage/2020-07-07/4.png","path":"articleImage/2020-07-07/4.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/articleImage/2020-07-07/hdck1.png","path":"articleImage/2020-07-07/hdck1.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/articleImage/2020-07-03/1.png","path":"articleImage/2020-07-03/1.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/articleImage/2020-07-03/osi.gif","path":"articleImage/2020-07-03/osi.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/articleImage/2020-07-07/2.png","path":"articleImage/2020-07-07/2.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"bcbff434d61bbae2ba5fff5a6d583eebcd48a742","modified":1593311931718},{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1592977545749},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1592977545749},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1592977545750},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1592977545750},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1592977545750},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1592977545752},{"_id":"themes/yilia/_config.yml","hash":"8b12aac2526eedb3e0ab4d7761bf32feb0425773","modified":1593683564154},{"_id":"themes/yilia/package.json","hash":"ee6aa61f1cb89fd549e3e087c0232207a9c9ee30","modified":1592977545776},{"_id":"themes/yilia/webpack.config.js","hash":"da7657347109ddb4ab8602b219778117254677fe","modified":1592977545822},{"_id":"source/categories/index.md","hash":"660e43af185e4fd21d39e673c403de54b167c695","modified":1593575654737},{"_id":"source/_posts/Hexo博客多电脑同步.md","hash":"d14405c1e0bec80136b85b876f2dfed0c36c1bc0","modified":1593683691255},{"_id":"source/_posts/Comparable.md","hash":"4b1b572353c3052997532ad954a3aadee3e63ed0","modified":1593661198701},{"_id":"source/_posts/Java面试宝典之-计算机网络.md","hash":"5736caa0a4e44af8554f9dbd8240ab4262fd218a","modified":1593755492964},{"_id":"source/_posts/Lambda.md","hash":"208779782e801cfb4c7c7c7e1c5b80a704d097eb","modified":1593660803248},{"_id":"source/_posts/Local-Debug-Dubbo.md","hash":"055be0a41b53a05a473fb9aed1462fbffd325507","modified":1593660828252},{"_id":"source/_posts/LocalDate.md","hash":"b1c711c28a1cbfd4c35da9a1594e47423fce7a1b","modified":1593660843658},{"_id":"source/_posts/TCP三次握手.md","hash":"802a624a483d9ae0dcd1da8db9e1b1172f44d218","modified":1593763240856},{"_id":"source/_posts/TCP和UDP的区别.md","hash":"b008ef16aee0f6e998e3c68f6cf75f0cb065555e","modified":1594091104385},{"_id":"source/_posts/TCP四次挥手.md","hash":"f0cf94cf9a1318d4aaec8a97a02527fa53038bb6","modified":1593771623751},{"_id":"source/_posts/TCP滑动窗口.md","hash":"ce8bc117366f5e37be3fb5a4ed460175a8ad1353","modified":1594102741673},{"_id":"source/_posts/ddos.md","hash":"e6d0ebf87c22db186dfd3543287d89dd440f8700","modified":1593660553393},{"_id":"source/_posts/druidError.md","hash":"44db9f0ca070cffae1eca4009ae87c3dd13d9b0e","modified":1593660669965},{"_id":"source/_posts/duplicateRemoval.md","hash":"ed05e1a324abb6b77d0353ae986a15078c22713a","modified":1593660798050},{"_id":"source/_posts/javaMail.md","hash":"7caabf0d39da7f512537d11a9c8a7c21c6f3c57f","modified":1593661186170},{"_id":"source/_posts/mapSort.md","hash":"c43d6e87ba91a860c1b3b92d14ee3a07a0919da3","modified":1593660851063},{"_id":"source/_posts/mvcdemo.md","hash":"74c74ff3e1154a8be6e318111a5adda3252c2be4","modified":1593660859576},{"_id":"source/_posts/redis_install.md","hash":"ac16685851203eae1c15ca5421fd301e9e421e5f","modified":1593660361632},{"_id":"source/_posts/springmvcPost.md","hash":"fec4d48e9e0bc61cef4f0719584f1ccb407a6257","modified":1593660892962},{"_id":"source/_posts/vps-install-nginx.md","hash":"386e19ffe5473e764ad345323525e901e540433d","modified":1593660907618},{"_id":"source/_posts/paramPass.md","hash":"44ffd815540e757cf058e23f64ee7e9711fdf1ac","modified":1593660867564},{"_id":"source/_posts/webhook.md","hash":"cb2517e86ea81f3f9ed5bb8d20166ccabc622086","modified":1593661094828},{"_id":"source/_posts/vps.md","hash":"ab8eac4eca9d14bb5d44fb4596f32f5a8728d470","modified":1593660925149},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1592977545753},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1592977545753},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1592977545754},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1592977545754},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1592977545755},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1592977545755},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1592977545755},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1592977545773},{"_id":"themes/yilia/layout/categories.ejs","hash":"8bc6394fbeb1cc6e98d63778b5c197a29fd076e5","modified":1593575866831},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1592977545774},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1592977545774},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1592977545775},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1592977545775},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1592977545776},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1592977545776},{"_id":"themes/yilia/source/favicon.png","hash":"6a26261e5d86e062340fcb4bb96764389d04d3ec","modified":1593579231748},{"_id":"themes/yilia/source/love.js","hash":"82f281edb49e48cf2f3817445b23cab465f8e5a9","modified":1593588188191},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"2bd1d7183da75057565018886ba400f8b249eaef","modified":1593575811440},{"_id":"themes/yilia/source/slider.e37972.js","hash":"ce5eac88301fe4f2fce0fb6203adfd58eb8313ac","modified":1592977545821},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1592977545777},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1592977545811},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1592977545770},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"283ae27ea37ac3e0e45b2e05c2482a4c594b9c25","modified":1592977545819},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"1801ef448909ea23c0a48e9d63b80d0cfd5534ce","modified":1592977545820},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1592977545757},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"c70f367f54064a441e574c913f5e0ea121d0f899","modified":1592977545757},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"69361558e97d5d1a6a06af22501b62a07e04c912","modified":1593655175637},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1592977545759},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"321681ce752a6b8a8cc25f0b90d27ba992fc2e76","modified":1593583105146},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1592977545759},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1592977545760},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"b97fd8885fae2cda556e9024ad8bfd5b346eb5b7","modified":1593588237336},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1592977545760},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1592977545761},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1592977545762},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"fb1b8457b9eb15b55da1bf7b133e12c375dd26f8","modified":1592977545762},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1592977545763},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1592977545763},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1592977545772},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1592977545772},{"_id":"themes/yilia/source/assets/wx_pay.jpg","hash":"100a8beb3bf715471f65465eecc5b506217fba2f","modified":1593579271674},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1592977545812},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1592977545813},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1592977545814},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1592977545815},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1592977545815},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1592977545816},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1592977545817},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1592977545817},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1592977545818},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1592977545778},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1592977545779},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1592977545779},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1592977545780},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1592977545780},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1592977545781},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"07244c188f58ecfb90bb7c047b8cde977f1dc4b4","modified":1592977545782},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1592977545781},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"df921497bc49e66545c78787cfaa7147c0f08167","modified":1593428574887},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"96d7eb1d42c06fdcccb8ef969f6ecd30c3194903","modified":1592977545786},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1592977545791},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1592977545791},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1592977545791},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1592977545792},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1592977545794},{"_id":"themes/yilia/source-src/css/main.scss","hash":"9eba1fcf4805256697528fcf3b767cf6dd8d0591","modified":1592977545795},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1592977545796},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"d995dcd483a250fe61b426158afb61bf8923a927","modified":1592977545796},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1592977545797},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1592977545798},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1592977545797},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1592977545798},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a10a038a1dac8953cb4ffc7e04272eff9fac54e4","modified":1592977545799},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1592977545800},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1592977545800},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"2924fb6f77c4a9973cd928c2c7db0acb848ed483","modified":1592977545801},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1592977545802},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1592977545803},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1592977545803},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1592977545805},{"_id":"themes/yilia/source-src/js/aside.js","hash":"5e4c3c3d61f1e1ce2f09688d3aff25fadc851fff","modified":1592977545804},{"_id":"themes/yilia/source-src/js/fix.js","hash":"67b8819abb886c9d066fb3b0624ca15e06f63fe0","modified":1592977545805},{"_id":"themes/yilia/source-src/js/main.js","hash":"fe98bf90ce61658fe16ae057f8b6a512a845af3b","modified":1592977545806},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1592977545807},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1592977545807},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1592977545808},{"_id":"themes/yilia/source-src/js/slider.js","hash":"0beaa112657ad57c723d9e773d5b79de60c1dd74","modified":1592977545809},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1592977545810},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"c699cf3c89409ec8f044258e0715a470861b5d5d","modified":1592977545810},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"ba92cf9bcee18bc1f5a190e8c0ea21e185d0382b","modified":1593655175639},{"_id":"themes/yilia/source/assets/9zai.jpg","hash":"f7e2644145a458f7cfb6a5d98e6684d601e3377d","modified":1593334218634},{"_id":"themes/yilia/source/assets/letra.jpg","hash":"9c378bbf7c0c90d0e29b1e799bb7371ab1f85e34","modified":1593590598145},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"e777cbf959b11c4dfda649c562799899b90ab4a3","modified":1592977545764},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1592977545766},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1592977545765},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"086c8a88fd3bcae7ec13258df58e25d6354af2fa","modified":1592977545765},{"_id":"themes/yilia/layout/_partial/post/gitalk.ejs","hash":"032d8d94b3b0eeac492d8d655762dac4ccb8aacd","modified":1593428512597},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"25655016773aa5d0774c56115ae1736a9fc9ea1f","modified":1592977545766},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1592977545767},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"f464a06d565ec2b207857ca88429648be5b9a5ad","modified":1593486753306},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1592977545768},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1592977545768},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1592977545769},{"_id":"themes/yilia/source/articleImage/2020-06-29/1.png","hash":"1b86b2b6f4ccb86607415693b8e41eb991125191","modified":1593655175640},{"_id":"themes/yilia/source/articleImage/2020-06-29/2.png","hash":"0fe7118e0dbe7ab40306189e90b6b9c7c9190a7f","modified":1593655175640},{"_id":"themes/yilia/source/articleImage/2020-07-03/2.png","hash":"7aae332feaa655274c396ca52b128e47bb5b4dc7","modified":1593756446716},{"_id":"themes/yilia/source/articleImage/2020-07-03/4.png","hash":"155cfe6a669077b47ba0faa3a934843f4c39776f","modified":1594089958402},{"_id":"themes/yilia/source/articleImage/2020-07-07/udp.png","hash":"bdcb9bcf8acb27cfe54352dc7880db177dd77323","modified":1594089992899},{"_id":"themes/yilia/source/assets/karon.jpg","hash":"41cb22ef5b1f858d0830dcedec9482fd873eaf07","modified":1593334184192},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1592977545783},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1592977545784},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1592977545784},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1592977545785},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1592977545786},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1592977545788},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1592977545789},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1592977545790},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1592977545793},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1592977545793},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1592977545794},{"_id":"themes/yilia/source/articleImage/2020-07-03/3.jpg","hash":"c2a205a8715b74cb65ebc2d2574fb92f40ae04f0","modified":1594089806859},{"_id":"themes/yilia/source/articleImage/2020-07-03/3.png","hash":"bcbeb5ddb5653dd4f4cfb66851bbce619095b1df","modified":1594089916504},{"_id":"themes/yilia/source/articleImage/2020-07-07/3.png","hash":"191a9127234bbee1e9c8849e54520c9de9258db2","modified":1594102578385},{"_id":"themes/yilia/source/articleImage/2020-07-07/4.png","hash":"4cbf7773c58ce616c96e7769271c5a3d105b9300","modified":1594102585758},{"_id":"themes/yilia/source/articleImage/2020-07-07/hdck1.png","hash":"d4c92a5ebeb09f06c01d39c3bed627ff561e8747","modified":1594100660459},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1592977545789},{"_id":"themes/yilia/source/articleImage/2020-07-03/1.png","hash":"0ec2d4a686189a67ab4d20bd11007e0bd014e77b","modified":1593748379575},{"_id":"themes/yilia/source/articleImage/2020-07-03/osi.gif","hash":"d8ad371232dff39d27a4f47547861191ee7b104e","modified":1593755208655},{"_id":"themes/yilia/source/articleImage/2020-07-07/2.png","hash":"9528a81e8e588fd5cf7de19749e3685f6e008b28","modified":1594101619568},{"_id":"public/atom.xml","hash":"a5991a8ca519a63308d34edae753b19723ec5fb2","modified":1594119894379},{"_id":"public/content.json","hash":"1736768478e6ea5de4869cab9cb0c10fc7d066f8","modified":1594119894379},{"_id":"public/categories/index.html","hash":"4715ef5a441e264edaad734189f124989ff258ee","modified":1594119894379},{"_id":"public/2020/07/07/TCP滑动窗口/index.html","hash":"a492e9d7b30ad9d0bc5be74c0a1ebdc7bea0ba3f","modified":1594119894379},{"_id":"public/2020/07/07/TCP和UDP的区别/index.html","hash":"eb9ed150e04c4f5abd8bb591bfc9356654745426","modified":1594119894379},{"_id":"public/2020/07/03/TCP四次挥手/index.html","hash":"21e7272da2b3424ef029c0d9fc2a692cbd585597","modified":1594119894379},{"_id":"public/2020/07/03/TCP三次握手/index.html","hash":"211acf841c742977ea89c742f6e29c5bbd8409d0","modified":1594119894379},{"_id":"public/2020/07/03/Java面试宝典之-计算机网络/index.html","hash":"94ef97c12369aa26416022c2e452ec3fe45e25ba","modified":1594119894379},{"_id":"public/2020/06/29/Hexo博客多电脑同步/index.html","hash":"8bc57897098a50fc71cc9e117367f7cd81765ebd","modified":1594119894379},{"_id":"public/2020/06/28/Local-Debug-Dubbo/index.html","hash":"dac40f0f7d0f18ac55017ad4a649fa0bf34bc038","modified":1594119894379},{"_id":"public/2017/07/21/redis_install/index.html","hash":"651a84e56024fe456a7c6ac04fac50fbbd2b2bf0","modified":1594119894379},{"_id":"public/2017/05/26/duplicateRemoval/index.html","hash":"b35f7774a2a350600ad42cbe849cc94cb3665ad9","modified":1594119894379},{"_id":"public/2017/05/25/javaMail/index.html","hash":"355376047483cde8a988e2ef801f54ba9d2643a9","modified":1594119894379},{"_id":"public/2017/04/01/LocalDate/index.html","hash":"6862783f511646a7cb82560cb6f262f4a0eb9932","modified":1594119894379},{"_id":"public/2017/03/31/springmvcPost/index.html","hash":"656b956fa40364966587218ac8ca7e73f20ff553","modified":1594119894379},{"_id":"public/2017/05/24/paramPass/index.html","hash":"892da93511d5b3d77d6732db2a3fa8c4cb32b684","modified":1594119894379},{"_id":"public/2017/03/20/mvcdemo/index.html","hash":"fb1362c7391af25845eaf563df25f016dfe6b5ab","modified":1594119894379},{"_id":"public/2017/03/15/Comparable/index.html","hash":"2eedeb61c432f39bd0838bfb8b5925132faacac9","modified":1594119894379},{"_id":"public/2017/03/15/mapSort/index.html","hash":"87206a6bee168f86900dd6ca44e5dd4bcd9b057f","modified":1594119894379},{"_id":"public/2017/03/14/druidError/index.html","hash":"a93b1fadb20da67ac05e52f7f8be13fcf0f91dda","modified":1594119894379},{"_id":"public/2017/03/13/Lambda/index.html","hash":"65bb4f14a6a494efa814ed4dd547e3ba0229db54","modified":1594119894379},{"_id":"public/2017/03/03/webhook/index.html","hash":"62d80212dac6268c0094af764897d7662fac3fe2","modified":1594119894379},{"_id":"public/2017/03/03/ddos/index.html","hash":"d733b014956fcae2e4773745c17fb032423c627b","modified":1594119894379},{"_id":"public/2017/01/04/vps-install-nginx/index.html","hash":"ff03279b382a0e7f1c35b2ffdff7bac83224327c","modified":1594119894379},{"_id":"public/2016/12/20/vps/index.html","hash":"42dd5d1b4843bd5707824e0057a94ae2d43a9755","modified":1594119894379},{"_id":"public/categories/编程/index.html","hash":"ddf29fbc81e49b42e57cfadac43d6a0b174d62f9","modified":1594119894379},{"_id":"public/categories/博客/index.html","hash":"0751d8dd177fa6328429e271f15fa107ee32cb6b","modified":1594119894379},{"_id":"public/categories/Java面试/index.html","hash":"04c0007485180a770930263431203fcdb9752b59","modified":1594119894379},{"_id":"public/categories/编程/Java/index.html","hash":"8e51a046e982f663346b716d6f29e8183e0ca3f6","modified":1594119894379},{"_id":"public/categories/编程/效率/index.html","hash":"ef69aa0929659eab070fb88c30606296922d2469","modified":1594119894379},{"_id":"public/categories/Java面试/计算机网络/index.html","hash":"eb521b675241d3be4154b7639211a7b90cea0f30","modified":1594119894379},{"_id":"public/categories/运维/index.html","hash":"4df2a770f0fbd065e4d2d3fdee5e9064f2897e11","modified":1594119894379},{"_id":"public/categories/其他/index.html","hash":"34c7be43bcdd3cd1f8255cf75a383add08949760","modified":1594119894379},{"_id":"public/categories/编程/Spring/index.html","hash":"91f1985e3ea78aef2ae09eaad61193d8bc39ce7c","modified":1594119894379},{"_id":"public/categories/运维/安全/index.html","hash":"c3f3a6d11893a79dc4af2b6d261061c667582474","modified":1594119894379},{"_id":"public/categories/运维/Linux/index.html","hash":"11a76996bc63fc9584832555ece46977d6c92a2d","modified":1594119894379},{"_id":"public/categories/运维/其他/index.html","hash":"4d817ec01c291ce01ac7e28b0e0886afad1170ca","modified":1594119894379},{"_id":"public/archives/index.html","hash":"8c6307ccf7396b5d16ec20ec77f77f30027b64e8","modified":1594119894379},{"_id":"public/archives/page/2/index.html","hash":"38fa0f77e54938135a12be48757414c71d3b9e9e","modified":1594119894379},{"_id":"public/archives/page/3/index.html","hash":"0001dd57e86e8e5baa3ef82ed1c4738a52fa91bf","modified":1594119894379},{"_id":"public/archives/2016/index.html","hash":"cd1d12278bb365f84d404bf445eca85693eeac17","modified":1594119894379},{"_id":"public/archives/2016/12/index.html","hash":"dcd7723a6ee79003fe528515770c19d1426011ed","modified":1594119894379},{"_id":"public/archives/2017/index.html","hash":"203bccac8e6a464fb4384ada5dd7905f5b097bba","modified":1594119894379},{"_id":"public/archives/2017/page/2/index.html","hash":"fcf6b1e2f6a829b6c1dc448a75263c228c50cf43","modified":1594119894379},{"_id":"public/archives/2017/01/index.html","hash":"e52a73818effcfbce868eed5e335d0bdee8f9061","modified":1594119894379},{"_id":"public/archives/2017/03/index.html","hash":"1ad862b802590dc698c393ada616b0121f633ad6","modified":1594119894379},{"_id":"public/archives/2017/04/index.html","hash":"937def7fd776b2c150ed9416f74ef5908400b77b","modified":1594119894379},{"_id":"public/archives/2017/05/index.html","hash":"571056d656f41d9ecd3820d7ab932574d11fb75a","modified":1594119894379},{"_id":"public/archives/2017/07/index.html","hash":"f02e050fef1e06ecf0511b2e132fa21a0df719fd","modified":1594119894379},{"_id":"public/archives/2020/index.html","hash":"7fe71209106196bb1b57033f2a553b59ef066727","modified":1594119894379},{"_id":"public/archives/2020/06/index.html","hash":"8eed63bb31e1b9bc97d2e35b0bb5d34685634f88","modified":1594119894379},{"_id":"public/archives/2020/07/index.html","hash":"b00b1ab9c5daa8cd293fe833f06814092a02f7a0","modified":1594119894379},{"_id":"public/index.html","hash":"15e5eb54365c5fde38e3c529364020decc79f20e","modified":1594119894379},{"_id":"public/page/2/index.html","hash":"822cda57a67cadf4903e865831e03409b249913a","modified":1594119894379},{"_id":"public/page/3/index.html","hash":"621145c9e0df7629c4e132f231a8f6cf2df367fc","modified":1594119894379},{"_id":"public/tags/Java基础/index.html","hash":"7f576cf308220fdab595f6fa09613108b0cfeb97","modified":1594119894379},{"_id":"public/tags/Hexo/index.html","hash":"10e570fd1bfc8d6a2ed24d15393e2c08195030a4","modified":1594119894379},{"_id":"public/tags/GitHub/index.html","hash":"53e1a17e108eee44ec5cd446a95fb14f2d574fa1","modified":1594119894379},{"_id":"public/tags/Git/index.html","hash":"04dca7ae7e27c6b69eed3c40f4efcc568c5c23c8","modified":1594119894379},{"_id":"public/tags/Lambda/index.html","hash":"3d9c43c8608b2ecf84caa94fb9951555022bbdec","modified":1594119894379},{"_id":"public/tags/dubbo/index.html","hash":"6219f4e251907e76ab460ab92af1c383abea370e","modified":1594119894379},{"_id":"public/tags/ddos/index.html","hash":"f9b53b7e4394ffe6eaabedd961753213009bea14","modified":1594119894379},{"_id":"public/tags/druid/index.html","hash":"d82ed0bc898b2cbe1aff8391b464795fb7c5c7be","modified":1594119894379},{"_id":"public/tags/JavaMail/index.html","hash":"a73f3fbe0120f89a842433d755f6d607687cbb84","modified":1594119894379},{"_id":"public/tags/Redis/index.html","hash":"906742c4be324c39ce73da4d6da9d2f08be8c281","modified":1594119894379},{"_id":"public/tags/Nginx/index.html","hash":"6b333995607cb53e7ad44847f6ce657314e78325","modified":1594119894379},{"_id":"public/tags/Webhook/index.html","hash":"c4804dce4616f358fad3c3b06e87f44526a63adf","modified":1594119894379},{"_id":"public/tags/vpn/index.html","hash":"97f2f5a0e577b94b713512476e26876194a17c50","modified":1594119894379},{"_id":"public/CNAME","hash":"bcbff434d61bbae2ba5fff5a6d583eebcd48a742","modified":1594119894379},{"_id":"public/favicon.png","hash":"6a26261e5d86e062340fcb4bb96764389d04d3ec","modified":1594119894379},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1594119894379},{"_id":"public/assets/wx_pay.jpg","hash":"100a8beb3bf715471f65465eecc5b506217fba2f","modified":1594119894379},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1594119894379},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1594119894379},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1594119894379},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1594119894379},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1594119894379},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1594119894379},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1594119894379},{"_id":"public/articleImage/2020-06-29/1.png","hash":"1b86b2b6f4ccb86607415693b8e41eb991125191","modified":1594119894379},{"_id":"public/articleImage/2020-06-29/2.png","hash":"0fe7118e0dbe7ab40306189e90b6b9c7c9190a7f","modified":1594119894379},{"_id":"public/articleImage/2020-07-03/2.png","hash":"7aae332feaa655274c396ca52b128e47bb5b4dc7","modified":1594119894379},{"_id":"public/articleImage/2020-07-03/4.png","hash":"155cfe6a669077b47ba0faa3a934843f4c39776f","modified":1594119894379},{"_id":"public/articleImage/2020-07-07/udp.png","hash":"bdcb9bcf8acb27cfe54352dc7880db177dd77323","modified":1594119894379},{"_id":"public/articleImage/2020-07-03/3.png","hash":"bcbeb5ddb5653dd4f4cfb66851bbce619095b1df","modified":1594119894379},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1594119894379},{"_id":"public/assets/letra.jpg","hash":"9c378bbf7c0c90d0e29b1e799bb7371ab1f85e34","modified":1594119894379},{"_id":"public/articleImage/2020-07-03/3.jpg","hash":"c2a205a8715b74cb65ebc2d2574fb92f40ae04f0","modified":1594119894379},{"_id":"public/articleImage/2020-07-07/4.png","hash":"4cbf7773c58ce616c96e7769271c5a3d105b9300","modified":1594119894379},{"_id":"public/articleImage/2020-07-07/hdck1.png","hash":"d4c92a5ebeb09f06c01d39c3bed627ff561e8747","modified":1594119894379},{"_id":"public/love.js","hash":"9b8af64e70aeb7b193d30fe79afd1f90ca4a2078","modified":1594119894379},{"_id":"public/main.0cf68a.css","hash":"5e20dbd3771f519da6ae597218be9f4dba28a022","modified":1594119894379},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1594119894379},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1594119894379},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1594119894379},{"_id":"public/assets/9zai.jpg","hash":"f7e2644145a458f7cfb6a5d98e6684d601e3377d","modified":1594119894379},{"_id":"public/articleImage/2020-07-03/1.png","hash":"0ec2d4a686189a67ab4d20bd11007e0bd014e77b","modified":1594119894379},{"_id":"public/articleImage/2020-07-07/3.png","hash":"191a9127234bbee1e9c8849e54520c9de9258db2","modified":1594119894379},{"_id":"public/assets/karon.jpg","hash":"41cb22ef5b1f858d0830dcedec9482fd873eaf07","modified":1594119894379},{"_id":"public/articleImage/2020-07-03/osi.gif","hash":"d8ad371232dff39d27a4f47547861191ee7b104e","modified":1594119894379},{"_id":"public/articleImage/2020-07-07/2.png","hash":"9528a81e8e588fd5cf7de19749e3685f6e008b28","modified":1594119894379}],"Category":[{"name":"编程","_id":"ckcbttrb80003wgto09ie5ne3"},{"name":"博客","_id":"ckcbttrbc0008wgto5ywy7fx2"},{"name":"Java面试","_id":"ckcbttrbg000dwgtohwxmhs0x"},{"name":"Java","parent":"ckcbttrb80003wgto09ie5ne3","_id":"ckcbttrbj000jwgtodwbwaja4"},{"name":"效率","parent":"ckcbttrb80003wgto09ie5ne3","_id":"ckcbttrbo000twgto2povfohd"},{"name":"计算机网络","parent":"ckcbttrbg000dwgtohwxmhs0x","_id":"ckcbttrbv001jwgtob73hf5g0"},{"name":"运维","_id":"ckcbttrc10023wgtogkudc50y"},{"name":"其他","_id":"ckcbttrc30028wgtodrbk0cci"},{"name":"Spring","parent":"ckcbttrb80003wgto09ie5ne3","_id":"ckcbttrc5002hwgto0a86ftki"},{"name":"安全","parent":"ckcbttrc10023wgtogkudc50y","_id":"ckcbttrc80031wgtobmicdv97"},{"name":"Linux","parent":"ckcbttrc10023wgtogkudc50y","_id":"ckcbttrc90032wgto1il67b74"},{"name":"其他","parent":"ckcbttrc10023wgtogkudc50y","_id":"ckcbttrc90034wgtobqrrfs1d"}],"Data":[],"Page":[{"title":"文章分类","date":"2020-07-01T04:00:00.000Z","type":"categories","comments":0,"_content":"\n","source":"categories/index.md","raw":"---\n\ntitle: 文章分类\ndate: 2020-07-01 12:00:00\ntype: \"categories\"\ncomments: false\n\n---\n\n","updated":"2020-07-01T03:54:14.737Z","path":"categories/index.html","layout":"page","_id":"ckcbttrb00000wgto19gwejh3","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Comparable 接口","date":"2017-03-15T08:37:39.000Z","_content":"![](/img/articleImg/compare.png)\n\n>compareTo()方法的工作原理是返回一个int值——或正，或负，或为零。它通过调用作为参数的对象来比较对象。负数表示调用的对象比参数“轻”。如果我们用大小来比较苹果，那么上面的调用会返回一个负数，例如-400，因为红苹果比青苹果小。如果两个苹果重量相等，那么调用将返回0。如果红苹果更重，那么compareTo()将返回一个正数，例如68。\n<!--more-->\n\n### 例1：通过重量排序苹果\n在第一个例子中，我们将通过重量对苹果排序。只需要一行代码。\n\n\tCollections.sort(apples);\n上面的代码行可以为我们做到所有的排序工作，只要我们事先定义好如何对苹果进行排序（这就需要多行代码了）。\n让我们开始写苹果类吧。\n{% codeblock %}\npublic class Apple implements Comparable {\n    private String variety;\n    private Color color;\n    private int weight;\n    @Override\n    public int compareTo(Apple other) {\n        if (this.weight < other.weight) {\n            return -1;\n        }\n        if (this.weight == other.weight) {\n            return 0;\n        }\n        return 1;\n    }\n}\n{% endcodeblock %}\n这是Apple类的第一个版本。由于我们使用的是compareTo方法，并且正在排序苹果，所以我实现了Comparable接口。在这第一个版本中，我们通过重量比较对象。在我们的compareTo()方法中，我们写一个if条件，说明如果这个苹果的重量小于其他的苹果，那么返回一个负数，为了保持简单，我们假定它为-1。请记住，这意味着这个苹果轻于Apple ‘other’。在第二个if语句中，我们要说明，如果苹果重量相等，那么返回一个0。当然，如果这个苹果既不是更轻，又不是一样重，那就只能比其他苹果更重了。在这种情况下，我们返回一个正数，假定为1。\n\n### 例2：通过多个特征排序苹果\n正如我前面提到的，我们还可以使用compareTo()比较多个特征。比方说，我们第一通过品种排序苹果，但如果两个苹果是同一品种，那么我们就按颜色排序。最后，如果这两个特性相同，那么我们将按重量排序。虽然我们可以手动实现这件事，就像我在最后一个例子中做的那样，但是其实可以用一种简洁得多的方式实现。一般来说，最好是重用现有的代码，而不是自己写。我们可以在Integer、String和枚举类中使用compareTo方法来比较值。由于我们没有使用Integer对象，用了int，所以我们不得不使用来自于Integer包装器类的一个静态的helper方法来比较两个值。\n{% codeblock %}\npublic class Apple implements Comparable {\n    private String variety;\n    private Color color;\n    private int weight;\n    @Override\n    public int compareTo(Apple other) {\n        int result = this.variety.compareTo(other.variety);\n        if (result != 0) {\n            return result;\n        }\n        if (result == 0) {\n            result = this.color.compareTo(other.color);\n        }\n        if (result != 0) {\n            return result;\n        }\n        if (result == 0) {\n            result = Integer.compare(this.weight, other.weight);\n        }\n        return result;\n    }\n}\n{% endcodeblock %}\n\n在上例中，我们比较了客户指定的苹果的第一特性，它们的品种。如果compareTo()调用的结果为非零，那么我们返回值。否则，我们调用另一个compareTo()直到得到一个非零值，或者直到已经比较完这三个特征。尽管此代码可以工作，但它不是最有效或干净的解决方案。在例3中，我们重构我们的代码，使其更简单。\n{% codeblock %}\n@Override\npublic int compareTo(Apple other) {\n     int result = this.variety.compareTo(other.variety);\n     if (result == 0) {\n          result = this.color.compareTo(other.color);\n     }\n     if (result == 0) {\n          result = Integer.compare(this.weight, other.weight);\n     }\n     return result;\n}\n{% endcodeblock %}\n正如你所看到的，这大大减少了代码，并且每一次比较只要一行代码。如果一个compareTo()调用的结果是零，那么我们就转移到下一个相同if语句的比较中。顺便说一句，这是成为Clean Coder的一个很好的例子。通常情况下，你不需要立即写出干净的代码；你可以从一个粗略的想法开始，使其可以工作，然后不断改进，直到你尽可能得让它干净就可以了。\n\n### Comparable，hashCode以及Equals\n你可能会注意到compareTo()看起来有点像hashCode()和equals()方法。但是，它们有一个重要的区别。对于hashCode()和equals()方法，比较个体属性的顺序不影响返回的值，但是，在compareTo()中，通过你比较对象的顺序来定义对象的顺序。\n\n### 结论\n在结论中我只想强调Comparable接口是多么的重要。它既用于java.util.Arrays，也用于java.util.Collections实用程序类，来排序元素和搜索排序集合中的元素。使用TreeSet和Tree Map，就更简单了——想要它们会自动排序必须实现Comparable接口的元素。\n\n","source":"_posts/Comparable.md","raw":"---\ntitle: Comparable 接口\ndate: 2017-03-15 16:37:39\ntags:\n\t- Java基础\ncategories:\n\t- 编程\n\t- Java\n\n---\n![](/img/articleImg/compare.png)\n\n>compareTo()方法的工作原理是返回一个int值——或正，或负，或为零。它通过调用作为参数的对象来比较对象。负数表示调用的对象比参数“轻”。如果我们用大小来比较苹果，那么上面的调用会返回一个负数，例如-400，因为红苹果比青苹果小。如果两个苹果重量相等，那么调用将返回0。如果红苹果更重，那么compareTo()将返回一个正数，例如68。\n<!--more-->\n\n### 例1：通过重量排序苹果\n在第一个例子中，我们将通过重量对苹果排序。只需要一行代码。\n\n\tCollections.sort(apples);\n上面的代码行可以为我们做到所有的排序工作，只要我们事先定义好如何对苹果进行排序（这就需要多行代码了）。\n让我们开始写苹果类吧。\n{% codeblock %}\npublic class Apple implements Comparable {\n    private String variety;\n    private Color color;\n    private int weight;\n    @Override\n    public int compareTo(Apple other) {\n        if (this.weight < other.weight) {\n            return -1;\n        }\n        if (this.weight == other.weight) {\n            return 0;\n        }\n        return 1;\n    }\n}\n{% endcodeblock %}\n这是Apple类的第一个版本。由于我们使用的是compareTo方法，并且正在排序苹果，所以我实现了Comparable接口。在这第一个版本中，我们通过重量比较对象。在我们的compareTo()方法中，我们写一个if条件，说明如果这个苹果的重量小于其他的苹果，那么返回一个负数，为了保持简单，我们假定它为-1。请记住，这意味着这个苹果轻于Apple ‘other’。在第二个if语句中，我们要说明，如果苹果重量相等，那么返回一个0。当然，如果这个苹果既不是更轻，又不是一样重，那就只能比其他苹果更重了。在这种情况下，我们返回一个正数，假定为1。\n\n### 例2：通过多个特征排序苹果\n正如我前面提到的，我们还可以使用compareTo()比较多个特征。比方说，我们第一通过品种排序苹果，但如果两个苹果是同一品种，那么我们就按颜色排序。最后，如果这两个特性相同，那么我们将按重量排序。虽然我们可以手动实现这件事，就像我在最后一个例子中做的那样，但是其实可以用一种简洁得多的方式实现。一般来说，最好是重用现有的代码，而不是自己写。我们可以在Integer、String和枚举类中使用compareTo方法来比较值。由于我们没有使用Integer对象，用了int，所以我们不得不使用来自于Integer包装器类的一个静态的helper方法来比较两个值。\n{% codeblock %}\npublic class Apple implements Comparable {\n    private String variety;\n    private Color color;\n    private int weight;\n    @Override\n    public int compareTo(Apple other) {\n        int result = this.variety.compareTo(other.variety);\n        if (result != 0) {\n            return result;\n        }\n        if (result == 0) {\n            result = this.color.compareTo(other.color);\n        }\n        if (result != 0) {\n            return result;\n        }\n        if (result == 0) {\n            result = Integer.compare(this.weight, other.weight);\n        }\n        return result;\n    }\n}\n{% endcodeblock %}\n\n在上例中，我们比较了客户指定的苹果的第一特性，它们的品种。如果compareTo()调用的结果为非零，那么我们返回值。否则，我们调用另一个compareTo()直到得到一个非零值，或者直到已经比较完这三个特征。尽管此代码可以工作，但它不是最有效或干净的解决方案。在例3中，我们重构我们的代码，使其更简单。\n{% codeblock %}\n@Override\npublic int compareTo(Apple other) {\n     int result = this.variety.compareTo(other.variety);\n     if (result == 0) {\n          result = this.color.compareTo(other.color);\n     }\n     if (result == 0) {\n          result = Integer.compare(this.weight, other.weight);\n     }\n     return result;\n}\n{% endcodeblock %}\n正如你所看到的，这大大减少了代码，并且每一次比较只要一行代码。如果一个compareTo()调用的结果是零，那么我们就转移到下一个相同if语句的比较中。顺便说一句，这是成为Clean Coder的一个很好的例子。通常情况下，你不需要立即写出干净的代码；你可以从一个粗略的想法开始，使其可以工作，然后不断改进，直到你尽可能得让它干净就可以了。\n\n### Comparable，hashCode以及Equals\n你可能会注意到compareTo()看起来有点像hashCode()和equals()方法。但是，它们有一个重要的区别。对于hashCode()和equals()方法，比较个体属性的顺序不影响返回的值，但是，在compareTo()中，通过你比较对象的顺序来定义对象的顺序。\n\n### 结论\n在结论中我只想强调Comparable接口是多么的重要。它既用于java.util.Arrays，也用于java.util.Collections实用程序类，来排序元素和搜索排序集合中的元素。使用TreeSet和Tree Map，就更简单了——想要它们会自动排序必须实现Comparable接口的元素。\n\n","slug":"Comparable","published":1,"updated":"2020-07-02T03:39:58.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcbttrb30001wgto8ju83xxn","content":"<p><img src=\"/img/articleImg/compare.png\" alt=\"\"></p>\n<blockquote>\n<p>compareTo()方法的工作原理是返回一个int值——或正，或负，或为零。它通过调用作为参数的对象来比较对象。负数表示调用的对象比参数“轻”。如果我们用大小来比较苹果，那么上面的调用会返回一个负数，例如-400，因为红苹果比青苹果小。如果两个苹果重量相等，那么调用将返回0。如果红苹果更重，那么compareTo()将返回一个正数，例如68。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"例1：通过重量排序苹果\"><a href=\"#例1：通过重量排序苹果\" class=\"headerlink\" title=\"例1：通过重量排序苹果\"></a>例1：通过重量排序苹果</h3><p>在第一个例子中，我们将通过重量对苹果排序。只需要一行代码。</p>\n<pre><code>Collections.sort(apples);</code></pre><p>上面的代码行可以为我们做到所有的排序工作，只要我们事先定义好如何对苹果进行排序（这就需要多行代码了）。<br>让我们开始写苹果类吧。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Apple implements Comparable &#123;</span><br><span class=\"line\">    private String variety;</span><br><span class=\"line\">    private Color color;</span><br><span class=\"line\">    private int weight;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public int compareTo(Apple other) &#123;</span><br><span class=\"line\">        if (this.weight &lt; other.weight) &#123;</span><br><span class=\"line\">            return -1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (this.weight &#x3D;&#x3D; other.weight) &#123;</span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是Apple类的第一个版本。由于我们使用的是compareTo方法，并且正在排序苹果，所以我实现了Comparable接口。在这第一个版本中，我们通过重量比较对象。在我们的compareTo()方法中，我们写一个if条件，说明如果这个苹果的重量小于其他的苹果，那么返回一个负数，为了保持简单，我们假定它为-1。请记住，这意味着这个苹果轻于Apple ‘other’。在第二个if语句中，我们要说明，如果苹果重量相等，那么返回一个0。当然，如果这个苹果既不是更轻，又不是一样重，那就只能比其他苹果更重了。在这种情况下，我们返回一个正数，假定为1。</p>\n<h3 id=\"例2：通过多个特征排序苹果\"><a href=\"#例2：通过多个特征排序苹果\" class=\"headerlink\" title=\"例2：通过多个特征排序苹果\"></a>例2：通过多个特征排序苹果</h3><p>正如我前面提到的，我们还可以使用compareTo()比较多个特征。比方说，我们第一通过品种排序苹果，但如果两个苹果是同一品种，那么我们就按颜色排序。最后，如果这两个特性相同，那么我们将按重量排序。虽然我们可以手动实现这件事，就像我在最后一个例子中做的那样，但是其实可以用一种简洁得多的方式实现。一般来说，最好是重用现有的代码，而不是自己写。我们可以在Integer、String和枚举类中使用compareTo方法来比较值。由于我们没有使用Integer对象，用了int，所以我们不得不使用来自于Integer包装器类的一个静态的helper方法来比较两个值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Apple implements Comparable &#123;</span><br><span class=\"line\">    private String variety;</span><br><span class=\"line\">    private Color color;</span><br><span class=\"line\">    private int weight;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public int compareTo(Apple other) &#123;</span><br><span class=\"line\">        int result &#x3D; this.variety.compareTo(other.variety);</span><br><span class=\"line\">        if (result !&#x3D; 0) &#123;</span><br><span class=\"line\">            return result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (result &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">            result &#x3D; this.color.compareTo(other.color);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (result !&#x3D; 0) &#123;</span><br><span class=\"line\">            return result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (result &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">            result &#x3D; Integer.compare(this.weight, other.weight);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上例中，我们比较了客户指定的苹果的第一特性，它们的品种。如果compareTo()调用的结果为非零，那么我们返回值。否则，我们调用另一个compareTo()直到得到一个非零值，或者直到已经比较完这三个特征。尽管此代码可以工作，但它不是最有效或干净的解决方案。在例3中，我们重构我们的代码，使其更简单。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public int compareTo(Apple other) &#123;</span><br><span class=\"line\">     int result &#x3D; this.variety.compareTo(other.variety);</span><br><span class=\"line\">     if (result &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">          result &#x3D; this.color.compareTo(other.color);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     if (result &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">          result &#x3D; Integer.compare(this.weight, other.weight);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正如你所看到的，这大大减少了代码，并且每一次比较只要一行代码。如果一个compareTo()调用的结果是零，那么我们就转移到下一个相同if语句的比较中。顺便说一句，这是成为Clean Coder的一个很好的例子。通常情况下，你不需要立即写出干净的代码；你可以从一个粗略的想法开始，使其可以工作，然后不断改进，直到你尽可能得让它干净就可以了。</p>\n<h3 id=\"Comparable，hashCode以及Equals\"><a href=\"#Comparable，hashCode以及Equals\" class=\"headerlink\" title=\"Comparable，hashCode以及Equals\"></a>Comparable，hashCode以及Equals</h3><p>你可能会注意到compareTo()看起来有点像hashCode()和equals()方法。但是，它们有一个重要的区别。对于hashCode()和equals()方法，比较个体属性的顺序不影响返回的值，但是，在compareTo()中，通过你比较对象的顺序来定义对象的顺序。</p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>在结论中我只想强调Comparable接口是多么的重要。它既用于java.util.Arrays，也用于java.util.Collections实用程序类，来排序元素和搜索排序集合中的元素。使用TreeSet和Tree Map，就更简单了——想要它们会自动排序必须实现Comparable接口的元素。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/articleImg/compare.png\" alt=\"\"></p>\n<blockquote>\n<p>compareTo()方法的工作原理是返回一个int值——或正，或负，或为零。它通过调用作为参数的对象来比较对象。负数表示调用的对象比参数“轻”。如果我们用大小来比较苹果，那么上面的调用会返回一个负数，例如-400，因为红苹果比青苹果小。如果两个苹果重量相等，那么调用将返回0。如果红苹果更重，那么compareTo()将返回一个正数，例如68。</p>\n</blockquote>","more":"<h3 id=\"例1：通过重量排序苹果\"><a href=\"#例1：通过重量排序苹果\" class=\"headerlink\" title=\"例1：通过重量排序苹果\"></a>例1：通过重量排序苹果</h3><p>在第一个例子中，我们将通过重量对苹果排序。只需要一行代码。</p>\n<pre><code>Collections.sort(apples);</code></pre><p>上面的代码行可以为我们做到所有的排序工作，只要我们事先定义好如何对苹果进行排序（这就需要多行代码了）。<br>让我们开始写苹果类吧。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Apple implements Comparable &#123;</span><br><span class=\"line\">    private String variety;</span><br><span class=\"line\">    private Color color;</span><br><span class=\"line\">    private int weight;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public int compareTo(Apple other) &#123;</span><br><span class=\"line\">        if (this.weight &lt; other.weight) &#123;</span><br><span class=\"line\">            return -1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (this.weight &#x3D;&#x3D; other.weight) &#123;</span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是Apple类的第一个版本。由于我们使用的是compareTo方法，并且正在排序苹果，所以我实现了Comparable接口。在这第一个版本中，我们通过重量比较对象。在我们的compareTo()方法中，我们写一个if条件，说明如果这个苹果的重量小于其他的苹果，那么返回一个负数，为了保持简单，我们假定它为-1。请记住，这意味着这个苹果轻于Apple ‘other’。在第二个if语句中，我们要说明，如果苹果重量相等，那么返回一个0。当然，如果这个苹果既不是更轻，又不是一样重，那就只能比其他苹果更重了。在这种情况下，我们返回一个正数，假定为1。</p>\n<h3 id=\"例2：通过多个特征排序苹果\"><a href=\"#例2：通过多个特征排序苹果\" class=\"headerlink\" title=\"例2：通过多个特征排序苹果\"></a>例2：通过多个特征排序苹果</h3><p>正如我前面提到的，我们还可以使用compareTo()比较多个特征。比方说，我们第一通过品种排序苹果，但如果两个苹果是同一品种，那么我们就按颜色排序。最后，如果这两个特性相同，那么我们将按重量排序。虽然我们可以手动实现这件事，就像我在最后一个例子中做的那样，但是其实可以用一种简洁得多的方式实现。一般来说，最好是重用现有的代码，而不是自己写。我们可以在Integer、String和枚举类中使用compareTo方法来比较值。由于我们没有使用Integer对象，用了int，所以我们不得不使用来自于Integer包装器类的一个静态的helper方法来比较两个值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Apple implements Comparable &#123;</span><br><span class=\"line\">    private String variety;</span><br><span class=\"line\">    private Color color;</span><br><span class=\"line\">    private int weight;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public int compareTo(Apple other) &#123;</span><br><span class=\"line\">        int result &#x3D; this.variety.compareTo(other.variety);</span><br><span class=\"line\">        if (result !&#x3D; 0) &#123;</span><br><span class=\"line\">            return result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (result &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">            result &#x3D; this.color.compareTo(other.color);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (result !&#x3D; 0) &#123;</span><br><span class=\"line\">            return result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (result &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">            result &#x3D; Integer.compare(this.weight, other.weight);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上例中，我们比较了客户指定的苹果的第一特性，它们的品种。如果compareTo()调用的结果为非零，那么我们返回值。否则，我们调用另一个compareTo()直到得到一个非零值，或者直到已经比较完这三个特征。尽管此代码可以工作，但它不是最有效或干净的解决方案。在例3中，我们重构我们的代码，使其更简单。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public int compareTo(Apple other) &#123;</span><br><span class=\"line\">     int result &#x3D; this.variety.compareTo(other.variety);</span><br><span class=\"line\">     if (result &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">          result &#x3D; this.color.compareTo(other.color);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     if (result &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">          result &#x3D; Integer.compare(this.weight, other.weight);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正如你所看到的，这大大减少了代码，并且每一次比较只要一行代码。如果一个compareTo()调用的结果是零，那么我们就转移到下一个相同if语句的比较中。顺便说一句，这是成为Clean Coder的一个很好的例子。通常情况下，你不需要立即写出干净的代码；你可以从一个粗略的想法开始，使其可以工作，然后不断改进，直到你尽可能得让它干净就可以了。</p>\n<h3 id=\"Comparable，hashCode以及Equals\"><a href=\"#Comparable，hashCode以及Equals\" class=\"headerlink\" title=\"Comparable，hashCode以及Equals\"></a>Comparable，hashCode以及Equals</h3><p>你可能会注意到compareTo()看起来有点像hashCode()和equals()方法。但是，它们有一个重要的区别。对于hashCode()和equals()方法，比较个体属性的顺序不影响返回的值，但是，在compareTo()中，通过你比较对象的顺序来定义对象的顺序。</p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>在结论中我只想强调Comparable接口是多么的重要。它既用于java.util.Arrays，也用于java.util.Collections实用程序类，来排序元素和搜索排序集合中的元素。使用TreeSet和Tree Map，就更简单了——想要它们会自动排序必须实现Comparable接口的元素。</p>"},{"title":"Hexo博客多电脑同步（hexo+GitHub）","date":"2020-06-29T01:58:13.000Z","_content":"\n### 1.如何让公司电脑A、家里电脑B都能同步编辑博客。\n\n**上传博客工程到Github**\n\n 首先在公司的A电脑搭建并部署完系统后，我们需要将项目上传到你的github上。在A电脑上执行如下命令:\n\n```js\n#git初始化\ngit init\n#添加仓库地址\ngit remote add origin https://github.com/用户名/你的GitHub用户名.github.io.git \n#新建分支并切换到新建的分支\ngit checkout -b 分支名 \n#添加所有本地文件到git\ngit add . \n#git提交\ngit commit -m \"这里填写你本次提交的备注，内容随意\" \n#文件推送到hexo分支\ngit push origin 分支名 \n```\n\n**从另一台电脑下载博客工程**\n\nB电脑如何下载项目文件呢？首先在B电脑上部署好Git和Node.js环境。\n\n然后输入以下命令<!--more-->\n\n```js\ngit clone -b 分支名 https://github.com/用户名/你的GitHub用户\n\n```\n\n克隆下载完成后，进入到你项目的文件夹，重新配置你的hexo环境，命令如下：\n\n```js\n#安装hexo,注意这里不需要hexo初始化,否则之前的hexo配置参数会重置\nsudo npm install -g hexo-cli \n#安装依赖库\nsudo npm install \n#安装git部署相关配置\nsudo npm install hexo-deployer-git \n```\n\n之后就可以创建撰写新的文章，并使用sudo hexo g -d命令创建并部署您的网站。\n\n**撰写完后如何再次同步**\n\n```js\ngit add .\ngit commit -m \"提交的备注，内容随意\"\ngit push origin 分支名\n#没错，这个样就够了~你B电脑上的数据也已经同步到Github上面了。\n#那第二天到A电脑跟前，只需要执行以下命令就行\n\ngit pull\n#这样，你的数据就全部同步到A电脑了，以后在部署完后，再次执行\n\ngit add .\ngit commit -m \"提交的备注，内容随意\"\ngit push origin 分支名\n```\n\n------\n\n**常见问题**\n\n（1）修改主题后，主题文件无法推送至GitHub\n\n可能是该子文件夹下有.git文件夹导致无法上传，\n\n```markdown\n#删除子文件夹下.git后，依然无法提交子文件夹下的文件。\n1. git rm --cached themes/yilia\n2. git add .\n3. git commit -m \"xxx\"\n4. git push origin master\n```\n\n（2）文章多标签格式：\n\n```js\ntags: \n- Hexo\n- GitHub\n- Git\n```\n\n（3）文章缩略标识\n\n```\n<!--more-->\n```\n\n\n\n（4）添加评论GitTalk\n\n**创建 gitalk.ejs**\n\n在你的 hexo 目录 `/theme/yilia/layout/_partial/post/` 目录下创建 `gitalk.ejs` 并写入如下内容：\n\n```\n<div id=\"gitalk-container\"></div>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css\">\n<script src=\"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js\"></script>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.js\"></script>\n\n<script>\nvar gitalk = new Gitalk({\n  clientID: '<%=theme.gitalk.clientID%>',\n  clientSecret: '<%=theme.gitalk.clientSecret%>',\n  repo: '<%=theme.gitalk.repo%>',\n  owner: '<%=theme.gitalk.owner%>',\n  admin: ['<%=theme.gitalk.admin%>'],\n  id: md5(window.location.pathname),\n  distractionFreeMode: <%=theme.gitalk.distractionFreeMode%>\n})\n\ngitalk.render('gitalk-container')\n</script>\n```\n\n**修改 article.ejs**\n\n在你的 hexo 目录 `/theme/yilia/layout/_partial/article.ejs` 文件中最后一行 `“<% } %>”` 之前添加如下内容：\n\n```\n<% if(theme.gitalk.enable && theme.gitalk.distractionFreeMode){ %>\n      <%- partial('post/gitalk', {\n      key: post.slug,\n      title: post.title,\n      url: config.url+url_for(post.path)\n    }) %>\n  <% } %>\n```\n\n**添加配置文件**\n\n在 yilia 的配置文件`_config.yml` 中 gitment 配置下面添加如下配置文件\n\n```\n#6. Gitalk\ngitalk: \n  enable: true    #用来做启用判断可以不用\n  clientID: your clientID    #Github上生成的 Settings Developer/settings/OAuth Apps\n  clientSecret: your clientSecret   #同上\n  repo: git_comment    #评论所在的github project\n  owner: findtheonlyway    #github用户名\n  admin: erbiduo    #可以初始化评论issue的github账户名称\n  distractionFreeMode: true\n```\n\n（5）微信分享二维码失效\n\n打开`themes\\yilia\\layout\\_partial\\post\\share.ejs`文件\n\n把第49行中的 `//pan.baidu.com/share/qrcode?url=`修改为：\n\n```js\n//api.qrserver.com/v1/create-qr-code/?size=150x150&data=\n```\n\n（6）添加文章分类\n\n**1、添加categories链接**\n打开yilia/_config.yml文件，menu处做出以下修改：\n\n```js\nmenu:\n  主页: /\n  分类: /categories\n  归档: /archives\n```\n\n**2、分类页面的构建**\n新建categories页面\n\n```js\nhexo new page categories\n#该命令在source目录下生成一个categories目录，categories目录下有一个index.md文件。\n```\n\n修改categories/index.md为：\n\n```\n---\ntitle: 文章分类\ndate: 2018-06-11 10:13:21\ntype: \"categories\"\ncomments: false\n---\n```\n\n\n生成html\n\n```\nhexo g\nhexo s\n```\n\n访问 http://localhost:4000/categories/ ，即可看到categories页面，只不过现在的页面只有标题。\n\n**3、修改 yilia 主题**\n修改*yilia\\source\\main.0cf68a.css*，将下面的内容添加进去：\n\n```js\ncategory-all-page {\n    margin: 30px 40px 30px 40px;\n    position: relative;\n    min-height: 70vh;\n  }\n  .category-all-page h2 {\n    margin: 20px 0;\n  }\n  .category-all-page .category-all-title {\n    text-align: center;\n  }\n  .category-all-page .category-all {\n    margin-top: 20px;\n  }\n  .category-all-page .category-list {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n  .category-all-page .category-list-item-list-item {\n    margin: 10px 15px;\n  }\n  .category-all-page .category-list-item-list-count {\n    color: $grey;\n  }\n  .category-all-page .category-list-item-list-count:before {\n    display: inline;\n    content: \" (\";\n  }\n  .category-all-page .category-list-item-list-count:after {\n    display: inline;\n    content: \") \";\n  }\n  .category-all-page .category-list-item {\n    margin: 10px 10px;\n  }\n  .category-all-page .category-list-count {\n    color: $grey;\n  }\n  .category-all-page .category-list-count:before {\n    display: inline;\n    content: \" (\";\n  }\n  .category-all-page .category-list-count:after {\n    display: inline;\n    content: \") \";\n  }\n  .category-all-page .category-list-child {\n    padding-left: 10px;\n  }\n```\n\n**4、多层分类**\n新建*yilia/layout/categories.ejs*，输入：\n\n```js\n<article class=\"article article-type-post show\">\n  <header class=\"article-header\" style=\"border-bottom: 1px solid #ccc\">\n  <h1 class=\"article-title\" itemprop=\"name\">\n    <%= page.title %>\n  </h1>\n  </header>\n\n  <% if (site.categories.length){ %>\n  <div class=\"category-all-page\">\n    <h2>共计&nbsp;<%= site.categories.length %>&nbsp;个分类</h2>\n    <%- list_categories(site.categories, {\n      show_count: true,\n      class: 'category-list-item',\n      style: 'list',\n      depth: 2,\n      separator: ''\n    }) %>\n  </div>\n  <% } %>\n</article>\n```\n\n找到 *layout/_partial/article.ejs* \n\n```\n#然后找到<div class=\"article-entry\" itemprop=\"articleBody\">\n#与<% if ((theme.reward_type === 2 || (theme.reward_type === 1 && post.reward)) && !index){ %>之间的内容全部替换为：\n\n<% if (page.type === \"tags\") { %>\n<div class=\"tag-cloud\">\n\t<div class=\"tag-cloud-title\">\n\t<%- _p('counter.tag_cloud', site.tags.length) %>\n\t</div>\n\t<div class=\"tag-cloud-tags\">\n\t<%- tagcloud({\n\t\tmin_font: 12,\n\t\tmax_font: 30,\n\t\tamount: 200,\n\t\tcolor: true,\n\t\tstart_color: '#ccc',\n\t\tend_color: '#111'\n\t\t}) %>\n\t</div>\n</div>\n<% } \nelse if (page.type === 'categories') { \n%> <div class=\"category-all-page\">\n\t<div class=\"category-all-title\">\n\t<%- _p('', site.categories.length) %>\n\t</div>\n\t<div class=\"category-all\">\n\t<%- list_categories() %>\n\t</div>\n</div>\n<% } else { %>\n\t<% if (post.excerpt && index){ %>\t\t<%- post.excerpt %>\n\t<% } else { %>\n\t\t<%- post.content %>\n\t<% } %>\n<% } %>\n```\n\n**5、修改自己的文章**\n\n```js\ntitle: Hexo博客多电脑同步（hexo+GitHub）\ndate: 2020-06-29 09:58:13\ntags: \n- Hexo\n- GitHub\n- Git\ncategories: \n- hexo\n```\n\n（7）分页显示错误\n\n首先找到*blog\\themes\\yilia\\layout_partial\\archive.ejs*\n\n修改两处，分别在8，9行与37，38行\n\n```\n  <% page.posts.each(function(post){ %>\n    <%- partial('article', {post: post, index: true}) %>\n  <% }) %>\n  <% if (page.total > 1){ %>\n    <nav id=\"page-nav\">\n      <%- paginator({\n        prev_text: '上一页',\n        next_text: '下一页'\n      }) %>\n    </nav>\n  <% } %>\n```\n\n然后找到*blog\\themes\\yilia\\layout_partial\\script.ejs*\nctrl + f 搜索 next &raquo\n\n![script.ejs](/articleImage/2020-06-29/1.png)\n\n找到图片中框选的两处， 分别改为上一页与下一页\n\n![script.ejs](/articleImage/2020-06-29/2.png)\n\n\n\n\n[参考链接1](https://cloud.tencent.com/developer/article/1046404)\n\n[参考链接2](https://blog.csdn.net/dta0502/article/details/89607895)","source":"_posts/Hexo博客多电脑同步.md","raw":"---\n\ntitle: Hexo博客多电脑同步（hexo+GitHub）\ndate: 2020-06-29 09:58:13\ntags: \n\t- Hexo\n\t- GitHub\n\t- Git\ncategories: \n\t- 博客\n---\n\n### 1.如何让公司电脑A、家里电脑B都能同步编辑博客。\n\n**上传博客工程到Github**\n\n 首先在公司的A电脑搭建并部署完系统后，我们需要将项目上传到你的github上。在A电脑上执行如下命令:\n\n```js\n#git初始化\ngit init\n#添加仓库地址\ngit remote add origin https://github.com/用户名/你的GitHub用户名.github.io.git \n#新建分支并切换到新建的分支\ngit checkout -b 分支名 \n#添加所有本地文件到git\ngit add . \n#git提交\ngit commit -m \"这里填写你本次提交的备注，内容随意\" \n#文件推送到hexo分支\ngit push origin 分支名 \n```\n\n**从另一台电脑下载博客工程**\n\nB电脑如何下载项目文件呢？首先在B电脑上部署好Git和Node.js环境。\n\n然后输入以下命令<!--more-->\n\n```js\ngit clone -b 分支名 https://github.com/用户名/你的GitHub用户\n\n```\n\n克隆下载完成后，进入到你项目的文件夹，重新配置你的hexo环境，命令如下：\n\n```js\n#安装hexo,注意这里不需要hexo初始化,否则之前的hexo配置参数会重置\nsudo npm install -g hexo-cli \n#安装依赖库\nsudo npm install \n#安装git部署相关配置\nsudo npm install hexo-deployer-git \n```\n\n之后就可以创建撰写新的文章，并使用sudo hexo g -d命令创建并部署您的网站。\n\n**撰写完后如何再次同步**\n\n```js\ngit add .\ngit commit -m \"提交的备注，内容随意\"\ngit push origin 分支名\n#没错，这个样就够了~你B电脑上的数据也已经同步到Github上面了。\n#那第二天到A电脑跟前，只需要执行以下命令就行\n\ngit pull\n#这样，你的数据就全部同步到A电脑了，以后在部署完后，再次执行\n\ngit add .\ngit commit -m \"提交的备注，内容随意\"\ngit push origin 分支名\n```\n\n------\n\n**常见问题**\n\n（1）修改主题后，主题文件无法推送至GitHub\n\n可能是该子文件夹下有.git文件夹导致无法上传，\n\n```markdown\n#删除子文件夹下.git后，依然无法提交子文件夹下的文件。\n1. git rm --cached themes/yilia\n2. git add .\n3. git commit -m \"xxx\"\n4. git push origin master\n```\n\n（2）文章多标签格式：\n\n```js\ntags: \n- Hexo\n- GitHub\n- Git\n```\n\n（3）文章缩略标识\n\n```\n<!--more-->\n```\n\n\n\n（4）添加评论GitTalk\n\n**创建 gitalk.ejs**\n\n在你的 hexo 目录 `/theme/yilia/layout/_partial/post/` 目录下创建 `gitalk.ejs` 并写入如下内容：\n\n```\n<div id=\"gitalk-container\"></div>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css\">\n<script src=\"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js\"></script>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.js\"></script>\n\n<script>\nvar gitalk = new Gitalk({\n  clientID: '<%=theme.gitalk.clientID%>',\n  clientSecret: '<%=theme.gitalk.clientSecret%>',\n  repo: '<%=theme.gitalk.repo%>',\n  owner: '<%=theme.gitalk.owner%>',\n  admin: ['<%=theme.gitalk.admin%>'],\n  id: md5(window.location.pathname),\n  distractionFreeMode: <%=theme.gitalk.distractionFreeMode%>\n})\n\ngitalk.render('gitalk-container')\n</script>\n```\n\n**修改 article.ejs**\n\n在你的 hexo 目录 `/theme/yilia/layout/_partial/article.ejs` 文件中最后一行 `“<% } %>”` 之前添加如下内容：\n\n```\n<% if(theme.gitalk.enable && theme.gitalk.distractionFreeMode){ %>\n      <%- partial('post/gitalk', {\n      key: post.slug,\n      title: post.title,\n      url: config.url+url_for(post.path)\n    }) %>\n  <% } %>\n```\n\n**添加配置文件**\n\n在 yilia 的配置文件`_config.yml` 中 gitment 配置下面添加如下配置文件\n\n```\n#6. Gitalk\ngitalk: \n  enable: true    #用来做启用判断可以不用\n  clientID: your clientID    #Github上生成的 Settings Developer/settings/OAuth Apps\n  clientSecret: your clientSecret   #同上\n  repo: git_comment    #评论所在的github project\n  owner: findtheonlyway    #github用户名\n  admin: erbiduo    #可以初始化评论issue的github账户名称\n  distractionFreeMode: true\n```\n\n（5）微信分享二维码失效\n\n打开`themes\\yilia\\layout\\_partial\\post\\share.ejs`文件\n\n把第49行中的 `//pan.baidu.com/share/qrcode?url=`修改为：\n\n```js\n//api.qrserver.com/v1/create-qr-code/?size=150x150&data=\n```\n\n（6）添加文章分类\n\n**1、添加categories链接**\n打开yilia/_config.yml文件，menu处做出以下修改：\n\n```js\nmenu:\n  主页: /\n  分类: /categories\n  归档: /archives\n```\n\n**2、分类页面的构建**\n新建categories页面\n\n```js\nhexo new page categories\n#该命令在source目录下生成一个categories目录，categories目录下有一个index.md文件。\n```\n\n修改categories/index.md为：\n\n```\n---\ntitle: 文章分类\ndate: 2018-06-11 10:13:21\ntype: \"categories\"\ncomments: false\n---\n```\n\n\n生成html\n\n```\nhexo g\nhexo s\n```\n\n访问 http://localhost:4000/categories/ ，即可看到categories页面，只不过现在的页面只有标题。\n\n**3、修改 yilia 主题**\n修改*yilia\\source\\main.0cf68a.css*，将下面的内容添加进去：\n\n```js\ncategory-all-page {\n    margin: 30px 40px 30px 40px;\n    position: relative;\n    min-height: 70vh;\n  }\n  .category-all-page h2 {\n    margin: 20px 0;\n  }\n  .category-all-page .category-all-title {\n    text-align: center;\n  }\n  .category-all-page .category-all {\n    margin-top: 20px;\n  }\n  .category-all-page .category-list {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n  .category-all-page .category-list-item-list-item {\n    margin: 10px 15px;\n  }\n  .category-all-page .category-list-item-list-count {\n    color: $grey;\n  }\n  .category-all-page .category-list-item-list-count:before {\n    display: inline;\n    content: \" (\";\n  }\n  .category-all-page .category-list-item-list-count:after {\n    display: inline;\n    content: \") \";\n  }\n  .category-all-page .category-list-item {\n    margin: 10px 10px;\n  }\n  .category-all-page .category-list-count {\n    color: $grey;\n  }\n  .category-all-page .category-list-count:before {\n    display: inline;\n    content: \" (\";\n  }\n  .category-all-page .category-list-count:after {\n    display: inline;\n    content: \") \";\n  }\n  .category-all-page .category-list-child {\n    padding-left: 10px;\n  }\n```\n\n**4、多层分类**\n新建*yilia/layout/categories.ejs*，输入：\n\n```js\n<article class=\"article article-type-post show\">\n  <header class=\"article-header\" style=\"border-bottom: 1px solid #ccc\">\n  <h1 class=\"article-title\" itemprop=\"name\">\n    <%= page.title %>\n  </h1>\n  </header>\n\n  <% if (site.categories.length){ %>\n  <div class=\"category-all-page\">\n    <h2>共计&nbsp;<%= site.categories.length %>&nbsp;个分类</h2>\n    <%- list_categories(site.categories, {\n      show_count: true,\n      class: 'category-list-item',\n      style: 'list',\n      depth: 2,\n      separator: ''\n    }) %>\n  </div>\n  <% } %>\n</article>\n```\n\n找到 *layout/_partial/article.ejs* \n\n```\n#然后找到<div class=\"article-entry\" itemprop=\"articleBody\">\n#与<% if ((theme.reward_type === 2 || (theme.reward_type === 1 && post.reward)) && !index){ %>之间的内容全部替换为：\n\n<% if (page.type === \"tags\") { %>\n<div class=\"tag-cloud\">\n\t<div class=\"tag-cloud-title\">\n\t<%- _p('counter.tag_cloud', site.tags.length) %>\n\t</div>\n\t<div class=\"tag-cloud-tags\">\n\t<%- tagcloud({\n\t\tmin_font: 12,\n\t\tmax_font: 30,\n\t\tamount: 200,\n\t\tcolor: true,\n\t\tstart_color: '#ccc',\n\t\tend_color: '#111'\n\t\t}) %>\n\t</div>\n</div>\n<% } \nelse if (page.type === 'categories') { \n%> <div class=\"category-all-page\">\n\t<div class=\"category-all-title\">\n\t<%- _p('', site.categories.length) %>\n\t</div>\n\t<div class=\"category-all\">\n\t<%- list_categories() %>\n\t</div>\n</div>\n<% } else { %>\n\t<% if (post.excerpt && index){ %>\t\t<%- post.excerpt %>\n\t<% } else { %>\n\t\t<%- post.content %>\n\t<% } %>\n<% } %>\n```\n\n**5、修改自己的文章**\n\n```js\ntitle: Hexo博客多电脑同步（hexo+GitHub）\ndate: 2020-06-29 09:58:13\ntags: \n- Hexo\n- GitHub\n- Git\ncategories: \n- hexo\n```\n\n（7）分页显示错误\n\n首先找到*blog\\themes\\yilia\\layout_partial\\archive.ejs*\n\n修改两处，分别在8，9行与37，38行\n\n```\n  <% page.posts.each(function(post){ %>\n    <%- partial('article', {post: post, index: true}) %>\n  <% }) %>\n  <% if (page.total > 1){ %>\n    <nav id=\"page-nav\">\n      <%- paginator({\n        prev_text: '上一页',\n        next_text: '下一页'\n      }) %>\n    </nav>\n  <% } %>\n```\n\n然后找到*blog\\themes\\yilia\\layout_partial\\script.ejs*\nctrl + f 搜索 next &raquo\n\n![script.ejs](/articleImage/2020-06-29/1.png)\n\n找到图片中框选的两处， 分别改为上一页与下一页\n\n![script.ejs](/articleImage/2020-06-29/2.png)\n\n\n\n\n[参考链接1](https://cloud.tencent.com/developer/article/1046404)\n\n[参考链接2](https://blog.csdn.net/dta0502/article/details/89607895)","slug":"Hexo博客多电脑同步","published":1,"updated":"2020-07-02T09:54:51.255Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcbttrb50002wgto9gjl9iod","content":"<h3 id=\"1-如何让公司电脑A、家里电脑B都能同步编辑博客。\"><a href=\"#1-如何让公司电脑A、家里电脑B都能同步编辑博客。\" class=\"headerlink\" title=\"1.如何让公司电脑A、家里电脑B都能同步编辑博客。\"></a>1.如何让公司电脑A、家里电脑B都能同步编辑博客。</h3><p><strong>上传博客工程到Github</strong></p>\n<p> 首先在公司的A电脑搭建并部署完系统后，我们需要将项目上传到你的github上。在A电脑上执行如下命令:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#git初始化</span><br><span class=\"line\">git init</span><br><span class=\"line\">#添加仓库地址</span><br><span class=\"line\">git remote add origin https:<span class=\"comment\">//github.com/用户名/你的GitHub用户名.github.io.git </span></span><br><span class=\"line\">#新建分支并切换到新建的分支</span><br><span class=\"line\">git checkout -b 分支名 </span><br><span class=\"line\">#添加所有本地文件到git</span><br><span class=\"line\">git add . </span><br><span class=\"line\">#git提交</span><br><span class=\"line\">git commit -m <span class=\"string\">\"这里填写你本次提交的备注，内容随意\"</span> </span><br><span class=\"line\">#文件推送到hexo分支</span><br><span class=\"line\">git push origin 分支名</span><br></pre></td></tr></table></figure>\n\n<p><strong>从另一台电脑下载博客工程</strong></p>\n<p>B电脑如何下载项目文件呢？首先在B电脑上部署好Git和Node.js环境。</p>\n<p>然后输入以下命令<a id=\"more\"></a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b 分支名 https:<span class=\"comment\">//github.com/用户名/你的GitHub用户</span></span><br></pre></td></tr></table></figure>\n\n<p>克隆下载完成后，进入到你项目的文件夹，重新配置你的hexo环境，命令如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装hexo,注意这里不需要hexo初始化,否则之前的hexo配置参数会重置</span><br><span class=\"line\">sudo npm install -g hexo-cli </span><br><span class=\"line\">#安装依赖库</span><br><span class=\"line\">sudo npm install </span><br><span class=\"line\">#安装git部署相关配置</span><br><span class=\"line\">sudo npm install hexo-deployer-git</span><br></pre></td></tr></table></figure>\n\n<p>之后就可以创建撰写新的文章，并使用sudo hexo g -d命令创建并部署您的网站。</p>\n<p><strong>撰写完后如何再次同步</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">\"提交的备注，内容随意\"</span></span><br><span class=\"line\">git push origin 分支名</span><br><span class=\"line\">#没错，这个样就够了~你B电脑上的数据也已经同步到Github上面了。</span><br><span class=\"line\">#那第二天到A电脑跟前，只需要执行以下命令就行</span><br><span class=\"line\"></span><br><span class=\"line\">git pull</span><br><span class=\"line\">#这样，你的数据就全部同步到A电脑了，以后在部署完后，再次执行</span><br><span class=\"line\"></span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">\"提交的备注，内容随意\"</span></span><br><span class=\"line\">git push origin 分支名</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>常见问题</strong></p>\n<p>（1）修改主题后，主题文件无法推送至GitHub</p>\n<p>可能是该子文件夹下有.git文件夹导致无法上传，</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">#删除子文件夹下.git后，依然无法提交子文件夹下的文件。</span></span><br><span class=\"line\"><span class=\"bullet\">1. </span>git rm --cached themes/yilia</span><br><span class=\"line\"><span class=\"bullet\">2. </span>git add .</span><br><span class=\"line\"><span class=\"bullet\">3. </span>git commit -m \"xxx\"</span><br><span class=\"line\"><span class=\"bullet\">4. </span>git push origin master</span><br></pre></td></tr></table></figure>\n\n<p>（2）文章多标签格式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tags: </span><br><span class=\"line\">- Hexo</span><br><span class=\"line\">- GitHub</span><br><span class=\"line\">- Git</span><br></pre></td></tr></table></figure>\n\n<p>（3）文章缩略标识</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>（4）添加评论GitTalk</p>\n<p><strong>创建 gitalk.ejs</strong></p>\n<p>在你的 hexo 目录 <code>/theme/yilia/layout/_partial/post/</code> 目录下创建 <code>gitalk.ejs</code> 并写入如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;gitalk-container&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;gitalk@1&#x2F;dist&#x2F;gitalk.css&quot;&gt;</span><br><span class=\"line\">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;gitalk@1&#x2F;dist&#x2F;gitalk.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;blueimp-md5&#x2F;2.10.0&#x2F;js&#x2F;md5.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var gitalk &#x3D; new Gitalk(&#123;</span><br><span class=\"line\">  clientID: &#39;&lt;%&#x3D;theme.gitalk.clientID%&gt;&#39;,</span><br><span class=\"line\">  clientSecret: &#39;&lt;%&#x3D;theme.gitalk.clientSecret%&gt;&#39;,</span><br><span class=\"line\">  repo: &#39;&lt;%&#x3D;theme.gitalk.repo%&gt;&#39;,</span><br><span class=\"line\">  owner: &#39;&lt;%&#x3D;theme.gitalk.owner%&gt;&#39;,</span><br><span class=\"line\">  admin: [&#39;&lt;%&#x3D;theme.gitalk.admin%&gt;&#39;],</span><br><span class=\"line\">  id: md5(window.location.pathname),</span><br><span class=\"line\">  distractionFreeMode: &lt;%&#x3D;theme.gitalk.distractionFreeMode%&gt;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gitalk.render(&#39;gitalk-container&#39;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>修改 article.ejs</strong></p>\n<p>在你的 hexo 目录 <code>/theme/yilia/layout/_partial/article.ejs</code> 文件中最后一行 <code>“&lt;% } %&gt;”</code> 之前添加如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if(theme.gitalk.enable &amp;&amp; theme.gitalk.distractionFreeMode)&#123; %&gt;</span><br><span class=\"line\">      &lt;%- partial(&#39;post&#x2F;gitalk&#39;, &#123;</span><br><span class=\"line\">      key: post.slug,</span><br><span class=\"line\">      title: post.title,</span><br><span class=\"line\">      url: config.url+url_for(post.path)</span><br><span class=\"line\">    &#125;) %&gt;</span><br><span class=\"line\">  &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>添加配置文件</strong></p>\n<p>在 yilia 的配置文件<code>_config.yml</code> 中 gitment 配置下面添加如下配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#6. Gitalk</span><br><span class=\"line\">gitalk: </span><br><span class=\"line\">  enable: true    #用来做启用判断可以不用</span><br><span class=\"line\">  clientID: your clientID    #Github上生成的 Settings Developer&#x2F;settings&#x2F;OAuth Apps</span><br><span class=\"line\">  clientSecret: your clientSecret   #同上</span><br><span class=\"line\">  repo: git_comment    #评论所在的github project</span><br><span class=\"line\">  owner: findtheonlyway    #github用户名</span><br><span class=\"line\">  admin: erbiduo    #可以初始化评论issue的github账户名称</span><br><span class=\"line\">  distractionFreeMode: true</span><br></pre></td></tr></table></figure>\n\n<p>（5）微信分享二维码失效</p>\n<p>打开<code>themes\\yilia\\layout\\_partial\\post\\share.ejs</code>文件</p>\n<p>把第49行中的 <code>//pan.baidu.com/share/qrcode?url=</code>修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//api.qrserver.com/v1/create-qr-code/?size=150x150&amp;data=</span></span><br></pre></td></tr></table></figure>\n\n<p>（6）添加文章分类</p>\n<p><strong>1、添加categories链接</strong><br>打开yilia/_config.yml文件，menu处做出以下修改：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  主页: <span class=\"regexp\">/</span></span><br><span class=\"line\"><span class=\"regexp\">  分类: /</span>categories</span><br><span class=\"line\">  归档: <span class=\"regexp\">/archives</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>2、分类页面的构建</strong><br>新建categories页面</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo <span class=\"keyword\">new</span> page categories</span><br><span class=\"line\">#该命令在source目录下生成一个categories目录，categories目录下有一个index.md文件。</span><br></pre></td></tr></table></figure>\n\n<p>修改categories/index.md为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 文章分类</span><br><span class=\"line\">date: 2018-06-11 10:13:21</span><br><span class=\"line\">type: &quot;categories&quot;</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n\n<p>生成html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<p>访问 <a href=\"http://localhost:4000/categories/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/categories/</a> ，即可看到categories页面，只不过现在的页面只有标题。</p>\n<p><strong>3、修改 yilia 主题</strong><br>修改<em>yilia\\source\\main.0cf68a.css</em>，将下面的内容添加进去：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">category-all-page &#123;</span><br><span class=\"line\">    margin: <span class=\"number\">30</span>px <span class=\"number\">40</span>px <span class=\"number\">30</span>px <span class=\"number\">40</span>px;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    min-height: <span class=\"number\">70</span>vh;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .category-all-page h2 &#123;</span><br><span class=\"line\">    margin: <span class=\"number\">20</span>px <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .category-all-page .category-all-title &#123;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .category-all-page .category-all &#123;</span><br><span class=\"line\">    margin-top: <span class=\"number\">20</span>px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .category-all-page .category-list &#123;</span><br><span class=\"line\">    margin: <span class=\"number\">0</span>;</span><br><span class=\"line\">    padding: <span class=\"number\">0</span>;</span><br><span class=\"line\">    list-style: none;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .category-all-page .category-list-item-list-item &#123;</span><br><span class=\"line\">    margin: <span class=\"number\">10</span>px <span class=\"number\">15</span>px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .category-all-page .category-list-item-list-count &#123;</span><br><span class=\"line\">    color: $grey;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .category-all-page .category-list-item-list-count:before &#123;</span><br><span class=\"line\">    display: inline;</span><br><span class=\"line\">    content: <span class=\"string\">\" (\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .category-all-page .category-list-item-list-count:after &#123;</span><br><span class=\"line\">    display: inline;</span><br><span class=\"line\">    content: <span class=\"string\">\") \"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .category-all-page .category-list-item &#123;</span><br><span class=\"line\">    margin: <span class=\"number\">10</span>px <span class=\"number\">10</span>px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .category-all-page .category-list-count &#123;</span><br><span class=\"line\">    color: $grey;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .category-all-page .category-list-count:before &#123;</span><br><span class=\"line\">    display: inline;</span><br><span class=\"line\">    content: <span class=\"string\">\" (\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .category-all-page .category-list-count:after &#123;</span><br><span class=\"line\">    display: inline;</span><br><span class=\"line\">    content: <span class=\"string\">\") \"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .category-all-page .category-list-child &#123;</span><br><span class=\"line\">    padding-left: <span class=\"number\">10</span>px;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、多层分类</strong><br>新建<em>yilia/layout/categories.ejs</em>，输入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;article <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"article article-type-post show\"</span>&gt;</span><br><span class=\"line\">  &lt;header <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"article-header\"</span> style=<span class=\"string\">\"border-bottom: 1px solid #ccc\"</span>&gt;</span><br><span class=\"line\">  &lt;h1 <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"article-title\"</span> itemprop=<span class=\"string\">\"name\"</span>&gt;</span><br><span class=\"line\">    &lt;%= page.title %&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>header&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;% <span class=\"keyword\">if</span> (site.categories.length)&#123; %&gt;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"category-all-page\"</span>&gt;</span><br><span class=\"line\">    &lt;h2&gt;共计&amp;nbsp;&lt;%= site.categories.length %&gt;&amp;nbsp;个分类&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;%- list_categories(site.categories, &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      show_count: true,</span></span><br><span class=\"line\"><span class=\"regexp\">      class: 'category-list-item',</span></span><br><span class=\"line\"><span class=\"regexp\">      style: 'list',</span></span><br><span class=\"line\"><span class=\"regexp\">      depth: 2,</span></span><br><span class=\"line\"><span class=\"regexp\">      separator: ''</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;) %&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br><span class=\"line\">  &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/article&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>找到 <em>layout/_partial/article.ejs</em> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#然后找到&lt;div class&#x3D;&quot;article-entry&quot; itemprop&#x3D;&quot;articleBody&quot;&gt;</span><br><span class=\"line\">#与&lt;% if ((theme.reward_type &#x3D;&#x3D;&#x3D; 2 || (theme.reward_type &#x3D;&#x3D;&#x3D; 1 &amp;&amp; post.reward)) &amp;&amp; !index)&#123; %&gt;之间的内容全部替换为：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% if (page.type &#x3D;&#x3D;&#x3D; &quot;tags&quot;) &#123; %&gt;</span><br><span class=\"line\">&lt;div class&#x3D;&quot;tag-cloud&quot;&gt;</span><br><span class=\"line\">\t&lt;div class&#x3D;&quot;tag-cloud-title&quot;&gt;</span><br><span class=\"line\">\t&lt;%- _p(&#39;counter.tag_cloud&#39;, site.tags.length) %&gt;</span><br><span class=\"line\">\t&lt;&#x2F;div&gt;</span><br><span class=\"line\">\t&lt;div class&#x3D;&quot;tag-cloud-tags&quot;&gt;</span><br><span class=\"line\">\t&lt;%- tagcloud(&#123;</span><br><span class=\"line\">\t\tmin_font: 12,</span><br><span class=\"line\">\t\tmax_font: 30,</span><br><span class=\"line\">\t\tamount: 200,</span><br><span class=\"line\">\t\tcolor: true,</span><br><span class=\"line\">\t\tstart_color: &#39;#ccc&#39;,</span><br><span class=\"line\">\t\tend_color: &#39;#111&#39;</span><br><span class=\"line\">\t\t&#125;) %&gt;</span><br><span class=\"line\">\t&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;% &#125; </span><br><span class=\"line\">else if (page.type &#x3D;&#x3D;&#x3D; &#39;categories&#39;) &#123; </span><br><span class=\"line\">%&gt; &lt;div class&#x3D;&quot;category-all-page&quot;&gt;</span><br><span class=\"line\">\t&lt;div class&#x3D;&quot;category-all-title&quot;&gt;</span><br><span class=\"line\">\t&lt;%- _p(&#39;&#39;, site.categories.length) %&gt;</span><br><span class=\"line\">\t&lt;&#x2F;div&gt;</span><br><span class=\"line\">\t&lt;div class&#x3D;&quot;category-all&quot;&gt;</span><br><span class=\"line\">\t&lt;%- list_categories() %&gt;</span><br><span class=\"line\">\t&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;% &#125; else &#123; %&gt;</span><br><span class=\"line\">\t&lt;% if (post.excerpt &amp;&amp; index)&#123; %&gt;\t\t&lt;%- post.excerpt %&gt;</span><br><span class=\"line\">\t&lt;% &#125; else &#123; %&gt;</span><br><span class=\"line\">\t\t&lt;%- post.content %&gt;</span><br><span class=\"line\">\t&lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>5、修改自己的文章</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: Hexo博客多电脑同步（hexo+GitHub）</span><br><span class=\"line\">date: <span class=\"number\">2020</span><span class=\"number\">-06</span><span class=\"number\">-29</span> <span class=\"number\">09</span>:<span class=\"number\">58</span>:<span class=\"number\">13</span></span><br><span class=\"line\">tags: </span><br><span class=\"line\">- Hexo</span><br><span class=\"line\">- GitHub</span><br><span class=\"line\">- Git</span><br><span class=\"line\">categories: </span><br><span class=\"line\">- hexo</span><br></pre></td></tr></table></figure>\n\n<p>（7）分页显示错误</p>\n<p>首先找到<em>blog\\themes\\yilia\\layout_partial\\archive.ejs</em></p>\n<p>修改两处，分别在8，9行与37，38行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% page.posts.each(function(post)&#123; %&gt;</span><br><span class=\"line\">  &lt;%- partial(&#39;article&#39;, &#123;post: post, index: true&#125;) %&gt;</span><br><span class=\"line\">&lt;% &#125;) %&gt;</span><br><span class=\"line\">&lt;% if (page.total &gt; 1)&#123; %&gt;</span><br><span class=\"line\">  &lt;nav id&#x3D;&quot;page-nav&quot;&gt;</span><br><span class=\"line\">    &lt;%- paginator(&#123;</span><br><span class=\"line\">      prev_text: &#39;上一页&#39;,</span><br><span class=\"line\">      next_text: &#39;下一页&#39;</span><br><span class=\"line\">    &#125;) %&gt;</span><br><span class=\"line\">  &lt;&#x2F;nav&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>然后找到<em>blog\\themes\\yilia\\layout_partial\\script.ejs</em><br>ctrl + f 搜索 next &amp;raquo</p>\n<p><img src=\"/articleImage/2020-06-29/1.png\" alt=\"script.ejs\"></p>\n<p>找到图片中框选的两处， 分别改为上一页与下一页</p>\n<p><img src=\"/articleImage/2020-06-29/2.png\" alt=\"script.ejs\"></p>\n<p><a href=\"https://cloud.tencent.com/developer/article/1046404\" target=\"_blank\" rel=\"noopener\">参考链接1</a></p>\n<p><a href=\"https://blog.csdn.net/dta0502/article/details/89607895\" target=\"_blank\" rel=\"noopener\">参考链接2</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-如何让公司电脑A、家里电脑B都能同步编辑博客。\"><a href=\"#1-如何让公司电脑A、家里电脑B都能同步编辑博客。\" class=\"headerlink\" title=\"1.如何让公司电脑A、家里电脑B都能同步编辑博客。\"></a>1.如何让公司电脑A、家里电脑B都能同步编辑博客。</h3><p><strong>上传博客工程到Github</strong></p>\n<p> 首先在公司的A电脑搭建并部署完系统后，我们需要将项目上传到你的github上。在A电脑上执行如下命令:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#git初始化</span><br><span class=\"line\">git init</span><br><span class=\"line\">#添加仓库地址</span><br><span class=\"line\">git remote add origin https:<span class=\"comment\">//github.com/用户名/你的GitHub用户名.github.io.git </span></span><br><span class=\"line\">#新建分支并切换到新建的分支</span><br><span class=\"line\">git checkout -b 分支名 </span><br><span class=\"line\">#添加所有本地文件到git</span><br><span class=\"line\">git add . </span><br><span class=\"line\">#git提交</span><br><span class=\"line\">git commit -m <span class=\"string\">\"这里填写你本次提交的备注，内容随意\"</span> </span><br><span class=\"line\">#文件推送到hexo分支</span><br><span class=\"line\">git push origin 分支名</span><br></pre></td></tr></table></figure>\n\n<p><strong>从另一台电脑下载博客工程</strong></p>\n<p>B电脑如何下载项目文件呢？首先在B电脑上部署好Git和Node.js环境。</p>\n<p>然后输入以下命令","more":"</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b 分支名 https:<span class=\"comment\">//github.com/用户名/你的GitHub用户</span></span><br></pre></td></tr></table></figure>\n\n<p>克隆下载完成后，进入到你项目的文件夹，重新配置你的hexo环境，命令如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装hexo,注意这里不需要hexo初始化,否则之前的hexo配置参数会重置</span><br><span class=\"line\">sudo npm install -g hexo-cli </span><br><span class=\"line\">#安装依赖库</span><br><span class=\"line\">sudo npm install </span><br><span class=\"line\">#安装git部署相关配置</span><br><span class=\"line\">sudo npm install hexo-deployer-git</span><br></pre></td></tr></table></figure>\n\n<p>之后就可以创建撰写新的文章，并使用sudo hexo g -d命令创建并部署您的网站。</p>\n<p><strong>撰写完后如何再次同步</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">\"提交的备注，内容随意\"</span></span><br><span class=\"line\">git push origin 分支名</span><br><span class=\"line\">#没错，这个样就够了~你B电脑上的数据也已经同步到Github上面了。</span><br><span class=\"line\">#那第二天到A电脑跟前，只需要执行以下命令就行</span><br><span class=\"line\"></span><br><span class=\"line\">git pull</span><br><span class=\"line\">#这样，你的数据就全部同步到A电脑了，以后在部署完后，再次执行</span><br><span class=\"line\"></span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">\"提交的备注，内容随意\"</span></span><br><span class=\"line\">git push origin 分支名</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>常见问题</strong></p>\n<p>（1）修改主题后，主题文件无法推送至GitHub</p>\n<p>可能是该子文件夹下有.git文件夹导致无法上传，</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">#删除子文件夹下.git后，依然无法提交子文件夹下的文件。</span></span><br><span class=\"line\"><span class=\"bullet\">1. </span>git rm --cached themes/yilia</span><br><span class=\"line\"><span class=\"bullet\">2. </span>git add .</span><br><span class=\"line\"><span class=\"bullet\">3. </span>git commit -m \"xxx\"</span><br><span class=\"line\"><span class=\"bullet\">4. </span>git push origin master</span><br></pre></td></tr></table></figure>\n\n<p>（2）文章多标签格式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tags: </span><br><span class=\"line\">- Hexo</span><br><span class=\"line\">- GitHub</span><br><span class=\"line\">- Git</span><br></pre></td></tr></table></figure>\n\n<p>（3）文章缩略标识</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>（4）添加评论GitTalk</p>\n<p><strong>创建 gitalk.ejs</strong></p>\n<p>在你的 hexo 目录 <code>/theme/yilia/layout/_partial/post/</code> 目录下创建 <code>gitalk.ejs</code> 并写入如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;gitalk-container&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;gitalk@1&#x2F;dist&#x2F;gitalk.css&quot;&gt;</span><br><span class=\"line\">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;gitalk@1&#x2F;dist&#x2F;gitalk.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;blueimp-md5&#x2F;2.10.0&#x2F;js&#x2F;md5.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var gitalk &#x3D; new Gitalk(&#123;</span><br><span class=\"line\">  clientID: &#39;&lt;%&#x3D;theme.gitalk.clientID%&gt;&#39;,</span><br><span class=\"line\">  clientSecret: &#39;&lt;%&#x3D;theme.gitalk.clientSecret%&gt;&#39;,</span><br><span class=\"line\">  repo: &#39;&lt;%&#x3D;theme.gitalk.repo%&gt;&#39;,</span><br><span class=\"line\">  owner: &#39;&lt;%&#x3D;theme.gitalk.owner%&gt;&#39;,</span><br><span class=\"line\">  admin: [&#39;&lt;%&#x3D;theme.gitalk.admin%&gt;&#39;],</span><br><span class=\"line\">  id: md5(window.location.pathname),</span><br><span class=\"line\">  distractionFreeMode: &lt;%&#x3D;theme.gitalk.distractionFreeMode%&gt;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gitalk.render(&#39;gitalk-container&#39;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>修改 article.ejs</strong></p>\n<p>在你的 hexo 目录 <code>/theme/yilia/layout/_partial/article.ejs</code> 文件中最后一行 <code>“&lt;% } %&gt;”</code> 之前添加如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if(theme.gitalk.enable &amp;&amp; theme.gitalk.distractionFreeMode)&#123; %&gt;</span><br><span class=\"line\">      &lt;%- partial(&#39;post&#x2F;gitalk&#39;, &#123;</span><br><span class=\"line\">      key: post.slug,</span><br><span class=\"line\">      title: post.title,</span><br><span class=\"line\">      url: config.url+url_for(post.path)</span><br><span class=\"line\">    &#125;) %&gt;</span><br><span class=\"line\">  &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>添加配置文件</strong></p>\n<p>在 yilia 的配置文件<code>_config.yml</code> 中 gitment 配置下面添加如下配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#6. Gitalk</span><br><span class=\"line\">gitalk: </span><br><span class=\"line\">  enable: true    #用来做启用判断可以不用</span><br><span class=\"line\">  clientID: your clientID    #Github上生成的 Settings Developer&#x2F;settings&#x2F;OAuth Apps</span><br><span class=\"line\">  clientSecret: your clientSecret   #同上</span><br><span class=\"line\">  repo: git_comment    #评论所在的github project</span><br><span class=\"line\">  owner: findtheonlyway    #github用户名</span><br><span class=\"line\">  admin: erbiduo    #可以初始化评论issue的github账户名称</span><br><span class=\"line\">  distractionFreeMode: true</span><br></pre></td></tr></table></figure>\n\n<p>（5）微信分享二维码失效</p>\n<p>打开<code>themes\\yilia\\layout\\_partial\\post\\share.ejs</code>文件</p>\n<p>把第49行中的 <code>//pan.baidu.com/share/qrcode?url=</code>修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//api.qrserver.com/v1/create-qr-code/?size=150x150&amp;data=</span></span><br></pre></td></tr></table></figure>\n\n<p>（6）添加文章分类</p>\n<p><strong>1、添加categories链接</strong><br>打开yilia/_config.yml文件，menu处做出以下修改：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  主页: <span class=\"regexp\">/</span></span><br><span class=\"line\"><span class=\"regexp\">  分类: /</span>categories</span><br><span class=\"line\">  归档: <span class=\"regexp\">/archives</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>2、分类页面的构建</strong><br>新建categories页面</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo <span class=\"keyword\">new</span> page categories</span><br><span class=\"line\">#该命令在source目录下生成一个categories目录，categories目录下有一个index.md文件。</span><br></pre></td></tr></table></figure>\n\n<p>修改categories/index.md为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 文章分类</span><br><span class=\"line\">date: 2018-06-11 10:13:21</span><br><span class=\"line\">type: &quot;categories&quot;</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n\n<p>生成html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<p>访问 <a href=\"http://localhost:4000/categories/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/categories/</a> ，即可看到categories页面，只不过现在的页面只有标题。</p>\n<p><strong>3、修改 yilia 主题</strong><br>修改<em>yilia\\source\\main.0cf68a.css</em>，将下面的内容添加进去：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">category-all-page &#123;</span><br><span class=\"line\">    margin: <span class=\"number\">30</span>px <span class=\"number\">40</span>px <span class=\"number\">30</span>px <span class=\"number\">40</span>px;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    min-height: <span class=\"number\">70</span>vh;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .category-all-page h2 &#123;</span><br><span class=\"line\">    margin: <span class=\"number\">20</span>px <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .category-all-page .category-all-title &#123;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .category-all-page .category-all &#123;</span><br><span class=\"line\">    margin-top: <span class=\"number\">20</span>px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .category-all-page .category-list &#123;</span><br><span class=\"line\">    margin: <span class=\"number\">0</span>;</span><br><span class=\"line\">    padding: <span class=\"number\">0</span>;</span><br><span class=\"line\">    list-style: none;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .category-all-page .category-list-item-list-item &#123;</span><br><span class=\"line\">    margin: <span class=\"number\">10</span>px <span class=\"number\">15</span>px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .category-all-page .category-list-item-list-count &#123;</span><br><span class=\"line\">    color: $grey;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .category-all-page .category-list-item-list-count:before &#123;</span><br><span class=\"line\">    display: inline;</span><br><span class=\"line\">    content: <span class=\"string\">\" (\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .category-all-page .category-list-item-list-count:after &#123;</span><br><span class=\"line\">    display: inline;</span><br><span class=\"line\">    content: <span class=\"string\">\") \"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .category-all-page .category-list-item &#123;</span><br><span class=\"line\">    margin: <span class=\"number\">10</span>px <span class=\"number\">10</span>px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .category-all-page .category-list-count &#123;</span><br><span class=\"line\">    color: $grey;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .category-all-page .category-list-count:before &#123;</span><br><span class=\"line\">    display: inline;</span><br><span class=\"line\">    content: <span class=\"string\">\" (\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .category-all-page .category-list-count:after &#123;</span><br><span class=\"line\">    display: inline;</span><br><span class=\"line\">    content: <span class=\"string\">\") \"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .category-all-page .category-list-child &#123;</span><br><span class=\"line\">    padding-left: <span class=\"number\">10</span>px;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、多层分类</strong><br>新建<em>yilia/layout/categories.ejs</em>，输入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;article <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"article article-type-post show\"</span>&gt;</span><br><span class=\"line\">  &lt;header <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"article-header\"</span> style=<span class=\"string\">\"border-bottom: 1px solid #ccc\"</span>&gt;</span><br><span class=\"line\">  &lt;h1 <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"article-title\"</span> itemprop=<span class=\"string\">\"name\"</span>&gt;</span><br><span class=\"line\">    &lt;%= page.title %&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>header&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;% <span class=\"keyword\">if</span> (site.categories.length)&#123; %&gt;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"category-all-page\"</span>&gt;</span><br><span class=\"line\">    &lt;h2&gt;共计&amp;nbsp;&lt;%= site.categories.length %&gt;&amp;nbsp;个分类&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;%- list_categories(site.categories, &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      show_count: true,</span></span><br><span class=\"line\"><span class=\"regexp\">      class: 'category-list-item',</span></span><br><span class=\"line\"><span class=\"regexp\">      style: 'list',</span></span><br><span class=\"line\"><span class=\"regexp\">      depth: 2,</span></span><br><span class=\"line\"><span class=\"regexp\">      separator: ''</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;) %&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br><span class=\"line\">  &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/article&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>找到 <em>layout/_partial/article.ejs</em> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#然后找到&lt;div class&#x3D;&quot;article-entry&quot; itemprop&#x3D;&quot;articleBody&quot;&gt;</span><br><span class=\"line\">#与&lt;% if ((theme.reward_type &#x3D;&#x3D;&#x3D; 2 || (theme.reward_type &#x3D;&#x3D;&#x3D; 1 &amp;&amp; post.reward)) &amp;&amp; !index)&#123; %&gt;之间的内容全部替换为：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% if (page.type &#x3D;&#x3D;&#x3D; &quot;tags&quot;) &#123; %&gt;</span><br><span class=\"line\">&lt;div class&#x3D;&quot;tag-cloud&quot;&gt;</span><br><span class=\"line\">\t&lt;div class&#x3D;&quot;tag-cloud-title&quot;&gt;</span><br><span class=\"line\">\t&lt;%- _p(&#39;counter.tag_cloud&#39;, site.tags.length) %&gt;</span><br><span class=\"line\">\t&lt;&#x2F;div&gt;</span><br><span class=\"line\">\t&lt;div class&#x3D;&quot;tag-cloud-tags&quot;&gt;</span><br><span class=\"line\">\t&lt;%- tagcloud(&#123;</span><br><span class=\"line\">\t\tmin_font: 12,</span><br><span class=\"line\">\t\tmax_font: 30,</span><br><span class=\"line\">\t\tamount: 200,</span><br><span class=\"line\">\t\tcolor: true,</span><br><span class=\"line\">\t\tstart_color: &#39;#ccc&#39;,</span><br><span class=\"line\">\t\tend_color: &#39;#111&#39;</span><br><span class=\"line\">\t\t&#125;) %&gt;</span><br><span class=\"line\">\t&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;% &#125; </span><br><span class=\"line\">else if (page.type &#x3D;&#x3D;&#x3D; &#39;categories&#39;) &#123; </span><br><span class=\"line\">%&gt; &lt;div class&#x3D;&quot;category-all-page&quot;&gt;</span><br><span class=\"line\">\t&lt;div class&#x3D;&quot;category-all-title&quot;&gt;</span><br><span class=\"line\">\t&lt;%- _p(&#39;&#39;, site.categories.length) %&gt;</span><br><span class=\"line\">\t&lt;&#x2F;div&gt;</span><br><span class=\"line\">\t&lt;div class&#x3D;&quot;category-all&quot;&gt;</span><br><span class=\"line\">\t&lt;%- list_categories() %&gt;</span><br><span class=\"line\">\t&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;% &#125; else &#123; %&gt;</span><br><span class=\"line\">\t&lt;% if (post.excerpt &amp;&amp; index)&#123; %&gt;\t\t&lt;%- post.excerpt %&gt;</span><br><span class=\"line\">\t&lt;% &#125; else &#123; %&gt;</span><br><span class=\"line\">\t\t&lt;%- post.content %&gt;</span><br><span class=\"line\">\t&lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>5、修改自己的文章</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: Hexo博客多电脑同步（hexo+GitHub）</span><br><span class=\"line\">date: <span class=\"number\">2020</span><span class=\"number\">-06</span><span class=\"number\">-29</span> <span class=\"number\">09</span>:<span class=\"number\">58</span>:<span class=\"number\">13</span></span><br><span class=\"line\">tags: </span><br><span class=\"line\">- Hexo</span><br><span class=\"line\">- GitHub</span><br><span class=\"line\">- Git</span><br><span class=\"line\">categories: </span><br><span class=\"line\">- hexo</span><br></pre></td></tr></table></figure>\n\n<p>（7）分页显示错误</p>\n<p>首先找到<em>blog\\themes\\yilia\\layout_partial\\archive.ejs</em></p>\n<p>修改两处，分别在8，9行与37，38行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% page.posts.each(function(post)&#123; %&gt;</span><br><span class=\"line\">  &lt;%- partial(&#39;article&#39;, &#123;post: post, index: true&#125;) %&gt;</span><br><span class=\"line\">&lt;% &#125;) %&gt;</span><br><span class=\"line\">&lt;% if (page.total &gt; 1)&#123; %&gt;</span><br><span class=\"line\">  &lt;nav id&#x3D;&quot;page-nav&quot;&gt;</span><br><span class=\"line\">    &lt;%- paginator(&#123;</span><br><span class=\"line\">      prev_text: &#39;上一页&#39;,</span><br><span class=\"line\">      next_text: &#39;下一页&#39;</span><br><span class=\"line\">    &#125;) %&gt;</span><br><span class=\"line\">  &lt;&#x2F;nav&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>然后找到<em>blog\\themes\\yilia\\layout_partial\\script.ejs</em><br>ctrl + f 搜索 next &amp;raquo</p>\n<p><img src=\"/articleImage/2020-06-29/1.png\" alt=\"script.ejs\"></p>\n<p>找到图片中框选的两处， 分别改为上一页与下一页</p>\n<p><img src=\"/articleImage/2020-06-29/2.png\" alt=\"script.ejs\"></p>\n<p><a href=\"https://cloud.tencent.com/developer/article/1046404\" target=\"_blank\" rel=\"noopener\">参考链接1</a></p>\n<p><a href=\"https://blog.csdn.net/dta0502/article/details/89607895\" target=\"_blank\" rel=\"noopener\">参考链接2</a></p>"},{"title":"Java面试宝典之-计算机网络","date":"2020-07-03T03:18:54.000Z","_content":"\n### 网络基础知识\n\n![七层协议](/articleImage/2020-07-03/1.png)\n\n##### 第一层：物理层\n\n解决两台物理机的通信需求，具体就是机器A向机器B发送比特流，机器B能收到比特流。\n物理层定义了物理设备的标准，如网线的类型，光纤的接口类型，各种传输介质的传输速率\n主要作用是传输比特流，将他们转换为电流强弱来传输，到达目的地后在转化为0101的字节码。\n层数据：比特\n存在的物理设备：网卡\n\n<!--more-->\n\n##### 第二层：数据链路层\n\n在传输比特流的时候会出现错传、传输不完整的情况，因此数据链路层应运而生，它定了如何格式化数据以进行传输，提供错误检测和纠正，以确保数据传输的可靠性\n层数据：帧\n存在的物理设备：交换机（对帧解码，并根据帧中包含的信息，把数据发送给正确的接收方）。\n\n##### 第三层，网络层\n\n随着网络节点的不断增加，点对点通信的时候需要经过多个结点，如何到达目标节点、如何选择最佳路径便成为了首要需求。\n作用：是将网络地址翻译成对应的物理地址，并决定如何将数据从发送方路由到接收方。网络层通过综合考虑发送优先级，网络拥塞程度，服务质量，可选路由的花费决定从节点A到结点B的最佳路径。\n层数据：（分组）数据报 存在的物理设备：路由器（由于网络层处理并智能指导数据传送，路由器连接网络各段）\n需要关注的协议： IP\n\n##### 第四层，传输层\n\n随着网络通信需求的进一步扩大，通信过程中需要发送大量的数据，如海量文件传输，可能需要很多时间，而网络在通信的过程中会中断很多次，此时为了保证传输大量文件时的准确性，需要对发出的数据进行切分，切割为一个一个的段落，即segment进行发送，其中一个段落丢失了该怎么办，要不要重传，每个段落要按照顺序到达吗。这便是传输层需要考虑的问题。\n传输层解决了主机间的数据传输，数据间的传输可以是不同网络的，同时传输层解决了传输质量的问题，该层是OSI模型中最重要的一层。具有传输协议，同时进行流量控制，或是基于接收方可接受数据的快慢程度规定适当的发送速率。除此之外，传输层按照网络能处理的最大尺寸，将较长的数据包进行强制分割，例如以太网不能直接接收大于1500字节的数据包，发送方结点的传输层将数据分割成较小的数据片，同时为每一数据片安排序列号，以便数据到达接收方结点的传输层时能以正确的顺序重组，该过程称为排序。\n层数据：分段\n需要关注的协议：TCP/UDP\n\n##### 第五层，会话层\n\n现在我们已经保证给正确的计算机发送正确的封装过后的信息了，但是用户级别的体验好不好，难道每次都需要调用tcp协议去打包，然后调IP协议去找路由，自己去发，这样当然不行。因此我们要建立一个自动收发包，自动寻址的功能。于是发明了会话层\n作用：建立和管理应用程序间的通讯\n\n##### 第六层，表示层\n\n现在能保证应用程序能自动收发包和寻址，但我要用linux给windows发包，两个系统的语法不一致。\n作用：解决不同系统之间的通信语法问题，在表示层，数据将按照网络能理解的方案进行格式化。这种格式化也因所使用网络的类型不同而不同。\n\n##### 第七层，应用层\n\n此时虽然发送方知道发送的是什么东西，转换成字节数组有多长，但接收方不知道，所以应用层的网络协议诞生了\n作用：规定发送方和接收方必须使用一个固定长度的消息头，消息头必须使用某种固定的组成，而且消息头里必须记录消息体的长度等一系列信息，方便接受方能够正确解析发送方发送的数据。应用层旨在让你更方便的应用从网络中接收到的数据，至于数据的传递，没有该层，你也可以直接在两台电脑传递，只不过都是1、0的字节数组。\n需要关注的协议：http协议\n\n从应用层开始都会对要传输信息的头部进行处理，加上本层的一些信息，最终物理层通过以太网，电缆等介质将数据解析成比特流，在网络中传输。数据传递到目标地址并自底而上的将头部的内容解析分离出来。\n\nOSI参考模型并没有提供一个可以实现的方法，而是描述了一些概念，用来协调进程间通信标准的指定。即OSI参考模型并不是一个标准，而是制定标准是所使用的概念性框架。\nTCP\\IP : OSI的一种实现\n\n![OSI](/articleImage/2020-07-03/osi.gif)","source":"_posts/Java面试宝典之-计算机网络.md","raw":"---\ntitle: Java面试宝典之-计算机网络\ndate: 2020-07-03 11:18:54\ncategories:\n\t- Java面试\n\t- 计算机网络\n\n---\n\n### 网络基础知识\n\n![七层协议](/articleImage/2020-07-03/1.png)\n\n##### 第一层：物理层\n\n解决两台物理机的通信需求，具体就是机器A向机器B发送比特流，机器B能收到比特流。\n物理层定义了物理设备的标准，如网线的类型，光纤的接口类型，各种传输介质的传输速率\n主要作用是传输比特流，将他们转换为电流强弱来传输，到达目的地后在转化为0101的字节码。\n层数据：比特\n存在的物理设备：网卡\n\n<!--more-->\n\n##### 第二层：数据链路层\n\n在传输比特流的时候会出现错传、传输不完整的情况，因此数据链路层应运而生，它定了如何格式化数据以进行传输，提供错误检测和纠正，以确保数据传输的可靠性\n层数据：帧\n存在的物理设备：交换机（对帧解码，并根据帧中包含的信息，把数据发送给正确的接收方）。\n\n##### 第三层，网络层\n\n随着网络节点的不断增加，点对点通信的时候需要经过多个结点，如何到达目标节点、如何选择最佳路径便成为了首要需求。\n作用：是将网络地址翻译成对应的物理地址，并决定如何将数据从发送方路由到接收方。网络层通过综合考虑发送优先级，网络拥塞程度，服务质量，可选路由的花费决定从节点A到结点B的最佳路径。\n层数据：（分组）数据报 存在的物理设备：路由器（由于网络层处理并智能指导数据传送，路由器连接网络各段）\n需要关注的协议： IP\n\n##### 第四层，传输层\n\n随着网络通信需求的进一步扩大，通信过程中需要发送大量的数据，如海量文件传输，可能需要很多时间，而网络在通信的过程中会中断很多次，此时为了保证传输大量文件时的准确性，需要对发出的数据进行切分，切割为一个一个的段落，即segment进行发送，其中一个段落丢失了该怎么办，要不要重传，每个段落要按照顺序到达吗。这便是传输层需要考虑的问题。\n传输层解决了主机间的数据传输，数据间的传输可以是不同网络的，同时传输层解决了传输质量的问题，该层是OSI模型中最重要的一层。具有传输协议，同时进行流量控制，或是基于接收方可接受数据的快慢程度规定适当的发送速率。除此之外，传输层按照网络能处理的最大尺寸，将较长的数据包进行强制分割，例如以太网不能直接接收大于1500字节的数据包，发送方结点的传输层将数据分割成较小的数据片，同时为每一数据片安排序列号，以便数据到达接收方结点的传输层时能以正确的顺序重组，该过程称为排序。\n层数据：分段\n需要关注的协议：TCP/UDP\n\n##### 第五层，会话层\n\n现在我们已经保证给正确的计算机发送正确的封装过后的信息了，但是用户级别的体验好不好，难道每次都需要调用tcp协议去打包，然后调IP协议去找路由，自己去发，这样当然不行。因此我们要建立一个自动收发包，自动寻址的功能。于是发明了会话层\n作用：建立和管理应用程序间的通讯\n\n##### 第六层，表示层\n\n现在能保证应用程序能自动收发包和寻址，但我要用linux给windows发包，两个系统的语法不一致。\n作用：解决不同系统之间的通信语法问题，在表示层，数据将按照网络能理解的方案进行格式化。这种格式化也因所使用网络的类型不同而不同。\n\n##### 第七层，应用层\n\n此时虽然发送方知道发送的是什么东西，转换成字节数组有多长，但接收方不知道，所以应用层的网络协议诞生了\n作用：规定发送方和接收方必须使用一个固定长度的消息头，消息头必须使用某种固定的组成，而且消息头里必须记录消息体的长度等一系列信息，方便接受方能够正确解析发送方发送的数据。应用层旨在让你更方便的应用从网络中接收到的数据，至于数据的传递，没有该层，你也可以直接在两台电脑传递，只不过都是1、0的字节数组。\n需要关注的协议：http协议\n\n从应用层开始都会对要传输信息的头部进行处理，加上本层的一些信息，最终物理层通过以太网，电缆等介质将数据解析成比特流，在网络中传输。数据传递到目标地址并自底而上的将头部的内容解析分离出来。\n\nOSI参考模型并没有提供一个可以实现的方法，而是描述了一些概念，用来协调进程间通信标准的指定。即OSI参考模型并不是一个标准，而是制定标准是所使用的概念性框架。\nTCP\\IP : OSI的一种实现\n\n![OSI](/articleImage/2020-07-03/osi.gif)","slug":"Java面试宝典之-计算机网络","published":1,"updated":"2020-07-03T05:51:32.964Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcbttrb90005wgto73gng1aa","content":"<h3 id=\"网络基础知识\"><a href=\"#网络基础知识\" class=\"headerlink\" title=\"网络基础知识\"></a>网络基础知识</h3><p><img src=\"/articleImage/2020-07-03/1.png\" alt=\"七层协议\"></p>\n<h5 id=\"第一层：物理层\"><a href=\"#第一层：物理层\" class=\"headerlink\" title=\"第一层：物理层\"></a>第一层：物理层</h5><p>解决两台物理机的通信需求，具体就是机器A向机器B发送比特流，机器B能收到比特流。<br>物理层定义了物理设备的标准，如网线的类型，光纤的接口类型，各种传输介质的传输速率<br>主要作用是传输比特流，将他们转换为电流强弱来传输，到达目的地后在转化为0101的字节码。<br>层数据：比特<br>存在的物理设备：网卡</p>\n<a id=\"more\"></a>\n\n<h5 id=\"第二层：数据链路层\"><a href=\"#第二层：数据链路层\" class=\"headerlink\" title=\"第二层：数据链路层\"></a>第二层：数据链路层</h5><p>在传输比特流的时候会出现错传、传输不完整的情况，因此数据链路层应运而生，它定了如何格式化数据以进行传输，提供错误检测和纠正，以确保数据传输的可靠性<br>层数据：帧<br>存在的物理设备：交换机（对帧解码，并根据帧中包含的信息，把数据发送给正确的接收方）。</p>\n<h5 id=\"第三层，网络层\"><a href=\"#第三层，网络层\" class=\"headerlink\" title=\"第三层，网络层\"></a>第三层，网络层</h5><p>随着网络节点的不断增加，点对点通信的时候需要经过多个结点，如何到达目标节点、如何选择最佳路径便成为了首要需求。<br>作用：是将网络地址翻译成对应的物理地址，并决定如何将数据从发送方路由到接收方。网络层通过综合考虑发送优先级，网络拥塞程度，服务质量，可选路由的花费决定从节点A到结点B的最佳路径。<br>层数据：（分组）数据报 存在的物理设备：路由器（由于网络层处理并智能指导数据传送，路由器连接网络各段）<br>需要关注的协议： IP</p>\n<h5 id=\"第四层，传输层\"><a href=\"#第四层，传输层\" class=\"headerlink\" title=\"第四层，传输层\"></a>第四层，传输层</h5><p>随着网络通信需求的进一步扩大，通信过程中需要发送大量的数据，如海量文件传输，可能需要很多时间，而网络在通信的过程中会中断很多次，此时为了保证传输大量文件时的准确性，需要对发出的数据进行切分，切割为一个一个的段落，即segment进行发送，其中一个段落丢失了该怎么办，要不要重传，每个段落要按照顺序到达吗。这便是传输层需要考虑的问题。<br>传输层解决了主机间的数据传输，数据间的传输可以是不同网络的，同时传输层解决了传输质量的问题，该层是OSI模型中最重要的一层。具有传输协议，同时进行流量控制，或是基于接收方可接受数据的快慢程度规定适当的发送速率。除此之外，传输层按照网络能处理的最大尺寸，将较长的数据包进行强制分割，例如以太网不能直接接收大于1500字节的数据包，发送方结点的传输层将数据分割成较小的数据片，同时为每一数据片安排序列号，以便数据到达接收方结点的传输层时能以正确的顺序重组，该过程称为排序。<br>层数据：分段<br>需要关注的协议：TCP/UDP</p>\n<h5 id=\"第五层，会话层\"><a href=\"#第五层，会话层\" class=\"headerlink\" title=\"第五层，会话层\"></a>第五层，会话层</h5><p>现在我们已经保证给正确的计算机发送正确的封装过后的信息了，但是用户级别的体验好不好，难道每次都需要调用tcp协议去打包，然后调IP协议去找路由，自己去发，这样当然不行。因此我们要建立一个自动收发包，自动寻址的功能。于是发明了会话层<br>作用：建立和管理应用程序间的通讯</p>\n<h5 id=\"第六层，表示层\"><a href=\"#第六层，表示层\" class=\"headerlink\" title=\"第六层，表示层\"></a>第六层，表示层</h5><p>现在能保证应用程序能自动收发包和寻址，但我要用linux给windows发包，两个系统的语法不一致。<br>作用：解决不同系统之间的通信语法问题，在表示层，数据将按照网络能理解的方案进行格式化。这种格式化也因所使用网络的类型不同而不同。</p>\n<h5 id=\"第七层，应用层\"><a href=\"#第七层，应用层\" class=\"headerlink\" title=\"第七层，应用层\"></a>第七层，应用层</h5><p>此时虽然发送方知道发送的是什么东西，转换成字节数组有多长，但接收方不知道，所以应用层的网络协议诞生了<br>作用：规定发送方和接收方必须使用一个固定长度的消息头，消息头必须使用某种固定的组成，而且消息头里必须记录消息体的长度等一系列信息，方便接受方能够正确解析发送方发送的数据。应用层旨在让你更方便的应用从网络中接收到的数据，至于数据的传递，没有该层，你也可以直接在两台电脑传递，只不过都是1、0的字节数组。<br>需要关注的协议：http协议</p>\n<p>从应用层开始都会对要传输信息的头部进行处理，加上本层的一些信息，最终物理层通过以太网，电缆等介质将数据解析成比特流，在网络中传输。数据传递到目标地址并自底而上的将头部的内容解析分离出来。</p>\n<p>OSI参考模型并没有提供一个可以实现的方法，而是描述了一些概念，用来协调进程间通信标准的指定。即OSI参考模型并不是一个标准，而是制定标准是所使用的概念性框架。<br>TCP\\IP : OSI的一种实现</p>\n<p><img src=\"/articleImage/2020-07-03/osi.gif\" alt=\"OSI\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"网络基础知识\"><a href=\"#网络基础知识\" class=\"headerlink\" title=\"网络基础知识\"></a>网络基础知识</h3><p><img src=\"/articleImage/2020-07-03/1.png\" alt=\"七层协议\"></p>\n<h5 id=\"第一层：物理层\"><a href=\"#第一层：物理层\" class=\"headerlink\" title=\"第一层：物理层\"></a>第一层：物理层</h5><p>解决两台物理机的通信需求，具体就是机器A向机器B发送比特流，机器B能收到比特流。<br>物理层定义了物理设备的标准，如网线的类型，光纤的接口类型，各种传输介质的传输速率<br>主要作用是传输比特流，将他们转换为电流强弱来传输，到达目的地后在转化为0101的字节码。<br>层数据：比特<br>存在的物理设备：网卡</p>","more":"<h5 id=\"第二层：数据链路层\"><a href=\"#第二层：数据链路层\" class=\"headerlink\" title=\"第二层：数据链路层\"></a>第二层：数据链路层</h5><p>在传输比特流的时候会出现错传、传输不完整的情况，因此数据链路层应运而生，它定了如何格式化数据以进行传输，提供错误检测和纠正，以确保数据传输的可靠性<br>层数据：帧<br>存在的物理设备：交换机（对帧解码，并根据帧中包含的信息，把数据发送给正确的接收方）。</p>\n<h5 id=\"第三层，网络层\"><a href=\"#第三层，网络层\" class=\"headerlink\" title=\"第三层，网络层\"></a>第三层，网络层</h5><p>随着网络节点的不断增加，点对点通信的时候需要经过多个结点，如何到达目标节点、如何选择最佳路径便成为了首要需求。<br>作用：是将网络地址翻译成对应的物理地址，并决定如何将数据从发送方路由到接收方。网络层通过综合考虑发送优先级，网络拥塞程度，服务质量，可选路由的花费决定从节点A到结点B的最佳路径。<br>层数据：（分组）数据报 存在的物理设备：路由器（由于网络层处理并智能指导数据传送，路由器连接网络各段）<br>需要关注的协议： IP</p>\n<h5 id=\"第四层，传输层\"><a href=\"#第四层，传输层\" class=\"headerlink\" title=\"第四层，传输层\"></a>第四层，传输层</h5><p>随着网络通信需求的进一步扩大，通信过程中需要发送大量的数据，如海量文件传输，可能需要很多时间，而网络在通信的过程中会中断很多次，此时为了保证传输大量文件时的准确性，需要对发出的数据进行切分，切割为一个一个的段落，即segment进行发送，其中一个段落丢失了该怎么办，要不要重传，每个段落要按照顺序到达吗。这便是传输层需要考虑的问题。<br>传输层解决了主机间的数据传输，数据间的传输可以是不同网络的，同时传输层解决了传输质量的问题，该层是OSI模型中最重要的一层。具有传输协议，同时进行流量控制，或是基于接收方可接受数据的快慢程度规定适当的发送速率。除此之外，传输层按照网络能处理的最大尺寸，将较长的数据包进行强制分割，例如以太网不能直接接收大于1500字节的数据包，发送方结点的传输层将数据分割成较小的数据片，同时为每一数据片安排序列号，以便数据到达接收方结点的传输层时能以正确的顺序重组，该过程称为排序。<br>层数据：分段<br>需要关注的协议：TCP/UDP</p>\n<h5 id=\"第五层，会话层\"><a href=\"#第五层，会话层\" class=\"headerlink\" title=\"第五层，会话层\"></a>第五层，会话层</h5><p>现在我们已经保证给正确的计算机发送正确的封装过后的信息了，但是用户级别的体验好不好，难道每次都需要调用tcp协议去打包，然后调IP协议去找路由，自己去发，这样当然不行。因此我们要建立一个自动收发包，自动寻址的功能。于是发明了会话层<br>作用：建立和管理应用程序间的通讯</p>\n<h5 id=\"第六层，表示层\"><a href=\"#第六层，表示层\" class=\"headerlink\" title=\"第六层，表示层\"></a>第六层，表示层</h5><p>现在能保证应用程序能自动收发包和寻址，但我要用linux给windows发包，两个系统的语法不一致。<br>作用：解决不同系统之间的通信语法问题，在表示层，数据将按照网络能理解的方案进行格式化。这种格式化也因所使用网络的类型不同而不同。</p>\n<h5 id=\"第七层，应用层\"><a href=\"#第七层，应用层\" class=\"headerlink\" title=\"第七层，应用层\"></a>第七层，应用层</h5><p>此时虽然发送方知道发送的是什么东西，转换成字节数组有多长，但接收方不知道，所以应用层的网络协议诞生了<br>作用：规定发送方和接收方必须使用一个固定长度的消息头，消息头必须使用某种固定的组成，而且消息头里必须记录消息体的长度等一系列信息，方便接受方能够正确解析发送方发送的数据。应用层旨在让你更方便的应用从网络中接收到的数据，至于数据的传递，没有该层，你也可以直接在两台电脑传递，只不过都是1、0的字节数组。<br>需要关注的协议：http协议</p>\n<p>从应用层开始都会对要传输信息的头部进行处理，加上本层的一些信息，最终物理层通过以太网，电缆等介质将数据解析成比特流，在网络中传输。数据传递到目标地址并自底而上的将头部的内容解析分离出来。</p>\n<p>OSI参考模型并没有提供一个可以实现的方法，而是描述了一些概念，用来协调进程间通信标准的指定。即OSI参考模型并不是一个标准，而是制定标准是所使用的概念性框架。<br>TCP\\IP : OSI的一种实现</p>\n<p><img src=\"/articleImage/2020-07-03/osi.gif\" alt=\"OSI\"></p>"},{"title":"Lambda","date":"2017-03-13T07:23:43.000Z","_content":"\nJava8主要的改变是为集合框架增加了流的概念，提高了集合的抽象层次。相比于旧有框架直接操作数据的内部处理方式，流+高阶函数的外部处理方式对数据封装更好。同时流的概念使得对并发编程支持更强。\n在语法上Java8提供了Lambda表达式来传递方法体,简化了之前方法必须藏身在不必要的类中的繁琐。Lambda表达式体现了函数式编程的思想，即一个函数亦可以作为另一个函数参数和返回值，使用了函数作参数/返回值的函数被称为高阶函数。\n\n## 1.Lambda表达式\nJava 被诟病为繁琐的地方就在于不支持传递方法，Java中的方法必须依赖类存在，也不能将方法作为参数或返回值，这是与python等语言相比的弱势。\nJava 8中使用新特性Lambda表达式来改善这一点。\n<!--more-->\n### 1.1 使用示例\n以Runnable接口为例，如果需要执行一个线程，实际只需要run()方法中的代码块，但形式上必须要先制造一个Runnable接口实现类(通常是匿名内部类)。\n使用Lambda表达式仅仅需要一行代码，达到传递run方法的效果,而不必定义匿名内部类。\n{% codeblock %}\nnew Thread(()->System.out.println(\"Lambda\")).start();\n{% endcodeblock %}\n### 1.2 类型参数推断机制(Type Argument Inference)\nLambda表达式之所以能够做如此简化得益于Java的类型参数推断机制。所有省略的内容都可以由编译器通过上下文推断出来。类型推断机制在Java中的应用广泛，例如数组类型确定，Java7引入的菱形操作符等。类型参数推断机制要推断的是Lambda表达式的目标类型，往往需要与Java的重载解析机制配合。其解析规则是只有一个可能目标类型时，由响应函数接口里的参数类型推导得出有多个可能目标类型，选择最具体的类型有多个可能目标类型但无法明确最具体类型，则编译报错。\n\n### 1.3 函数接口(Functional Interface)\n一个方法可以抽象成函数接口。函数接口类似于一个黑箱，只需要关注其参数和返回值类型，函数接口中只有单方法。\nRunnable的函数接口如下:\n![](/img/articleImg/jk82.png)\n可以看到这是一个空接口。可以用它代表所有参数和返回值都为空的方法。\nJava8中定义若干函数接口(位于包java.util.function)。\n![](/img/articleImg/jk8.png)\n以Pridicate函数接口为例，这是一个泛型接口，参数可以是任意类型，返回值是boolean类型，代表根据数值作判断的一类方法。\n\n### 1.4 并非语法糖\n从类型推断的角度看很容易觉得Lambda表达式是和泛型，装箱等机制一样的语法糖，编译器在背后补全了省略信息，但实际上并非如此。\n{% codeblock %}\nclass Apple{\n\tpublic String toString() {return \"apple\";};\n\tRunnable r1 = ()->{System.out.println(this);};\n\tRunnable r2 = new Runnable() {\n\t\tpublic void run() {\n\t\t\tSystem.out.println(this);\n\t\t}\n\t};\n}\n//执行两个线程得到的结果是\napple\nDay0917.Apple$1@22e90474\n{% endcodeblock %}\n\n\t正常的匿名内部类中 this关键字 指向内部类对象自身，同时将生成Apple$1.class文件。\n\tLambda表达式中this所指向的则是外部类对象，并不会生成内部类class文件，这说明Lambda表达式并不是语法糖，它没有产生一个内部类，也没有引入一个新的作用域。\n\tLambda与内部类相同之处在于其内部所定义的变量均为final或既成事实上的final.\n\n### 1.5 默认方法\nJava8最重要的改变就是对类库的改造，使得接口中方法可以拥有代码体。这种定义在接口中的包含方法体的方法，需要用default修饰，称之为默认方法。\n{% codeblock %}\ninterface Apple{\n\tdefault void show(){\n\t\tSystem.out.println(\"interface\");\n\t}\n}\nclass MyApple implements Apple{\n\t@Override\n\tpublic void show() {\n\t\tApple.super.show();\n\t}\n}\n{% endcodeblock %}\n如果实现类中重写了默认方法，则接口中默认方法就被覆盖了。如果两个接口定义了相同的默认方法，则实现类中可以通过指定全称来确定使用哪个父类的方法。\n\n### 1.6 方法引用\n如果将匿名内部类改造为Lambda表达式是偷懒的话，那方法引用则是懒到连Lambda表达式都不想写了。\n在之前，我们知道Lambda表达式可以作为函数参数和返回值，表示传递一个方法。方法引用就是使用 ClassName::MethodName 的形式来指定方法。故而方法引用与Lambda表达式完全同源同种，可以相互替代。\n\n>//1,建立一个字符串\n>String::new \n>//2.建立一个字符串数组\n>String[]::new\n>注意 lambda表达式与方法引用表示的是方法本身，将要被用过高阶函数的参数/返回值，并不能单独使用。\n\n## 2.流stream\n任务:创建一个姓名集合，要求出所有初始字母为a的人的总数目。使用流处理的代码如下:\n{% codeblock %}\nArrayList<String> person = new ArrayList<>();\n----init----\n//1.由集合获得流对象\nStream<String> steam = person.stream();\n//2.对流对象进行过滤和统计\nsteam.filter((s)->s.startsWith(\"a\")) //1.流过滤\n.count(); //2.计算流对象中元素数目\n{% endcodeblock %}\n使用函数接口(形式上表现为Lambda表达式)作为参数和返回值的函数就是所谓的高阶函数，如此处的filter，其参数为函数接口Predicate，亦可以理解为一个接口为 T--->boolean 的方法。\n上述示例中为流对象的高阶函数传入一个函数接口Predicate，避免了直接处理集合中的数据对象。示例展示了流使用的通用格式:\n获得流对象Stream\n对流对象Stream进行惰性求值，返回值仍然是一个Stream对象。\n对流对象Stream进行及早求值，返回值不在是一个Stream对象。\n\n### 2.1常见高阶函数\n#### 1.collect方法\ncollect方法属于一个及早求值方法，负责将流对象转换成其他数据结构，如列表，集合，值等。\n这项工作由收集器Collector完成。java8为此提供了Collectors工具类。\n#### 1.1 转换成集合\n>List<Person> list = stream.collect(Collectors.toList());\n>List<Person> arraylist = stream.collect(Collectors.toCollection(ArrayList::new));       \n>Set<Person> set = stream.collect(Collectors.toSet());\n>Set<Person> treeSet = stream.collect(Collectors.toCollection(TreeSet::new));\n\n使用Collectors.toList()将流对象转换成集合时并不需要指定具体类型，Java默认选择了实现类型，如果要自己指定，可以使用Collectors.toCollection(ArrayList::new)，其参数ArrayList::new就是上文中的方法引用，表示一个建立ArrayList对象的方法，ArrayList就是想要转换成的数据类型；\n#### 1.2 转换成值\n>//1.获得最大最小值\n>Function<Person, Integer> getLevel = p->p.age; \n>Comparator<Person> comparator = Comparator.comparing(getLevel);\n>stream.collect(Collectors.maxBy(comparator));\n>stream.collect(Collectors.minBy(comparator));\n>//2.获得平均值\n>ToIntFunction<Person> getAverage = p->p.age;\n>stream.collect(Collectors.averagingInt(getAverage));\n\n#### 1.3 数据分块\n将流对象按某种条件分成两部分\n>Predicate<Person> isTang = p->p.country.equals(Country.Tang);\n>stream.collect(Collectors.partitioningBy(isTang));\n\n#### 1.4 数据分组\n>Function<Person, Integer> country= p -> p.country.ordinal();\n>stream.collect(Collectors.groupingBy(country));\n\n分块和分组看似相同，但意义不同，分块使用判断作为方法，只能将流分成两块；分组则灵活的多。\n#### 1.5 字符串\n>stream.map(Person::getName).collect(Collectors.joining(\"/\", \"[\", \"]\"));\n\n#### 1.6 合并收集器\n>stream.collect(Collectors.groupingBy(country,Collectors.counting()));\n\n### 2.map\nmap是一个惰性求值方法。函数接口为Function<T, R>函数接口,负责将数据从一个类型转换为另一个类型；高阶函数map的作用就是将数据从一个流转换为另一个流。\n### 3.filter\nfilter 是一个惰性求值方法。函数接口为Pridicate<T>,此方法负责对数据进行判断，filter高阶函数负责根据判断结果对流进行过滤。\n### 4.flatMap系列\nflatMap 是一个惰性求值方法。其参数亦为Function<T, R>,将多个流组合为一个流。\n{% codeblock %}\n//1.a1,a2是两个列表，map处理后仍是两个列表\nStream.of(a1,a2).map(s->s)\n\n[1, 2, 3, 4]\n[]\n\n//2.flatMap将二者合并为一个流\nStream.of(a1,a2).map(s->s)\n.flatMap(s->s.stream())\n{% endcodeblock %}\n1234\n看源码可知，flatMap中函数接口Function的输出类型为Stream<R>。\n### 5.max/min\n属于一个及早求值方法。需要传入一个Comparator函数接口，Java8提供了Comparator.comparing方法获得该函数接口的实现，该静态方法是接口的静态方法，获得一个函数返回一个Comparator对象。\nmin(Comparator.comparing(s->s.toString()));\nmax/min的返回值是 Optional，代表一个或有或无的值，主要是用来取代万恶的null值；使用get方法可以获取其值。\n### 6.reduce\n属于一个及早求值方法。意为流数据的累加，有两个版本。\n{% codeblock %}\n//1.无初始值累加\nT t = person.stream().reduce((a,b)->a+b);\n//2.带初始值累加\nOptional<T> t = person.stream().reduce(\"1\",(a,b)->a+b);\n{% endcodeblock %}\n### 7.foreach\n属于一个及早求值方法，用来遍历流对象。\n总而言之，Java8中流对象的引入使得可以在更高的层次上对集合进行处理，使得抽象的方法和具体的行为逻辑分离开来，也加强了数据的封装性，另一个好处是对并发的支持更强，以后再补充。","source":"_posts/Lambda.md","raw":"---\ntitle: Lambda\ndate: 2017-03-13 15:23:43\ntags:\n\t- Lambda\ncategories:\n\t- 编程\n\t- Java\n---\n\nJava8主要的改变是为集合框架增加了流的概念，提高了集合的抽象层次。相比于旧有框架直接操作数据的内部处理方式，流+高阶函数的外部处理方式对数据封装更好。同时流的概念使得对并发编程支持更强。\n在语法上Java8提供了Lambda表达式来传递方法体,简化了之前方法必须藏身在不必要的类中的繁琐。Lambda表达式体现了函数式编程的思想，即一个函数亦可以作为另一个函数参数和返回值，使用了函数作参数/返回值的函数被称为高阶函数。\n\n## 1.Lambda表达式\nJava 被诟病为繁琐的地方就在于不支持传递方法，Java中的方法必须依赖类存在，也不能将方法作为参数或返回值，这是与python等语言相比的弱势。\nJava 8中使用新特性Lambda表达式来改善这一点。\n<!--more-->\n### 1.1 使用示例\n以Runnable接口为例，如果需要执行一个线程，实际只需要run()方法中的代码块，但形式上必须要先制造一个Runnable接口实现类(通常是匿名内部类)。\n使用Lambda表达式仅仅需要一行代码，达到传递run方法的效果,而不必定义匿名内部类。\n{% codeblock %}\nnew Thread(()->System.out.println(\"Lambda\")).start();\n{% endcodeblock %}\n### 1.2 类型参数推断机制(Type Argument Inference)\nLambda表达式之所以能够做如此简化得益于Java的类型参数推断机制。所有省略的内容都可以由编译器通过上下文推断出来。类型推断机制在Java中的应用广泛，例如数组类型确定，Java7引入的菱形操作符等。类型参数推断机制要推断的是Lambda表达式的目标类型，往往需要与Java的重载解析机制配合。其解析规则是只有一个可能目标类型时，由响应函数接口里的参数类型推导得出有多个可能目标类型，选择最具体的类型有多个可能目标类型但无法明确最具体类型，则编译报错。\n\n### 1.3 函数接口(Functional Interface)\n一个方法可以抽象成函数接口。函数接口类似于一个黑箱，只需要关注其参数和返回值类型，函数接口中只有单方法。\nRunnable的函数接口如下:\n![](/img/articleImg/jk82.png)\n可以看到这是一个空接口。可以用它代表所有参数和返回值都为空的方法。\nJava8中定义若干函数接口(位于包java.util.function)。\n![](/img/articleImg/jk8.png)\n以Pridicate函数接口为例，这是一个泛型接口，参数可以是任意类型，返回值是boolean类型，代表根据数值作判断的一类方法。\n\n### 1.4 并非语法糖\n从类型推断的角度看很容易觉得Lambda表达式是和泛型，装箱等机制一样的语法糖，编译器在背后补全了省略信息，但实际上并非如此。\n{% codeblock %}\nclass Apple{\n\tpublic String toString() {return \"apple\";};\n\tRunnable r1 = ()->{System.out.println(this);};\n\tRunnable r2 = new Runnable() {\n\t\tpublic void run() {\n\t\t\tSystem.out.println(this);\n\t\t}\n\t};\n}\n//执行两个线程得到的结果是\napple\nDay0917.Apple$1@22e90474\n{% endcodeblock %}\n\n\t正常的匿名内部类中 this关键字 指向内部类对象自身，同时将生成Apple$1.class文件。\n\tLambda表达式中this所指向的则是外部类对象，并不会生成内部类class文件，这说明Lambda表达式并不是语法糖，它没有产生一个内部类，也没有引入一个新的作用域。\n\tLambda与内部类相同之处在于其内部所定义的变量均为final或既成事实上的final.\n\n### 1.5 默认方法\nJava8最重要的改变就是对类库的改造，使得接口中方法可以拥有代码体。这种定义在接口中的包含方法体的方法，需要用default修饰，称之为默认方法。\n{% codeblock %}\ninterface Apple{\n\tdefault void show(){\n\t\tSystem.out.println(\"interface\");\n\t}\n}\nclass MyApple implements Apple{\n\t@Override\n\tpublic void show() {\n\t\tApple.super.show();\n\t}\n}\n{% endcodeblock %}\n如果实现类中重写了默认方法，则接口中默认方法就被覆盖了。如果两个接口定义了相同的默认方法，则实现类中可以通过指定全称来确定使用哪个父类的方法。\n\n### 1.6 方法引用\n如果将匿名内部类改造为Lambda表达式是偷懒的话，那方法引用则是懒到连Lambda表达式都不想写了。\n在之前，我们知道Lambda表达式可以作为函数参数和返回值，表示传递一个方法。方法引用就是使用 ClassName::MethodName 的形式来指定方法。故而方法引用与Lambda表达式完全同源同种，可以相互替代。\n\n>//1,建立一个字符串\n>String::new \n>//2.建立一个字符串数组\n>String[]::new\n>注意 lambda表达式与方法引用表示的是方法本身，将要被用过高阶函数的参数/返回值，并不能单独使用。\n\n## 2.流stream\n任务:创建一个姓名集合，要求出所有初始字母为a的人的总数目。使用流处理的代码如下:\n{% codeblock %}\nArrayList<String> person = new ArrayList<>();\n----init----\n//1.由集合获得流对象\nStream<String> steam = person.stream();\n//2.对流对象进行过滤和统计\nsteam.filter((s)->s.startsWith(\"a\")) //1.流过滤\n.count(); //2.计算流对象中元素数目\n{% endcodeblock %}\n使用函数接口(形式上表现为Lambda表达式)作为参数和返回值的函数就是所谓的高阶函数，如此处的filter，其参数为函数接口Predicate，亦可以理解为一个接口为 T--->boolean 的方法。\n上述示例中为流对象的高阶函数传入一个函数接口Predicate，避免了直接处理集合中的数据对象。示例展示了流使用的通用格式:\n获得流对象Stream\n对流对象Stream进行惰性求值，返回值仍然是一个Stream对象。\n对流对象Stream进行及早求值，返回值不在是一个Stream对象。\n\n### 2.1常见高阶函数\n#### 1.collect方法\ncollect方法属于一个及早求值方法，负责将流对象转换成其他数据结构，如列表，集合，值等。\n这项工作由收集器Collector完成。java8为此提供了Collectors工具类。\n#### 1.1 转换成集合\n>List<Person> list = stream.collect(Collectors.toList());\n>List<Person> arraylist = stream.collect(Collectors.toCollection(ArrayList::new));       \n>Set<Person> set = stream.collect(Collectors.toSet());\n>Set<Person> treeSet = stream.collect(Collectors.toCollection(TreeSet::new));\n\n使用Collectors.toList()将流对象转换成集合时并不需要指定具体类型，Java默认选择了实现类型，如果要自己指定，可以使用Collectors.toCollection(ArrayList::new)，其参数ArrayList::new就是上文中的方法引用，表示一个建立ArrayList对象的方法，ArrayList就是想要转换成的数据类型；\n#### 1.2 转换成值\n>//1.获得最大最小值\n>Function<Person, Integer> getLevel = p->p.age; \n>Comparator<Person> comparator = Comparator.comparing(getLevel);\n>stream.collect(Collectors.maxBy(comparator));\n>stream.collect(Collectors.minBy(comparator));\n>//2.获得平均值\n>ToIntFunction<Person> getAverage = p->p.age;\n>stream.collect(Collectors.averagingInt(getAverage));\n\n#### 1.3 数据分块\n将流对象按某种条件分成两部分\n>Predicate<Person> isTang = p->p.country.equals(Country.Tang);\n>stream.collect(Collectors.partitioningBy(isTang));\n\n#### 1.4 数据分组\n>Function<Person, Integer> country= p -> p.country.ordinal();\n>stream.collect(Collectors.groupingBy(country));\n\n分块和分组看似相同，但意义不同，分块使用判断作为方法，只能将流分成两块；分组则灵活的多。\n#### 1.5 字符串\n>stream.map(Person::getName).collect(Collectors.joining(\"/\", \"[\", \"]\"));\n\n#### 1.6 合并收集器\n>stream.collect(Collectors.groupingBy(country,Collectors.counting()));\n\n### 2.map\nmap是一个惰性求值方法。函数接口为Function<T, R>函数接口,负责将数据从一个类型转换为另一个类型；高阶函数map的作用就是将数据从一个流转换为另一个流。\n### 3.filter\nfilter 是一个惰性求值方法。函数接口为Pridicate<T>,此方法负责对数据进行判断，filter高阶函数负责根据判断结果对流进行过滤。\n### 4.flatMap系列\nflatMap 是一个惰性求值方法。其参数亦为Function<T, R>,将多个流组合为一个流。\n{% codeblock %}\n//1.a1,a2是两个列表，map处理后仍是两个列表\nStream.of(a1,a2).map(s->s)\n\n[1, 2, 3, 4]\n[]\n\n//2.flatMap将二者合并为一个流\nStream.of(a1,a2).map(s->s)\n.flatMap(s->s.stream())\n{% endcodeblock %}\n1234\n看源码可知，flatMap中函数接口Function的输出类型为Stream<R>。\n### 5.max/min\n属于一个及早求值方法。需要传入一个Comparator函数接口，Java8提供了Comparator.comparing方法获得该函数接口的实现，该静态方法是接口的静态方法，获得一个函数返回一个Comparator对象。\nmin(Comparator.comparing(s->s.toString()));\nmax/min的返回值是 Optional，代表一个或有或无的值，主要是用来取代万恶的null值；使用get方法可以获取其值。\n### 6.reduce\n属于一个及早求值方法。意为流数据的累加，有两个版本。\n{% codeblock %}\n//1.无初始值累加\nT t = person.stream().reduce((a,b)->a+b);\n//2.带初始值累加\nOptional<T> t = person.stream().reduce(\"1\",(a,b)->a+b);\n{% endcodeblock %}\n### 7.foreach\n属于一个及早求值方法，用来遍历流对象。\n总而言之，Java8中流对象的引入使得可以在更高的层次上对集合进行处理，使得抽象的方法和具体的行为逻辑分离开来，也加强了数据的封装性，另一个好处是对并发的支持更强，以后再补充。","slug":"Lambda","published":1,"updated":"2020-07-02T03:33:23.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcbttrba0006wgto9a9k33mh","content":"<p>Java8主要的改变是为集合框架增加了流的概念，提高了集合的抽象层次。相比于旧有框架直接操作数据的内部处理方式，流+高阶函数的外部处理方式对数据封装更好。同时流的概念使得对并发编程支持更强。<br>在语法上Java8提供了Lambda表达式来传递方法体,简化了之前方法必须藏身在不必要的类中的繁琐。Lambda表达式体现了函数式编程的思想，即一个函数亦可以作为另一个函数参数和返回值，使用了函数作参数/返回值的函数被称为高阶函数。</p>\n<h2 id=\"1-Lambda表达式\"><a href=\"#1-Lambda表达式\" class=\"headerlink\" title=\"1.Lambda表达式\"></a>1.Lambda表达式</h2><p>Java 被诟病为繁琐的地方就在于不支持传递方法，Java中的方法必须依赖类存在，也不能将方法作为参数或返回值，这是与python等语言相比的弱势。<br>Java 8中使用新特性Lambda表达式来改善这一点。</p>\n<a id=\"more\"></a>\n<h3 id=\"1-1-使用示例\"><a href=\"#1-1-使用示例\" class=\"headerlink\" title=\"1.1 使用示例\"></a>1.1 使用示例</h3><p>以Runnable接口为例，如果需要执行一个线程，实际只需要run()方法中的代码块，但形式上必须要先制造一个Runnable接口实现类(通常是匿名内部类)。<br>使用Lambda表达式仅仅需要一行代码，达到传递run方法的效果,而不必定义匿名内部类。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Thread(()-&gt;System.out.println(&quot;Lambda&quot;)).start();</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-类型参数推断机制-Type-Argument-Inference\"><a href=\"#1-2-类型参数推断机制-Type-Argument-Inference\" class=\"headerlink\" title=\"1.2 类型参数推断机制(Type Argument Inference)\"></a>1.2 类型参数推断机制(Type Argument Inference)</h3><p>Lambda表达式之所以能够做如此简化得益于Java的类型参数推断机制。所有省略的内容都可以由编译器通过上下文推断出来。类型推断机制在Java中的应用广泛，例如数组类型确定，Java7引入的菱形操作符等。类型参数推断机制要推断的是Lambda表达式的目标类型，往往需要与Java的重载解析机制配合。其解析规则是只有一个可能目标类型时，由响应函数接口里的参数类型推导得出有多个可能目标类型，选择最具体的类型有多个可能目标类型但无法明确最具体类型，则编译报错。</p>\n<h3 id=\"1-3-函数接口-Functional-Interface\"><a href=\"#1-3-函数接口-Functional-Interface\" class=\"headerlink\" title=\"1.3 函数接口(Functional Interface)\"></a>1.3 函数接口(Functional Interface)</h3><p>一个方法可以抽象成函数接口。函数接口类似于一个黑箱，只需要关注其参数和返回值类型，函数接口中只有单方法。<br>Runnable的函数接口如下:<br><img src=\"/img/articleImg/jk82.png\" alt=\"\"><br>可以看到这是一个空接口。可以用它代表所有参数和返回值都为空的方法。<br>Java8中定义若干函数接口(位于包java.util.function)。<br><img src=\"/img/articleImg/jk8.png\" alt=\"\"><br>以Pridicate函数接口为例，这是一个泛型接口，参数可以是任意类型，返回值是boolean类型，代表根据数值作判断的一类方法。</p>\n<h3 id=\"1-4-并非语法糖\"><a href=\"#1-4-并非语法糖\" class=\"headerlink\" title=\"1.4 并非语法糖\"></a>1.4 并非语法糖</h3><p>从类型推断的角度看很容易觉得Lambda表达式是和泛型，装箱等机制一样的语法糖，编译器在背后补全了省略信息，但实际上并非如此。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Apple&#123;</span><br><span class=\"line\">\tpublic String toString() &#123;return &quot;apple&quot;;&#125;;</span><br><span class=\"line\">\tRunnable r1 &#x3D; ()-&gt;&#123;System.out.println(this);&#125;;</span><br><span class=\"line\">\tRunnable r2 &#x3D; new Runnable() &#123;</span><br><span class=\"line\">\t\tpublic void run() &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(this);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;执行两个线程得到的结果是</span><br><span class=\"line\">apple</span><br><span class=\"line\">Day0917.Apple$1@22e90474</span><br></pre></td></tr></table></figure>\n\n<pre><code>正常的匿名内部类中 this关键字 指向内部类对象自身，同时将生成Apple$1.class文件。\nLambda表达式中this所指向的则是外部类对象，并不会生成内部类class文件，这说明Lambda表达式并不是语法糖，它没有产生一个内部类，也没有引入一个新的作用域。\nLambda与内部类相同之处在于其内部所定义的变量均为final或既成事实上的final.</code></pre><h3 id=\"1-5-默认方法\"><a href=\"#1-5-默认方法\" class=\"headerlink\" title=\"1.5 默认方法\"></a>1.5 默认方法</h3><p>Java8最重要的改变就是对类库的改造，使得接口中方法可以拥有代码体。这种定义在接口中的包含方法体的方法，需要用default修饰，称之为默认方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Apple&#123;</span><br><span class=\"line\">\tdefault void show()&#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;interface&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class MyApple implements Apple&#123;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void show() &#123;</span><br><span class=\"line\">\t\tApple.super.show();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果实现类中重写了默认方法，则接口中默认方法就被覆盖了。如果两个接口定义了相同的默认方法，则实现类中可以通过指定全称来确定使用哪个父类的方法。</p>\n<h3 id=\"1-6-方法引用\"><a href=\"#1-6-方法引用\" class=\"headerlink\" title=\"1.6 方法引用\"></a>1.6 方法引用</h3><p>如果将匿名内部类改造为Lambda表达式是偷懒的话，那方法引用则是懒到连Lambda表达式都不想写了。<br>在之前，我们知道Lambda表达式可以作为函数参数和返回值，表示传递一个方法。方法引用就是使用 ClassName::MethodName 的形式来指定方法。故而方法引用与Lambda表达式完全同源同种，可以相互替代。</p>\n<blockquote>\n<p>//1,建立一个字符串<br>String::new<br>//2.建立一个字符串数组<br>String[]::new<br>注意 lambda表达式与方法引用表示的是方法本身，将要被用过高阶函数的参数/返回值，并不能单独使用。</p>\n</blockquote>\n<h2 id=\"2-流stream\"><a href=\"#2-流stream\" class=\"headerlink\" title=\"2.流stream\"></a>2.流stream</h2><p>任务:创建一个姓名集合，要求出所有初始字母为a的人的总数目。使用流处理的代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;String&gt; person &#x3D; new ArrayList&lt;&gt;();</span><br><span class=\"line\">----init----</span><br><span class=\"line\">&#x2F;&#x2F;1.由集合获得流对象</span><br><span class=\"line\">Stream&lt;String&gt; steam &#x3D; person.stream();</span><br><span class=\"line\">&#x2F;&#x2F;2.对流对象进行过滤和统计</span><br><span class=\"line\">steam.filter((s)-&gt;s.startsWith(&quot;a&quot;)) &#x2F;&#x2F;1.流过滤</span><br><span class=\"line\">.count(); &#x2F;&#x2F;2.计算流对象中元素数目</span><br></pre></td></tr></table></figure>\n<p>使用函数接口(形式上表现为Lambda表达式)作为参数和返回值的函数就是所谓的高阶函数，如此处的filter，其参数为函数接口Predicate，亦可以理解为一个接口为 T—&gt;boolean 的方法。<br>上述示例中为流对象的高阶函数传入一个函数接口Predicate，避免了直接处理集合中的数据对象。示例展示了流使用的通用格式:<br>获得流对象Stream<br>对流对象Stream进行惰性求值，返回值仍然是一个Stream对象。<br>对流对象Stream进行及早求值，返回值不在是一个Stream对象。</p>\n<h3 id=\"2-1常见高阶函数\"><a href=\"#2-1常见高阶函数\" class=\"headerlink\" title=\"2.1常见高阶函数\"></a>2.1常见高阶函数</h3><h4 id=\"1-collect方法\"><a href=\"#1-collect方法\" class=\"headerlink\" title=\"1.collect方法\"></a>1.collect方法</h4><p>collect方法属于一个及早求值方法，负责将流对象转换成其他数据结构，如列表，集合，值等。<br>这项工作由收集器Collector完成。java8为此提供了Collectors工具类。</p>\n<h4 id=\"1-1-转换成集合\"><a href=\"#1-1-转换成集合\" class=\"headerlink\" title=\"1.1 转换成集合\"></a>1.1 转换成集合</h4><blockquote>\n<p>List<Person> list = stream.collect(Collectors.toList());<br>List<Person> arraylist = stream.collect(Collectors.toCollection(ArrayList::new));<br>Set<Person> set = stream.collect(Collectors.toSet());<br>Set<Person> treeSet = stream.collect(Collectors.toCollection(TreeSet::new));</p>\n</blockquote>\n<p>使用Collectors.toList()将流对象转换成集合时并不需要指定具体类型，Java默认选择了实现类型，如果要自己指定，可以使用Collectors.toCollection(ArrayList::new)，其参数ArrayList::new就是上文中的方法引用，表示一个建立ArrayList对象的方法，ArrayList就是想要转换成的数据类型；</p>\n<h4 id=\"1-2-转换成值\"><a href=\"#1-2-转换成值\" class=\"headerlink\" title=\"1.2 转换成值\"></a>1.2 转换成值</h4><blockquote>\n<p>//1.获得最大最小值<br>Function&lt;Person, Integer&gt; getLevel = p-&gt;p.age;<br>Comparator<Person> comparator = Comparator.comparing(getLevel);<br>stream.collect(Collectors.maxBy(comparator));<br>stream.collect(Collectors.minBy(comparator));<br>//2.获得平均值<br>ToIntFunction<Person> getAverage = p-&gt;p.age;<br>stream.collect(Collectors.averagingInt(getAverage));</p>\n</blockquote>\n<h4 id=\"1-3-数据分块\"><a href=\"#1-3-数据分块\" class=\"headerlink\" title=\"1.3 数据分块\"></a>1.3 数据分块</h4><p>将流对象按某种条件分成两部分</p>\n<blockquote>\n<p>Predicate<Person> isTang = p-&gt;p.country.equals(Country.Tang);<br>stream.collect(Collectors.partitioningBy(isTang));</p>\n</blockquote>\n<h4 id=\"1-4-数据分组\"><a href=\"#1-4-数据分组\" class=\"headerlink\" title=\"1.4 数据分组\"></a>1.4 数据分组</h4><blockquote>\n<p>Function&lt;Person, Integer&gt; country= p -&gt; p.country.ordinal();<br>stream.collect(Collectors.groupingBy(country));</p>\n</blockquote>\n<p>分块和分组看似相同，但意义不同，分块使用判断作为方法，只能将流分成两块；分组则灵活的多。</p>\n<h4 id=\"1-5-字符串\"><a href=\"#1-5-字符串\" class=\"headerlink\" title=\"1.5 字符串\"></a>1.5 字符串</h4><blockquote>\n<p>stream.map(Person::getName).collect(Collectors.joining(“/“, “[“, “]”));</p>\n</blockquote>\n<h4 id=\"1-6-合并收集器\"><a href=\"#1-6-合并收集器\" class=\"headerlink\" title=\"1.6 合并收集器\"></a>1.6 合并收集器</h4><blockquote>\n<p>stream.collect(Collectors.groupingBy(country,Collectors.counting()));</p>\n</blockquote>\n<h3 id=\"2-map\"><a href=\"#2-map\" class=\"headerlink\" title=\"2.map\"></a>2.map</h3><p>map是一个惰性求值方法。函数接口为Function&lt;T, R&gt;函数接口,负责将数据从一个类型转换为另一个类型；高阶函数map的作用就是将数据从一个流转换为另一个流。</p>\n<h3 id=\"3-filter\"><a href=\"#3-filter\" class=\"headerlink\" title=\"3.filter\"></a>3.filter</h3><p>filter 是一个惰性求值方法。函数接口为Pridicate<T>,此方法负责对数据进行判断，filter高阶函数负责根据判断结果对流进行过滤。</p>\n<h3 id=\"4-flatMap系列\"><a href=\"#4-flatMap系列\" class=\"headerlink\" title=\"4.flatMap系列\"></a>4.flatMap系列</h3><p>flatMap 是一个惰性求值方法。其参数亦为Function&lt;T, R&gt;,将多个流组合为一个流。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;1.a1,a2是两个列表，map处理后仍是两个列表</span><br><span class=\"line\">Stream.of(a1,a2).map(s-&gt;s)</span><br><span class=\"line\"></span><br><span class=\"line\">[1, 2, 3, 4]</span><br><span class=\"line\">[]</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;2.flatMap将二者合并为一个流</span><br><span class=\"line\">Stream.of(a1,a2).map(s-&gt;s)</span><br><span class=\"line\">.flatMap(s-&gt;s.stream())</span><br></pre></td></tr></table></figure>\n<p>1234<br>看源码可知，flatMap中函数接口Function的输出类型为Stream<R>。</p>\n<h3 id=\"5-max-min\"><a href=\"#5-max-min\" class=\"headerlink\" title=\"5.max/min\"></a>5.max/min</h3><p>属于一个及早求值方法。需要传入一个Comparator函数接口，Java8提供了Comparator.comparing方法获得该函数接口的实现，该静态方法是接口的静态方法，获得一个函数返回一个Comparator对象。<br>min(Comparator.comparing(s-&gt;s.toString()));<br>max/min的返回值是 Optional，代表一个或有或无的值，主要是用来取代万恶的null值；使用get方法可以获取其值。</p>\n<h3 id=\"6-reduce\"><a href=\"#6-reduce\" class=\"headerlink\" title=\"6.reduce\"></a>6.reduce</h3><p>属于一个及早求值方法。意为流数据的累加，有两个版本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;1.无初始值累加</span><br><span class=\"line\">T t &#x3D; person.stream().reduce((a,b)-&gt;a+b);</span><br><span class=\"line\">&#x2F;&#x2F;2.带初始值累加</span><br><span class=\"line\">Optional&lt;T&gt; t &#x3D; person.stream().reduce(&quot;1&quot;,(a,b)-&gt;a+b);</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-foreach\"><a href=\"#7-foreach\" class=\"headerlink\" title=\"7.foreach\"></a>7.foreach</h3><p>属于一个及早求值方法，用来遍历流对象。<br>总而言之，Java8中流对象的引入使得可以在更高的层次上对集合进行处理，使得抽象的方法和具体的行为逻辑分离开来，也加强了数据的封装性，另一个好处是对并发的支持更强，以后再补充。</p>\n","site":{"data":{}},"excerpt":"<p>Java8主要的改变是为集合框架增加了流的概念，提高了集合的抽象层次。相比于旧有框架直接操作数据的内部处理方式，流+高阶函数的外部处理方式对数据封装更好。同时流的概念使得对并发编程支持更强。<br>在语法上Java8提供了Lambda表达式来传递方法体,简化了之前方法必须藏身在不必要的类中的繁琐。Lambda表达式体现了函数式编程的思想，即一个函数亦可以作为另一个函数参数和返回值，使用了函数作参数/返回值的函数被称为高阶函数。</p>\n<h2 id=\"1-Lambda表达式\"><a href=\"#1-Lambda表达式\" class=\"headerlink\" title=\"1.Lambda表达式\"></a>1.Lambda表达式</h2><p>Java 被诟病为繁琐的地方就在于不支持传递方法，Java中的方法必须依赖类存在，也不能将方法作为参数或返回值，这是与python等语言相比的弱势。<br>Java 8中使用新特性Lambda表达式来改善这一点。</p>","more":"<h3 id=\"1-1-使用示例\"><a href=\"#1-1-使用示例\" class=\"headerlink\" title=\"1.1 使用示例\"></a>1.1 使用示例</h3><p>以Runnable接口为例，如果需要执行一个线程，实际只需要run()方法中的代码块，但形式上必须要先制造一个Runnable接口实现类(通常是匿名内部类)。<br>使用Lambda表达式仅仅需要一行代码，达到传递run方法的效果,而不必定义匿名内部类。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Thread(()-&gt;System.out.println(&quot;Lambda&quot;)).start();</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-类型参数推断机制-Type-Argument-Inference\"><a href=\"#1-2-类型参数推断机制-Type-Argument-Inference\" class=\"headerlink\" title=\"1.2 类型参数推断机制(Type Argument Inference)\"></a>1.2 类型参数推断机制(Type Argument Inference)</h3><p>Lambda表达式之所以能够做如此简化得益于Java的类型参数推断机制。所有省略的内容都可以由编译器通过上下文推断出来。类型推断机制在Java中的应用广泛，例如数组类型确定，Java7引入的菱形操作符等。类型参数推断机制要推断的是Lambda表达式的目标类型，往往需要与Java的重载解析机制配合。其解析规则是只有一个可能目标类型时，由响应函数接口里的参数类型推导得出有多个可能目标类型，选择最具体的类型有多个可能目标类型但无法明确最具体类型，则编译报错。</p>\n<h3 id=\"1-3-函数接口-Functional-Interface\"><a href=\"#1-3-函数接口-Functional-Interface\" class=\"headerlink\" title=\"1.3 函数接口(Functional Interface)\"></a>1.3 函数接口(Functional Interface)</h3><p>一个方法可以抽象成函数接口。函数接口类似于一个黑箱，只需要关注其参数和返回值类型，函数接口中只有单方法。<br>Runnable的函数接口如下:<br><img src=\"/img/articleImg/jk82.png\" alt=\"\"><br>可以看到这是一个空接口。可以用它代表所有参数和返回值都为空的方法。<br>Java8中定义若干函数接口(位于包java.util.function)。<br><img src=\"/img/articleImg/jk8.png\" alt=\"\"><br>以Pridicate函数接口为例，这是一个泛型接口，参数可以是任意类型，返回值是boolean类型，代表根据数值作判断的一类方法。</p>\n<h3 id=\"1-4-并非语法糖\"><a href=\"#1-4-并非语法糖\" class=\"headerlink\" title=\"1.4 并非语法糖\"></a>1.4 并非语法糖</h3><p>从类型推断的角度看很容易觉得Lambda表达式是和泛型，装箱等机制一样的语法糖，编译器在背后补全了省略信息，但实际上并非如此。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Apple&#123;</span><br><span class=\"line\">\tpublic String toString() &#123;return &quot;apple&quot;;&#125;;</span><br><span class=\"line\">\tRunnable r1 &#x3D; ()-&gt;&#123;System.out.println(this);&#125;;</span><br><span class=\"line\">\tRunnable r2 &#x3D; new Runnable() &#123;</span><br><span class=\"line\">\t\tpublic void run() &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(this);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;执行两个线程得到的结果是</span><br><span class=\"line\">apple</span><br><span class=\"line\">Day0917.Apple$1@22e90474</span><br></pre></td></tr></table></figure>\n\n<pre><code>正常的匿名内部类中 this关键字 指向内部类对象自身，同时将生成Apple$1.class文件。\nLambda表达式中this所指向的则是外部类对象，并不会生成内部类class文件，这说明Lambda表达式并不是语法糖，它没有产生一个内部类，也没有引入一个新的作用域。\nLambda与内部类相同之处在于其内部所定义的变量均为final或既成事实上的final.</code></pre><h3 id=\"1-5-默认方法\"><a href=\"#1-5-默认方法\" class=\"headerlink\" title=\"1.5 默认方法\"></a>1.5 默认方法</h3><p>Java8最重要的改变就是对类库的改造，使得接口中方法可以拥有代码体。这种定义在接口中的包含方法体的方法，需要用default修饰，称之为默认方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Apple&#123;</span><br><span class=\"line\">\tdefault void show()&#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;interface&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class MyApple implements Apple&#123;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void show() &#123;</span><br><span class=\"line\">\t\tApple.super.show();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果实现类中重写了默认方法，则接口中默认方法就被覆盖了。如果两个接口定义了相同的默认方法，则实现类中可以通过指定全称来确定使用哪个父类的方法。</p>\n<h3 id=\"1-6-方法引用\"><a href=\"#1-6-方法引用\" class=\"headerlink\" title=\"1.6 方法引用\"></a>1.6 方法引用</h3><p>如果将匿名内部类改造为Lambda表达式是偷懒的话，那方法引用则是懒到连Lambda表达式都不想写了。<br>在之前，我们知道Lambda表达式可以作为函数参数和返回值，表示传递一个方法。方法引用就是使用 ClassName::MethodName 的形式来指定方法。故而方法引用与Lambda表达式完全同源同种，可以相互替代。</p>\n<blockquote>\n<p>//1,建立一个字符串<br>String::new<br>//2.建立一个字符串数组<br>String[]::new<br>注意 lambda表达式与方法引用表示的是方法本身，将要被用过高阶函数的参数/返回值，并不能单独使用。</p>\n</blockquote>\n<h2 id=\"2-流stream\"><a href=\"#2-流stream\" class=\"headerlink\" title=\"2.流stream\"></a>2.流stream</h2><p>任务:创建一个姓名集合，要求出所有初始字母为a的人的总数目。使用流处理的代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;String&gt; person &#x3D; new ArrayList&lt;&gt;();</span><br><span class=\"line\">----init----</span><br><span class=\"line\">&#x2F;&#x2F;1.由集合获得流对象</span><br><span class=\"line\">Stream&lt;String&gt; steam &#x3D; person.stream();</span><br><span class=\"line\">&#x2F;&#x2F;2.对流对象进行过滤和统计</span><br><span class=\"line\">steam.filter((s)-&gt;s.startsWith(&quot;a&quot;)) &#x2F;&#x2F;1.流过滤</span><br><span class=\"line\">.count(); &#x2F;&#x2F;2.计算流对象中元素数目</span><br></pre></td></tr></table></figure>\n<p>使用函数接口(形式上表现为Lambda表达式)作为参数和返回值的函数就是所谓的高阶函数，如此处的filter，其参数为函数接口Predicate，亦可以理解为一个接口为 T—&gt;boolean 的方法。<br>上述示例中为流对象的高阶函数传入一个函数接口Predicate，避免了直接处理集合中的数据对象。示例展示了流使用的通用格式:<br>获得流对象Stream<br>对流对象Stream进行惰性求值，返回值仍然是一个Stream对象。<br>对流对象Stream进行及早求值，返回值不在是一个Stream对象。</p>\n<h3 id=\"2-1常见高阶函数\"><a href=\"#2-1常见高阶函数\" class=\"headerlink\" title=\"2.1常见高阶函数\"></a>2.1常见高阶函数</h3><h4 id=\"1-collect方法\"><a href=\"#1-collect方法\" class=\"headerlink\" title=\"1.collect方法\"></a>1.collect方法</h4><p>collect方法属于一个及早求值方法，负责将流对象转换成其他数据结构，如列表，集合，值等。<br>这项工作由收集器Collector完成。java8为此提供了Collectors工具类。</p>\n<h4 id=\"1-1-转换成集合\"><a href=\"#1-1-转换成集合\" class=\"headerlink\" title=\"1.1 转换成集合\"></a>1.1 转换成集合</h4><blockquote>\n<p>List<Person> list = stream.collect(Collectors.toList());<br>List<Person> arraylist = stream.collect(Collectors.toCollection(ArrayList::new));<br>Set<Person> set = stream.collect(Collectors.toSet());<br>Set<Person> treeSet = stream.collect(Collectors.toCollection(TreeSet::new));</p>\n</blockquote>\n<p>使用Collectors.toList()将流对象转换成集合时并不需要指定具体类型，Java默认选择了实现类型，如果要自己指定，可以使用Collectors.toCollection(ArrayList::new)，其参数ArrayList::new就是上文中的方法引用，表示一个建立ArrayList对象的方法，ArrayList就是想要转换成的数据类型；</p>\n<h4 id=\"1-2-转换成值\"><a href=\"#1-2-转换成值\" class=\"headerlink\" title=\"1.2 转换成值\"></a>1.2 转换成值</h4><blockquote>\n<p>//1.获得最大最小值<br>Function&lt;Person, Integer&gt; getLevel = p-&gt;p.age;<br>Comparator<Person> comparator = Comparator.comparing(getLevel);<br>stream.collect(Collectors.maxBy(comparator));<br>stream.collect(Collectors.minBy(comparator));<br>//2.获得平均值<br>ToIntFunction<Person> getAverage = p-&gt;p.age;<br>stream.collect(Collectors.averagingInt(getAverage));</p>\n</blockquote>\n<h4 id=\"1-3-数据分块\"><a href=\"#1-3-数据分块\" class=\"headerlink\" title=\"1.3 数据分块\"></a>1.3 数据分块</h4><p>将流对象按某种条件分成两部分</p>\n<blockquote>\n<p>Predicate<Person> isTang = p-&gt;p.country.equals(Country.Tang);<br>stream.collect(Collectors.partitioningBy(isTang));</p>\n</blockquote>\n<h4 id=\"1-4-数据分组\"><a href=\"#1-4-数据分组\" class=\"headerlink\" title=\"1.4 数据分组\"></a>1.4 数据分组</h4><blockquote>\n<p>Function&lt;Person, Integer&gt; country= p -&gt; p.country.ordinal();<br>stream.collect(Collectors.groupingBy(country));</p>\n</blockquote>\n<p>分块和分组看似相同，但意义不同，分块使用判断作为方法，只能将流分成两块；分组则灵活的多。</p>\n<h4 id=\"1-5-字符串\"><a href=\"#1-5-字符串\" class=\"headerlink\" title=\"1.5 字符串\"></a>1.5 字符串</h4><blockquote>\n<p>stream.map(Person::getName).collect(Collectors.joining(“/“, “[“, “]”));</p>\n</blockquote>\n<h4 id=\"1-6-合并收集器\"><a href=\"#1-6-合并收集器\" class=\"headerlink\" title=\"1.6 合并收集器\"></a>1.6 合并收集器</h4><blockquote>\n<p>stream.collect(Collectors.groupingBy(country,Collectors.counting()));</p>\n</blockquote>\n<h3 id=\"2-map\"><a href=\"#2-map\" class=\"headerlink\" title=\"2.map\"></a>2.map</h3><p>map是一个惰性求值方法。函数接口为Function&lt;T, R&gt;函数接口,负责将数据从一个类型转换为另一个类型；高阶函数map的作用就是将数据从一个流转换为另一个流。</p>\n<h3 id=\"3-filter\"><a href=\"#3-filter\" class=\"headerlink\" title=\"3.filter\"></a>3.filter</h3><p>filter 是一个惰性求值方法。函数接口为Pridicate<T>,此方法负责对数据进行判断，filter高阶函数负责根据判断结果对流进行过滤。</p>\n<h3 id=\"4-flatMap系列\"><a href=\"#4-flatMap系列\" class=\"headerlink\" title=\"4.flatMap系列\"></a>4.flatMap系列</h3><p>flatMap 是一个惰性求值方法。其参数亦为Function&lt;T, R&gt;,将多个流组合为一个流。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;1.a1,a2是两个列表，map处理后仍是两个列表</span><br><span class=\"line\">Stream.of(a1,a2).map(s-&gt;s)</span><br><span class=\"line\"></span><br><span class=\"line\">[1, 2, 3, 4]</span><br><span class=\"line\">[]</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;2.flatMap将二者合并为一个流</span><br><span class=\"line\">Stream.of(a1,a2).map(s-&gt;s)</span><br><span class=\"line\">.flatMap(s-&gt;s.stream())</span><br></pre></td></tr></table></figure>\n<p>1234<br>看源码可知，flatMap中函数接口Function的输出类型为Stream<R>。</p>\n<h3 id=\"5-max-min\"><a href=\"#5-max-min\" class=\"headerlink\" title=\"5.max/min\"></a>5.max/min</h3><p>属于一个及早求值方法。需要传入一个Comparator函数接口，Java8提供了Comparator.comparing方法获得该函数接口的实现，该静态方法是接口的静态方法，获得一个函数返回一个Comparator对象。<br>min(Comparator.comparing(s-&gt;s.toString()));<br>max/min的返回值是 Optional，代表一个或有或无的值，主要是用来取代万恶的null值；使用get方法可以获取其值。</p>\n<h3 id=\"6-reduce\"><a href=\"#6-reduce\" class=\"headerlink\" title=\"6.reduce\"></a>6.reduce</h3><p>属于一个及早求值方法。意为流数据的累加，有两个版本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;1.无初始值累加</span><br><span class=\"line\">T t &#x3D; person.stream().reduce((a,b)-&gt;a+b);</span><br><span class=\"line\">&#x2F;&#x2F;2.带初始值累加</span><br><span class=\"line\">Optional&lt;T&gt; t &#x3D; person.stream().reduce(&quot;1&quot;,(a,b)-&gt;a+b);</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-foreach\"><a href=\"#7-foreach\" class=\"headerlink\" title=\"7.foreach\"></a>7.foreach</h3><p>属于一个及早求值方法，用来遍历流对象。<br>总而言之，Java8中流对象的引入使得可以在更高的层次上对集合进行处理，使得抽象的方法和具体的行为逻辑分离开来，也加强了数据的封装性，另一个好处是对并发的支持更强，以后再补充。</p>"},{"title":"无代码侵入调试dubbo服务","date":"2020-06-28T10:58:48.000Z","_content":"\n### 1.提供者（Provider-service）\n\n​\tdubbo.xml中添加**register=\"false\"** \n\n```xml\n<dubbo:registry protocol=\"zookeeper\" address=\"${zookeeper.cluster}\" register=\"false\"/>\n```\n\n### 2.消费者（Consumer-service）\n\n​        在本地任意位置新建配置文件:dubbo-local-consumer.properties：\n\n```properties\n# 以下是你们DubboServer.xml中配置的需要Export Service，\n# 建议你有几个要Export Service都配置在这里，后面是请求本地的地址\n# 地址格式：dubbo://ip:port，这里需要注意的是，需要修改为自己dubbo服务的端口\ncom.xxxService=dubbo://localhost:20880\n\n```\n\n​\t\t设置启动参数指向该配置文件：\n\n```properties\n# 启动参数：\n-Ddubbo.resolve.file=/C:\\workspace\\dubbo-local-consumer.properties\n```\n\n","source":"_posts/Local-Debug-Dubbo.md","raw":"---\ntitle: 无代码侵入调试dubbo服务\ndate: 2020-06-28 18:58:48\ntags: dubbo\ncategories: \n\t- 编程\n\t- 效率\n\n---\n\n### 1.提供者（Provider-service）\n\n​\tdubbo.xml中添加**register=\"false\"** \n\n```xml\n<dubbo:registry protocol=\"zookeeper\" address=\"${zookeeper.cluster}\" register=\"false\"/>\n```\n\n### 2.消费者（Consumer-service）\n\n​        在本地任意位置新建配置文件:dubbo-local-consumer.properties：\n\n```properties\n# 以下是你们DubboServer.xml中配置的需要Export Service，\n# 建议你有几个要Export Service都配置在这里，后面是请求本地的地址\n# 地址格式：dubbo://ip:port，这里需要注意的是，需要修改为自己dubbo服务的端口\ncom.xxxService=dubbo://localhost:20880\n\n```\n\n​\t\t设置启动参数指向该配置文件：\n\n```properties\n# 启动参数：\n-Ddubbo.resolve.file=/C:\\workspace\\dubbo-local-consumer.properties\n```\n\n","slug":"Local-Debug-Dubbo","published":1,"updated":"2020-07-02T03:33:48.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcbttrbb0007wgto6yc9bz0d","content":"<h3 id=\"1-提供者（Provider-service）\"><a href=\"#1-提供者（Provider-service）\" class=\"headerlink\" title=\"1.提供者（Provider-service）\"></a>1.提供者（Provider-service）</h3><p>​    dubbo.xml中添加<strong>register=”false”</strong> </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dubbo:registry</span> <span class=\"attr\">protocol</span>=<span class=\"string\">\"zookeeper\"</span> <span class=\"attr\">address</span>=<span class=\"string\">\"$&#123;zookeeper.cluster&#125;\"</span> <span class=\"attr\">register</span>=<span class=\"string\">\"false\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-消费者（Consumer-service）\"><a href=\"#2-消费者（Consumer-service）\" class=\"headerlink\" title=\"2.消费者（Consumer-service）\"></a>2.消费者（Consumer-service）</h3><p>​        在本地任意位置新建配置文件:dubbo-local-consumer.properties：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 以下是你们DubboServer.xml中配置的需要Export Service，</span></span><br><span class=\"line\"><span class=\"comment\"># 建议你有几个要Export Service都配置在这里，后面是请求本地的地址</span></span><br><span class=\"line\"><span class=\"comment\"># 地址格式：dubbo://ip:port，这里需要注意的是，需要修改为自己dubbo服务的端口</span></span><br><span class=\"line\"><span class=\"meta\">com.xxxService</span>=<span class=\"string\">dubbo://localhost:20880</span></span><br></pre></td></tr></table></figure>\n\n<p>​        设置启动参数指向该配置文件：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动参数：</span></span><br><span class=\"line\"><span class=\"meta\">-Ddubbo.resolve.file</span>=<span class=\"string\">/C:\\workspace\\dubbo-local-consumer.properties</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-提供者（Provider-service）\"><a href=\"#1-提供者（Provider-service）\" class=\"headerlink\" title=\"1.提供者（Provider-service）\"></a>1.提供者（Provider-service）</h3><p>​    dubbo.xml中添加<strong>register=”false”</strong> </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dubbo:registry</span> <span class=\"attr\">protocol</span>=<span class=\"string\">\"zookeeper\"</span> <span class=\"attr\">address</span>=<span class=\"string\">\"$&#123;zookeeper.cluster&#125;\"</span> <span class=\"attr\">register</span>=<span class=\"string\">\"false\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-消费者（Consumer-service）\"><a href=\"#2-消费者（Consumer-service）\" class=\"headerlink\" title=\"2.消费者（Consumer-service）\"></a>2.消费者（Consumer-service）</h3><p>​        在本地任意位置新建配置文件:dubbo-local-consumer.properties：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 以下是你们DubboServer.xml中配置的需要Export Service，</span></span><br><span class=\"line\"><span class=\"comment\"># 建议你有几个要Export Service都配置在这里，后面是请求本地的地址</span></span><br><span class=\"line\"><span class=\"comment\"># 地址格式：dubbo://ip:port，这里需要注意的是，需要修改为自己dubbo服务的端口</span></span><br><span class=\"line\"><span class=\"meta\">com.xxxService</span>=<span class=\"string\">dubbo://localhost:20880</span></span><br></pre></td></tr></table></figure>\n\n<p>​        设置启动参数指向该配置文件：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动参数：</span></span><br><span class=\"line\"><span class=\"meta\">-Ddubbo.resolve.file</span>=<span class=\"string\">/C:\\workspace\\dubbo-local-consumer.properties</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"java8中如何处理时间","date":"2017-04-01T05:12:06.000Z","_content":"\nJava8之前，Date类都是可变类\n当我们在多线程环境下使用它\n编程人员应该确认Date对象的线程安全\nJava8的Date和Time API提供了线程安全的不可变类\n编程人员不用考虑并发的问题\n![](/img/articleImg/time2.jpg)\n<!--more-->\n\n### LocalDate用法\nLocalDate只提供日期不提供时间信息。它是不可变类且线程安全的\n{% codeblock %}\n// 取当前日期：\nLocalDate today = LocalDate.now(); // -> 2017-04-01\n// 根据年月日取日期，04月就是04：\nLocalDate crischristmas = LocalDate.of(2017, 04, 01); // -> 2017-04-01\n// 根据字符串取：\nLocalDate endOfFeb = LocalDate.parse(\"2017-04-01\"); \n// 严格按照ISO yyyy-MM-dd验证，04写成4都不行，当然也有一个重载方法允许自己定义格式\nLocalDate.parse(\"2017-02-29\"); // 无效日期无法通过：DateTimeParseException: Invalid date...\n{% endcodeblock %}\n日期转换经常遇到，比如：\n{% codeblock %}\n// 取本月第1天：\nLocalDate firstDayOfThisMonth = today.with(TemporalAdjusters.firstDayOfMonth()); // 2017-04-01\n// 取本月第2天：\nLocalDate secondDayOfThisMonth = today.withDayOfMonth(2); // 2017-04-02\n// 取本月最后一天，再也不用计算是28，29，30还是31：\nLocalDate lastDayOfThisMonth = today.with(TemporalAdjusters.lastDayOfMonth()); // 2017-04-30\n// 取下一天：\nLocalDate nextDayOf = lastDayOfThisMonth.plusDays(1); // 变成了2017-05-01\n// 取2017年1月第一个周一，这个计算用Calendar要死掉很多脑细胞：\nLocalDate firstMondayOf2017 = LocalDate.parse(\"2017-01-01\").with(TemporalAdjusters.firstInMonth(DayOfWeek.MONDAY)); // 2017-01-02\n{% endcodeblock %}\n### LocalTime\nLocalTime只提供时间而不提供日期信息，它是不可变类且线程安全的\n{% codeblock %}\nLocalTime now = LocalTime.now(); // 11:09:09.240\n清除毫秒数：\nLocalTime now = LocalTime.now().withNano(0)); // 11:09:09\n构造时间：\nLocalTime zero = LocalTime.of(0, 0, 0); // 00:00:00\nLocalTime mid = LocalTime.parse(\"12:00:00\"); // 12:00:00\n{% endcodeblock %}\n### JDBC\n\n最新JDBC映射将把数据库的日期类型和Java 8的新类型关联起来：\n>date -> LocalDate\ntime -> LocalTime\ntimestamp -> LocalDateTime\n\n再也不会出现映射到java.util.Date其中日期或时间某些部分为0的情况了.","source":"_posts/LocalDate.md","raw":"---\ntitle: java8中如何处理时间\ndate: 2017-04-01 13:12:06\ntags: \n\t- Java基础\ncategories:\n\t- 编程\n\t- Java\n---\n\nJava8之前，Date类都是可变类\n当我们在多线程环境下使用它\n编程人员应该确认Date对象的线程安全\nJava8的Date和Time API提供了线程安全的不可变类\n编程人员不用考虑并发的问题\n![](/img/articleImg/time2.jpg)\n<!--more-->\n\n### LocalDate用法\nLocalDate只提供日期不提供时间信息。它是不可变类且线程安全的\n{% codeblock %}\n// 取当前日期：\nLocalDate today = LocalDate.now(); // -> 2017-04-01\n// 根据年月日取日期，04月就是04：\nLocalDate crischristmas = LocalDate.of(2017, 04, 01); // -> 2017-04-01\n// 根据字符串取：\nLocalDate endOfFeb = LocalDate.parse(\"2017-04-01\"); \n// 严格按照ISO yyyy-MM-dd验证，04写成4都不行，当然也有一个重载方法允许自己定义格式\nLocalDate.parse(\"2017-02-29\"); // 无效日期无法通过：DateTimeParseException: Invalid date...\n{% endcodeblock %}\n日期转换经常遇到，比如：\n{% codeblock %}\n// 取本月第1天：\nLocalDate firstDayOfThisMonth = today.with(TemporalAdjusters.firstDayOfMonth()); // 2017-04-01\n// 取本月第2天：\nLocalDate secondDayOfThisMonth = today.withDayOfMonth(2); // 2017-04-02\n// 取本月最后一天，再也不用计算是28，29，30还是31：\nLocalDate lastDayOfThisMonth = today.with(TemporalAdjusters.lastDayOfMonth()); // 2017-04-30\n// 取下一天：\nLocalDate nextDayOf = lastDayOfThisMonth.plusDays(1); // 变成了2017-05-01\n// 取2017年1月第一个周一，这个计算用Calendar要死掉很多脑细胞：\nLocalDate firstMondayOf2017 = LocalDate.parse(\"2017-01-01\").with(TemporalAdjusters.firstInMonth(DayOfWeek.MONDAY)); // 2017-01-02\n{% endcodeblock %}\n### LocalTime\nLocalTime只提供时间而不提供日期信息，它是不可变类且线程安全的\n{% codeblock %}\nLocalTime now = LocalTime.now(); // 11:09:09.240\n清除毫秒数：\nLocalTime now = LocalTime.now().withNano(0)); // 11:09:09\n构造时间：\nLocalTime zero = LocalTime.of(0, 0, 0); // 00:00:00\nLocalTime mid = LocalTime.parse(\"12:00:00\"); // 12:00:00\n{% endcodeblock %}\n### JDBC\n\n最新JDBC映射将把数据库的日期类型和Java 8的新类型关联起来：\n>date -> LocalDate\ntime -> LocalTime\ntimestamp -> LocalDateTime\n\n再也不会出现映射到java.util.Date其中日期或时间某些部分为0的情况了.","slug":"LocalDate","published":1,"updated":"2020-07-02T03:34:03.658Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcbttrbd000bwgto9eb7h9wd","content":"<p>Java8之前，Date类都是可变类<br>当我们在多线程环境下使用它<br>编程人员应该确认Date对象的线程安全<br>Java8的Date和Time API提供了线程安全的不可变类<br>编程人员不用考虑并发的问题<br><img src=\"/img/articleImg/time2.jpg\" alt=\"\"></p>\n<a id=\"more\"></a>\n\n<h3 id=\"LocalDate用法\"><a href=\"#LocalDate用法\" class=\"headerlink\" title=\"LocalDate用法\"></a>LocalDate用法</h3><p>LocalDate只提供日期不提供时间信息。它是不可变类且线程安全的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 取当前日期：</span><br><span class=\"line\">LocalDate today &#x3D; LocalDate.now(); &#x2F;&#x2F; -&gt; 2017-04-01</span><br><span class=\"line\">&#x2F;&#x2F; 根据年月日取日期，04月就是04：</span><br><span class=\"line\">LocalDate crischristmas &#x3D; LocalDate.of(2017, 04, 01); &#x2F;&#x2F; -&gt; 2017-04-01</span><br><span class=\"line\">&#x2F;&#x2F; 根据字符串取：</span><br><span class=\"line\">LocalDate endOfFeb &#x3D; LocalDate.parse(&quot;2017-04-01&quot;); </span><br><span class=\"line\">&#x2F;&#x2F; 严格按照ISO yyyy-MM-dd验证，04写成4都不行，当然也有一个重载方法允许自己定义格式</span><br><span class=\"line\">LocalDate.parse(&quot;2017-02-29&quot;); &#x2F;&#x2F; 无效日期无法通过：DateTimeParseException: Invalid date...</span><br></pre></td></tr></table></figure>\n<p>日期转换经常遇到，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 取本月第1天：</span><br><span class=\"line\">LocalDate firstDayOfThisMonth &#x3D; today.with(TemporalAdjusters.firstDayOfMonth()); &#x2F;&#x2F; 2017-04-01</span><br><span class=\"line\">&#x2F;&#x2F; 取本月第2天：</span><br><span class=\"line\">LocalDate secondDayOfThisMonth &#x3D; today.withDayOfMonth(2); &#x2F;&#x2F; 2017-04-02</span><br><span class=\"line\">&#x2F;&#x2F; 取本月最后一天，再也不用计算是28，29，30还是31：</span><br><span class=\"line\">LocalDate lastDayOfThisMonth &#x3D; today.with(TemporalAdjusters.lastDayOfMonth()); &#x2F;&#x2F; 2017-04-30</span><br><span class=\"line\">&#x2F;&#x2F; 取下一天：</span><br><span class=\"line\">LocalDate nextDayOf &#x3D; lastDayOfThisMonth.plusDays(1); &#x2F;&#x2F; 变成了2017-05-01</span><br><span class=\"line\">&#x2F;&#x2F; 取2017年1月第一个周一，这个计算用Calendar要死掉很多脑细胞：</span><br><span class=\"line\">LocalDate firstMondayOf2017 &#x3D; LocalDate.parse(&quot;2017-01-01&quot;).with(TemporalAdjusters.firstInMonth(DayOfWeek.MONDAY)); &#x2F;&#x2F; 2017-01-02</span><br></pre></td></tr></table></figure>\n<h3 id=\"LocalTime\"><a href=\"#LocalTime\" class=\"headerlink\" title=\"LocalTime\"></a>LocalTime</h3><p>LocalTime只提供时间而不提供日期信息，它是不可变类且线程安全的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LocalTime now &#x3D; LocalTime.now(); &#x2F;&#x2F; 11:09:09.240</span><br><span class=\"line\">清除毫秒数：</span><br><span class=\"line\">LocalTime now &#x3D; LocalTime.now().withNano(0)); &#x2F;&#x2F; 11:09:09</span><br><span class=\"line\">构造时间：</span><br><span class=\"line\">LocalTime zero &#x3D; LocalTime.of(0, 0, 0); &#x2F;&#x2F; 00:00:00</span><br><span class=\"line\">LocalTime mid &#x3D; LocalTime.parse(&quot;12:00:00&quot;); &#x2F;&#x2F; 12:00:00</span><br></pre></td></tr></table></figure>\n<h3 id=\"JDBC\"><a href=\"#JDBC\" class=\"headerlink\" title=\"JDBC\"></a>JDBC</h3><p>最新JDBC映射将把数据库的日期类型和Java 8的新类型关联起来：</p>\n<blockquote>\n<p>date -&gt; LocalDate<br>time -&gt; LocalTime<br>timestamp -&gt; LocalDateTime</p>\n</blockquote>\n<p>再也不会出现映射到java.util.Date其中日期或时间某些部分为0的情况了.</p>\n","site":{"data":{}},"excerpt":"<p>Java8之前，Date类都是可变类<br>当我们在多线程环境下使用它<br>编程人员应该确认Date对象的线程安全<br>Java8的Date和Time API提供了线程安全的不可变类<br>编程人员不用考虑并发的问题<br><img src=\"/img/articleImg/time2.jpg\" alt=\"\"></p>","more":"<h3 id=\"LocalDate用法\"><a href=\"#LocalDate用法\" class=\"headerlink\" title=\"LocalDate用法\"></a>LocalDate用法</h3><p>LocalDate只提供日期不提供时间信息。它是不可变类且线程安全的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 取当前日期：</span><br><span class=\"line\">LocalDate today &#x3D; LocalDate.now(); &#x2F;&#x2F; -&gt; 2017-04-01</span><br><span class=\"line\">&#x2F;&#x2F; 根据年月日取日期，04月就是04：</span><br><span class=\"line\">LocalDate crischristmas &#x3D; LocalDate.of(2017, 04, 01); &#x2F;&#x2F; -&gt; 2017-04-01</span><br><span class=\"line\">&#x2F;&#x2F; 根据字符串取：</span><br><span class=\"line\">LocalDate endOfFeb &#x3D; LocalDate.parse(&quot;2017-04-01&quot;); </span><br><span class=\"line\">&#x2F;&#x2F; 严格按照ISO yyyy-MM-dd验证，04写成4都不行，当然也有一个重载方法允许自己定义格式</span><br><span class=\"line\">LocalDate.parse(&quot;2017-02-29&quot;); &#x2F;&#x2F; 无效日期无法通过：DateTimeParseException: Invalid date...</span><br></pre></td></tr></table></figure>\n<p>日期转换经常遇到，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 取本月第1天：</span><br><span class=\"line\">LocalDate firstDayOfThisMonth &#x3D; today.with(TemporalAdjusters.firstDayOfMonth()); &#x2F;&#x2F; 2017-04-01</span><br><span class=\"line\">&#x2F;&#x2F; 取本月第2天：</span><br><span class=\"line\">LocalDate secondDayOfThisMonth &#x3D; today.withDayOfMonth(2); &#x2F;&#x2F; 2017-04-02</span><br><span class=\"line\">&#x2F;&#x2F; 取本月最后一天，再也不用计算是28，29，30还是31：</span><br><span class=\"line\">LocalDate lastDayOfThisMonth &#x3D; today.with(TemporalAdjusters.lastDayOfMonth()); &#x2F;&#x2F; 2017-04-30</span><br><span class=\"line\">&#x2F;&#x2F; 取下一天：</span><br><span class=\"line\">LocalDate nextDayOf &#x3D; lastDayOfThisMonth.plusDays(1); &#x2F;&#x2F; 变成了2017-05-01</span><br><span class=\"line\">&#x2F;&#x2F; 取2017年1月第一个周一，这个计算用Calendar要死掉很多脑细胞：</span><br><span class=\"line\">LocalDate firstMondayOf2017 &#x3D; LocalDate.parse(&quot;2017-01-01&quot;).with(TemporalAdjusters.firstInMonth(DayOfWeek.MONDAY)); &#x2F;&#x2F; 2017-01-02</span><br></pre></td></tr></table></figure>\n<h3 id=\"LocalTime\"><a href=\"#LocalTime\" class=\"headerlink\" title=\"LocalTime\"></a>LocalTime</h3><p>LocalTime只提供时间而不提供日期信息，它是不可变类且线程安全的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LocalTime now &#x3D; LocalTime.now(); &#x2F;&#x2F; 11:09:09.240</span><br><span class=\"line\">清除毫秒数：</span><br><span class=\"line\">LocalTime now &#x3D; LocalTime.now().withNano(0)); &#x2F;&#x2F; 11:09:09</span><br><span class=\"line\">构造时间：</span><br><span class=\"line\">LocalTime zero &#x3D; LocalTime.of(0, 0, 0); &#x2F;&#x2F; 00:00:00</span><br><span class=\"line\">LocalTime mid &#x3D; LocalTime.parse(&quot;12:00:00&quot;); &#x2F;&#x2F; 12:00:00</span><br></pre></td></tr></table></figure>\n<h3 id=\"JDBC\"><a href=\"#JDBC\" class=\"headerlink\" title=\"JDBC\"></a>JDBC</h3><p>最新JDBC映射将把数据库的日期类型和Java 8的新类型关联起来：</p>\n<blockquote>\n<p>date -&gt; LocalDate<br>time -&gt; LocalTime<br>timestamp -&gt; LocalDateTime</p>\n</blockquote>\n<p>再也不会出现映射到java.util.Date其中日期或时间某些部分为0的情况了.</p>"},{"title":"TCP三次握手","date":"2020-07-03T05:53:37.000Z","_content":"\n### 传输控制协议TCP简介\n\n- 面向连接的、可靠的、基于字节流的传输层通信协议\n- 将应用层的数据流分割成报文段并发送给目标节点的TCP层\n- 数据包都有序号，对方收到则发送ACK确认，未收到则重传\n- 使用校验和来检验数据在传输过程中是否有误\n\n![TCP报文](/articleImage/2020-07-03/3.jpg)\n\n<!--more-->\n\n**序列号seq**：占4个字节，用来标记数据段的顺序，TCP把连接中发送的所有数据字节都编上一个序号，第一个字节的编号由本地随机产生；给字节编上序号后，就给每一个报文段指派一个序号；序列号seq就是这个报文段中的第一个字节的数据编号。\n**确认号ack**：占4个字节，期待收到对方下一个报文段的第一个数据字节的序号；序列号表示报文段携带数据的第一个字节的编号；而确认号指的是期望接收到下一个字节的编号；因此当前报文段最后一个字节的编号+1即为确认号。\n**确认ACK**：占1位，仅当ACK=1时，确认号字段才有效。ACK=0时，确认号无效\n**同步SYN**：连接建立时用于同步序号。当SYN=1，ACK=0时表示：这是一个连接请求报文段。若同意连接，则在响应报文段中使得SYN=1，ACK=1。因此，SYN=1表示这是一个连接请求，或连接接受报文。SYN这个标志位只有在TCP建产连接时才会被置1，握手完成后SYN标志位被置0。\n**终止FIN**：用来释放一个连接。FIN=1表示：此报文段的发送方的数据已经发送完毕，并要求释放运输连接。\n\n![TCP Flags](/articleImage/2020-07-03/2.png)\n\n第一次握手：建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。\n第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；\n第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。\n\n![TCP Flags](/articleImage/2020-07-03/3.png)\n\n**常见面试题：**\n**1.为什么需要三次握手才能建立起连接**\n\t\t为了初始化通信双方sequence number的初始值。也就是x和y这个号要作为以后通信的序号，以保证应用层接收到的数据不会因为网络上的传输问题而乱序，tcp会利用这个序号来拼接数据。\n\n**2.首次握手的隐患---SYN超时**\n\t\tServer收到client的syn，并且回复syn-ack后，未收到client发送的ack确认，会有什么问题？此时连接并未完成，处于“半连接”状态，server端接下来会不断重发syn-ack报文到客户端，重试5次后才关闭该半连接。\n对于以上情况，可能会使服务器受到syn flood攻击：恶意程序发送syn请求然后下线了，此时服务端会维持一个半连接直到重试5次后才关闭（linux上重试的频率是1s后，2s后，4s后，…,32s后，一共会维持此连接63s才关闭），会占用服务端连接资源。\n针对SYN Flood的防护措施:SYN队列满后，通过tcp_syncookies参数会发SYN Cookie若为正常连接则Client会回发SYN Cookie，直接建立连接 。\n\n**3.建议连接后，client出现故障怎么办？**\n\t\tTCP设有保活机制，在保活时间内，连接处于非活动状态，开启保活功能的一方将向对方发送保活探测报文，如果发送方未收到响应则继续发送。若在重发次数达到保活探测数后若仍未收到响应，则认为对方主机不可达，中断连接。","source":"_posts/TCP三次握手.md","raw":"---\ntitle: TCP三次握手\ndate: 2020-07-03 13:53:37\ncategories:\n\t- Java面试\n\t- 计算机网络\n---\n\n### 传输控制协议TCP简介\n\n- 面向连接的、可靠的、基于字节流的传输层通信协议\n- 将应用层的数据流分割成报文段并发送给目标节点的TCP层\n- 数据包都有序号，对方收到则发送ACK确认，未收到则重传\n- 使用校验和来检验数据在传输过程中是否有误\n\n![TCP报文](/articleImage/2020-07-03/3.jpg)\n\n<!--more-->\n\n**序列号seq**：占4个字节，用来标记数据段的顺序，TCP把连接中发送的所有数据字节都编上一个序号，第一个字节的编号由本地随机产生；给字节编上序号后，就给每一个报文段指派一个序号；序列号seq就是这个报文段中的第一个字节的数据编号。\n**确认号ack**：占4个字节，期待收到对方下一个报文段的第一个数据字节的序号；序列号表示报文段携带数据的第一个字节的编号；而确认号指的是期望接收到下一个字节的编号；因此当前报文段最后一个字节的编号+1即为确认号。\n**确认ACK**：占1位，仅当ACK=1时，确认号字段才有效。ACK=0时，确认号无效\n**同步SYN**：连接建立时用于同步序号。当SYN=1，ACK=0时表示：这是一个连接请求报文段。若同意连接，则在响应报文段中使得SYN=1，ACK=1。因此，SYN=1表示这是一个连接请求，或连接接受报文。SYN这个标志位只有在TCP建产连接时才会被置1，握手完成后SYN标志位被置0。\n**终止FIN**：用来释放一个连接。FIN=1表示：此报文段的发送方的数据已经发送完毕，并要求释放运输连接。\n\n![TCP Flags](/articleImage/2020-07-03/2.png)\n\n第一次握手：建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。\n第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；\n第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。\n\n![TCP Flags](/articleImage/2020-07-03/3.png)\n\n**常见面试题：**\n**1.为什么需要三次握手才能建立起连接**\n\t\t为了初始化通信双方sequence number的初始值。也就是x和y这个号要作为以后通信的序号，以保证应用层接收到的数据不会因为网络上的传输问题而乱序，tcp会利用这个序号来拼接数据。\n\n**2.首次握手的隐患---SYN超时**\n\t\tServer收到client的syn，并且回复syn-ack后，未收到client发送的ack确认，会有什么问题？此时连接并未完成，处于“半连接”状态，server端接下来会不断重发syn-ack报文到客户端，重试5次后才关闭该半连接。\n对于以上情况，可能会使服务器受到syn flood攻击：恶意程序发送syn请求然后下线了，此时服务端会维持一个半连接直到重试5次后才关闭（linux上重试的频率是1s后，2s后，4s后，…,32s后，一共会维持此连接63s才关闭），会占用服务端连接资源。\n针对SYN Flood的防护措施:SYN队列满后，通过tcp_syncookies参数会发SYN Cookie若为正常连接则Client会回发SYN Cookie，直接建立连接 。\n\n**3.建议连接后，client出现故障怎么办？**\n\t\tTCP设有保活机制，在保活时间内，连接处于非活动状态，开启保活功能的一方将向对方发送保活探测报文，如果发送方未收到响应则继续发送。若在重发次数达到保活探测数后若仍未收到响应，则认为对方主机不可达，中断连接。","slug":"TCP三次握手","published":1,"updated":"2020-07-03T08:00:40.856Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcbttrbe000cwgto1p6o8uby","content":"<h3 id=\"传输控制协议TCP简介\"><a href=\"#传输控制协议TCP简介\" class=\"headerlink\" title=\"传输控制协议TCP简介\"></a>传输控制协议TCP简介</h3><ul>\n<li>面向连接的、可靠的、基于字节流的传输层通信协议</li>\n<li>将应用层的数据流分割成报文段并发送给目标节点的TCP层</li>\n<li>数据包都有序号，对方收到则发送ACK确认，未收到则重传</li>\n<li>使用校验和来检验数据在传输过程中是否有误</li>\n</ul>\n<p><img src=\"/articleImage/2020-07-03/3.jpg\" alt=\"TCP报文\"></p>\n<a id=\"more\"></a>\n\n<p><strong>序列号seq</strong>：占4个字节，用来标记数据段的顺序，TCP把连接中发送的所有数据字节都编上一个序号，第一个字节的编号由本地随机产生；给字节编上序号后，就给每一个报文段指派一个序号；序列号seq就是这个报文段中的第一个字节的数据编号。<br><strong>确认号ack</strong>：占4个字节，期待收到对方下一个报文段的第一个数据字节的序号；序列号表示报文段携带数据的第一个字节的编号；而确认号指的是期望接收到下一个字节的编号；因此当前报文段最后一个字节的编号+1即为确认号。<br><strong>确认ACK</strong>：占1位，仅当ACK=1时，确认号字段才有效。ACK=0时，确认号无效<br><strong>同步SYN</strong>：连接建立时用于同步序号。当SYN=1，ACK=0时表示：这是一个连接请求报文段。若同意连接，则在响应报文段中使得SYN=1，ACK=1。因此，SYN=1表示这是一个连接请求，或连接接受报文。SYN这个标志位只有在TCP建产连接时才会被置1，握手完成后SYN标志位被置0。<br><strong>终止FIN</strong>：用来释放一个连接。FIN=1表示：此报文段的发送方的数据已经发送完毕，并要求释放运输连接。</p>\n<p><img src=\"/articleImage/2020-07-03/2.png\" alt=\"TCP Flags\"></p>\n<p>第一次握手：建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。<br>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；<br>第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。</p>\n<p><img src=\"/articleImage/2020-07-03/3.png\" alt=\"TCP Flags\"></p>\n<p><strong>常见面试题：</strong><br><strong>1.为什么需要三次握手才能建立起连接</strong><br>        为了初始化通信双方sequence number的初始值。也就是x和y这个号要作为以后通信的序号，以保证应用层接收到的数据不会因为网络上的传输问题而乱序，tcp会利用这个序号来拼接数据。</p>\n<p><strong>2.首次握手的隐患—SYN超时</strong><br>        Server收到client的syn，并且回复syn-ack后，未收到client发送的ack确认，会有什么问题？此时连接并未完成，处于“半连接”状态，server端接下来会不断重发syn-ack报文到客户端，重试5次后才关闭该半连接。<br>对于以上情况，可能会使服务器受到syn flood攻击：恶意程序发送syn请求然后下线了，此时服务端会维持一个半连接直到重试5次后才关闭（linux上重试的频率是1s后，2s后，4s后，…,32s后，一共会维持此连接63s才关闭），会占用服务端连接资源。<br>针对SYN Flood的防护措施:SYN队列满后，通过tcp_syncookies参数会发SYN Cookie若为正常连接则Client会回发SYN Cookie，直接建立连接 。</p>\n<p><strong>3.建议连接后，client出现故障怎么办？</strong><br>        TCP设有保活机制，在保活时间内，连接处于非活动状态，开启保活功能的一方将向对方发送保活探测报文，如果发送方未收到响应则继续发送。若在重发次数达到保活探测数后若仍未收到响应，则认为对方主机不可达，中断连接。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"传输控制协议TCP简介\"><a href=\"#传输控制协议TCP简介\" class=\"headerlink\" title=\"传输控制协议TCP简介\"></a>传输控制协议TCP简介</h3><ul>\n<li>面向连接的、可靠的、基于字节流的传输层通信协议</li>\n<li>将应用层的数据流分割成报文段并发送给目标节点的TCP层</li>\n<li>数据包都有序号，对方收到则发送ACK确认，未收到则重传</li>\n<li>使用校验和来检验数据在传输过程中是否有误</li>\n</ul>\n<p><img src=\"/articleImage/2020-07-03/3.jpg\" alt=\"TCP报文\"></p>","more":"<p><strong>序列号seq</strong>：占4个字节，用来标记数据段的顺序，TCP把连接中发送的所有数据字节都编上一个序号，第一个字节的编号由本地随机产生；给字节编上序号后，就给每一个报文段指派一个序号；序列号seq就是这个报文段中的第一个字节的数据编号。<br><strong>确认号ack</strong>：占4个字节，期待收到对方下一个报文段的第一个数据字节的序号；序列号表示报文段携带数据的第一个字节的编号；而确认号指的是期望接收到下一个字节的编号；因此当前报文段最后一个字节的编号+1即为确认号。<br><strong>确认ACK</strong>：占1位，仅当ACK=1时，确认号字段才有效。ACK=0时，确认号无效<br><strong>同步SYN</strong>：连接建立时用于同步序号。当SYN=1，ACK=0时表示：这是一个连接请求报文段。若同意连接，则在响应报文段中使得SYN=1，ACK=1。因此，SYN=1表示这是一个连接请求，或连接接受报文。SYN这个标志位只有在TCP建产连接时才会被置1，握手完成后SYN标志位被置0。<br><strong>终止FIN</strong>：用来释放一个连接。FIN=1表示：此报文段的发送方的数据已经发送完毕，并要求释放运输连接。</p>\n<p><img src=\"/articleImage/2020-07-03/2.png\" alt=\"TCP Flags\"></p>\n<p>第一次握手：建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。<br>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；<br>第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。</p>\n<p><img src=\"/articleImage/2020-07-03/3.png\" alt=\"TCP Flags\"></p>\n<p><strong>常见面试题：</strong><br><strong>1.为什么需要三次握手才能建立起连接</strong><br>        为了初始化通信双方sequence number的初始值。也就是x和y这个号要作为以后通信的序号，以保证应用层接收到的数据不会因为网络上的传输问题而乱序，tcp会利用这个序号来拼接数据。</p>\n<p><strong>2.首次握手的隐患—SYN超时</strong><br>        Server收到client的syn，并且回复syn-ack后，未收到client发送的ack确认，会有什么问题？此时连接并未完成，处于“半连接”状态，server端接下来会不断重发syn-ack报文到客户端，重试5次后才关闭该半连接。<br>对于以上情况，可能会使服务器受到syn flood攻击：恶意程序发送syn请求然后下线了，此时服务端会维持一个半连接直到重试5次后才关闭（linux上重试的频率是1s后，2s后，4s后，…,32s后，一共会维持此连接63s才关闭），会占用服务端连接资源。<br>针对SYN Flood的防护措施:SYN队列满后，通过tcp_syncookies参数会发SYN Cookie若为正常连接则Client会回发SYN Cookie，直接建立连接 。</p>\n<p><strong>3.建议连接后，client出现故障怎么办？</strong><br>        TCP设有保活机制，在保活时间内，连接处于非活动状态，开启保活功能的一方将向对方发送保活探测报文，如果发送方未收到响应则继续发送。若在重发次数达到保活探测数后若仍未收到响应，则认为对方主机不可达，中断连接。</p>"},{"title":"TCP四次挥手","date":"2020-07-03T08:02:35.000Z","_content":"\n“挥手”是为了终止连接，TCP四次挥手的流程图如下：\n\n![TCP Flags](/articleImage/2020-07-03/4.png)\n\n<!--more-->\n\n**第一次挥手：**客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。\n**第二次挥手**：服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。\n客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。\n**第三次挥手**：服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。\n**第四次挥手：**客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。\n服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。\n\n常见面试题：\n\n**1.Time-Wait到Closed状态为什么需要等待2MSL(最长报文段生命)**\n确保有足够的时间让对方收到ACK包\n避免新旧连接混淆\n\n**2.为什么需要四次握手才能断开连接**\n因为全双工，发送方和接受方都需要FIN报文和ACK报文\n\n**3.服务器出现大量CLOSE_WAIT状态的原因**\n对方关闭socket连接，我方忙于读或写，没有及时关闭连接\n检查代码，特别是释放资源的代码\n检查配置，特别是处理请求对的线程配置","source":"_posts/TCP四次挥手.md","raw":"---\ntitle: TCP四次挥手\ndate: 2020-07-03 16:02:35\ntags:\ncategories:\n\t- Java面试\n\t- 计算机网络\n---\n\n“挥手”是为了终止连接，TCP四次挥手的流程图如下：\n\n![TCP Flags](/articleImage/2020-07-03/4.png)\n\n<!--more-->\n\n**第一次挥手：**客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。\n**第二次挥手**：服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。\n客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。\n**第三次挥手**：服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。\n**第四次挥手：**客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。\n服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。\n\n常见面试题：\n\n**1.Time-Wait到Closed状态为什么需要等待2MSL(最长报文段生命)**\n确保有足够的时间让对方收到ACK包\n避免新旧连接混淆\n\n**2.为什么需要四次握手才能断开连接**\n因为全双工，发送方和接受方都需要FIN报文和ACK报文\n\n**3.服务器出现大量CLOSE_WAIT状态的原因**\n对方关闭socket连接，我方忙于读或写，没有及时关闭连接\n检查代码，特别是释放资源的代码\n检查配置，特别是处理请求对的线程配置","slug":"TCP四次挥手","published":1,"updated":"2020-07-03T10:20:23.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcbttrbh000gwgtofe1s7rl9","content":"<p>“挥手”是为了终止连接，TCP四次挥手的流程图如下：</p>\n<p><img src=\"/articleImage/2020-07-03/4.png\" alt=\"TCP Flags\"></p>\n<a id=\"more\"></a>\n\n<p><strong>第一次挥手：</strong>客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。<br><strong>第二次挥手</strong>：服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。<br>客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。<br><strong>第三次挥手</strong>：服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。<br><strong>第四次挥手：</strong>客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。<br>服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。</p>\n<p>常见面试题：</p>\n<p><strong>1.Time-Wait到Closed状态为什么需要等待2MSL(最长报文段生命)</strong><br>确保有足够的时间让对方收到ACK包<br>避免新旧连接混淆</p>\n<p><strong>2.为什么需要四次握手才能断开连接</strong><br>因为全双工，发送方和接受方都需要FIN报文和ACK报文</p>\n<p><strong>3.服务器出现大量CLOSE_WAIT状态的原因</strong><br>对方关闭socket连接，我方忙于读或写，没有及时关闭连接<br>检查代码，特别是释放资源的代码<br>检查配置，特别是处理请求对的线程配置</p>\n","site":{"data":{}},"excerpt":"<p>“挥手”是为了终止连接，TCP四次挥手的流程图如下：</p>\n<p><img src=\"/articleImage/2020-07-03/4.png\" alt=\"TCP Flags\"></p>","more":"<p><strong>第一次挥手：</strong>客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。<br><strong>第二次挥手</strong>：服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。<br>客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。<br><strong>第三次挥手</strong>：服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。<br><strong>第四次挥手：</strong>客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。<br>服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。</p>\n<p>常见面试题：</p>\n<p><strong>1.Time-Wait到Closed状态为什么需要等待2MSL(最长报文段生命)</strong><br>确保有足够的时间让对方收到ACK包<br>避免新旧连接混淆</p>\n<p><strong>2.为什么需要四次握手才能断开连接</strong><br>因为全双工，发送方和接受方都需要FIN报文和ACK报文</p>\n<p><strong>3.服务器出现大量CLOSE_WAIT状态的原因</strong><br>对方关闭socket连接，我方忙于读或写，没有及时关闭连接<br>检查代码，特别是释放资源的代码<br>检查配置，特别是处理请求对的线程配置</p>"},{"title":"TCP和UDP的区别","date":"2020-07-07T02:17:43.000Z","_content":"\n### UDP简介\n\n> Internet 协议集支持一个无连接的传输协议，该协议称为用户数据报协议（UDP，User Datagram Protocol）。UDP 为应用程序提供了一种无需建立连接就可以发送封装的 IP 数据包的方法。\n\n![UDP报文](/articleImage/2020-07-07/udp.png)\n\nUDP首部由8个字节构成，每个字段都是两个字节。\n\n1、源端口：源端口号，需要对方回信时选用，不需要时置0；\n2、目标端口：目的端口号，在终点交付报文时需要用到；\n3、头部长度：UDP的数据报长度（包含首部和数据），最小值为8字节（只有首部）；\n4、校验和：检测UDP数据在传输中是否出错，有错则丢弃。\n\n<!--more-->\n\n### UDP的特点\n\n- 面向非连接\n\n- 不维护连接状态，支持同时向多个客户端传输相同的消息。\n\n- 数据包报头只有8个字节，额外开销较小。\n\n- 吞吐量只受限于数据生成速率、传输速率以及机器性能。\n\n- 尽最大努力交付，不保证可靠交付，不需要维持复杂的链接状态表。\n\n- 面向报文，不对应用程序提交的报文信息进行拆分或者合并。\n\n在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。\n### UDP与TCP的区别\n\n- TCP是面向连接而UDP是面向非连接。\n\n- 可靠性：TCP是客户端与服务端一对一通过握手实现传输，具有稳定的可靠性，而UDP可能会丢失，不确定有没有被接收。\n\n- 有序性：TCP通过序列号保证了消息的正确性。\n\n- 速度：TCP速度比较慢，因为需要建立连接。\n\n- 量级：TCP是重量级的，而UDP是轻量级的。","source":"_posts/TCP和UDP的区别.md","raw":"---\ntitle: TCP和UDP的区别\ndate: 2020-07-07 10:17:43\ncategories:\n\t- Java面试\n\t- 计算机网络\n\n---\n\n### UDP简介\n\n> Internet 协议集支持一个无连接的传输协议，该协议称为用户数据报协议（UDP，User Datagram Protocol）。UDP 为应用程序提供了一种无需建立连接就可以发送封装的 IP 数据包的方法。\n\n![UDP报文](/articleImage/2020-07-07/udp.png)\n\nUDP首部由8个字节构成，每个字段都是两个字节。\n\n1、源端口：源端口号，需要对方回信时选用，不需要时置0；\n2、目标端口：目的端口号，在终点交付报文时需要用到；\n3、头部长度：UDP的数据报长度（包含首部和数据），最小值为8字节（只有首部）；\n4、校验和：检测UDP数据在传输中是否出错，有错则丢弃。\n\n<!--more-->\n\n### UDP的特点\n\n- 面向非连接\n\n- 不维护连接状态，支持同时向多个客户端传输相同的消息。\n\n- 数据包报头只有8个字节，额外开销较小。\n\n- 吞吐量只受限于数据生成速率、传输速率以及机器性能。\n\n- 尽最大努力交付，不保证可靠交付，不需要维持复杂的链接状态表。\n\n- 面向报文，不对应用程序提交的报文信息进行拆分或者合并。\n\n在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。\n### UDP与TCP的区别\n\n- TCP是面向连接而UDP是面向非连接。\n\n- 可靠性：TCP是客户端与服务端一对一通过握手实现传输，具有稳定的可靠性，而UDP可能会丢失，不确定有没有被接收。\n\n- 有序性：TCP通过序列号保证了消息的正确性。\n\n- 速度：TCP速度比较慢，因为需要建立连接。\n\n- 量级：TCP是重量级的，而UDP是轻量级的。","slug":"TCP和UDP的区别","published":1,"updated":"2020-07-07T03:05:04.385Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcbttrbi000hwgto8l6n8zgi","content":"<h3 id=\"UDP简介\"><a href=\"#UDP简介\" class=\"headerlink\" title=\"UDP简介\"></a>UDP简介</h3><blockquote>\n<p>Internet 协议集支持一个无连接的传输协议，该协议称为用户数据报协议（UDP，User Datagram Protocol）。UDP 为应用程序提供了一种无需建立连接就可以发送封装的 IP 数据包的方法。</p>\n</blockquote>\n<p><img src=\"/articleImage/2020-07-07/udp.png\" alt=\"UDP报文\"></p>\n<p>UDP首部由8个字节构成，每个字段都是两个字节。</p>\n<p>1、源端口：源端口号，需要对方回信时选用，不需要时置0；<br>2、目标端口：目的端口号，在终点交付报文时需要用到；<br>3、头部长度：UDP的数据报长度（包含首部和数据），最小值为8字节（只有首部）；<br>4、校验和：检测UDP数据在传输中是否出错，有错则丢弃。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"UDP的特点\"><a href=\"#UDP的特点\" class=\"headerlink\" title=\"UDP的特点\"></a>UDP的特点</h3><ul>\n<li><p>面向非连接</p>\n</li>\n<li><p>不维护连接状态，支持同时向多个客户端传输相同的消息。</p>\n</li>\n<li><p>数据包报头只有8个字节，额外开销较小。</p>\n</li>\n<li><p>吞吐量只受限于数据生成速率、传输速率以及机器性能。</p>\n</li>\n<li><p>尽最大努力交付，不保证可靠交付，不需要维持复杂的链接状态表。</p>\n</li>\n<li><p>面向报文，不对应用程序提交的报文信息进行拆分或者合并。</p>\n</li>\n</ul>\n<p>在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。</p>\n<h3 id=\"UDP与TCP的区别\"><a href=\"#UDP与TCP的区别\" class=\"headerlink\" title=\"UDP与TCP的区别\"></a>UDP与TCP的区别</h3><ul>\n<li><p>TCP是面向连接而UDP是面向非连接。</p>\n</li>\n<li><p>可靠性：TCP是客户端与服务端一对一通过握手实现传输，具有稳定的可靠性，而UDP可能会丢失，不确定有没有被接收。</p>\n</li>\n<li><p>有序性：TCP通过序列号保证了消息的正确性。</p>\n</li>\n<li><p>速度：TCP速度比较慢，因为需要建立连接。</p>\n</li>\n<li><p>量级：TCP是重量级的，而UDP是轻量级的。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"UDP简介\"><a href=\"#UDP简介\" class=\"headerlink\" title=\"UDP简介\"></a>UDP简介</h3><blockquote>\n<p>Internet 协议集支持一个无连接的传输协议，该协议称为用户数据报协议（UDP，User Datagram Protocol）。UDP 为应用程序提供了一种无需建立连接就可以发送封装的 IP 数据包的方法。</p>\n</blockquote>\n<p><img src=\"/articleImage/2020-07-07/udp.png\" alt=\"UDP报文\"></p>\n<p>UDP首部由8个字节构成，每个字段都是两个字节。</p>\n<p>1、源端口：源端口号，需要对方回信时选用，不需要时置0；<br>2、目标端口：目的端口号，在终点交付报文时需要用到；<br>3、头部长度：UDP的数据报长度（包含首部和数据），最小值为8字节（只有首部）；<br>4、校验和：检测UDP数据在传输中是否出错，有错则丢弃。</p>","more":"<h3 id=\"UDP的特点\"><a href=\"#UDP的特点\" class=\"headerlink\" title=\"UDP的特点\"></a>UDP的特点</h3><ul>\n<li><p>面向非连接</p>\n</li>\n<li><p>不维护连接状态，支持同时向多个客户端传输相同的消息。</p>\n</li>\n<li><p>数据包报头只有8个字节，额外开销较小。</p>\n</li>\n<li><p>吞吐量只受限于数据生成速率、传输速率以及机器性能。</p>\n</li>\n<li><p>尽最大努力交付，不保证可靠交付，不需要维持复杂的链接状态表。</p>\n</li>\n<li><p>面向报文，不对应用程序提交的报文信息进行拆分或者合并。</p>\n</li>\n</ul>\n<p>在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。</p>\n<h3 id=\"UDP与TCP的区别\"><a href=\"#UDP与TCP的区别\" class=\"headerlink\" title=\"UDP与TCP的区别\"></a>UDP与TCP的区别</h3><ul>\n<li><p>TCP是面向连接而UDP是面向非连接。</p>\n</li>\n<li><p>可靠性：TCP是客户端与服务端一对一通过握手实现传输，具有稳定的可靠性，而UDP可能会丢失，不确定有没有被接收。</p>\n</li>\n<li><p>有序性：TCP通过序列号保证了消息的正确性。</p>\n</li>\n<li><p>速度：TCP速度比较慢，因为需要建立连接。</p>\n</li>\n<li><p>量级：TCP是重量级的，而UDP是轻量级的。</p>\n</li>\n</ul>"},{"title":"Linux下防御/减轻DDOS攻击","date":"2017-03-03T05:30:03.000Z","_content":"好久没管我的vps了，直到前天发现vpn居然用不了了，一脸懵逼。\n登录后台就发现可能是被攻击了，导致被官方限制使用。\n![](/img/articleImg/vpsproblem.jpg)\n<!--more-->\n被莫名的攻击后也是张二和尚摸不着头脑。\n还能咋办叻?Goole~&Baidu~\n然后就开始了如下操作，也不知有没有用，O(∩_∩)O哈哈~\n\n## DDoS deflate介绍\n\n>DDoS deflate是一款免费的用来防御和减轻DDoS攻击的脚本。它通过>netstat监测跟踪创建大量网络连接的IP地址，在检测到某个结点超过\n>预设的限 制时，该程序会通过APF或IPTABLES禁止或阻挡这些IP.\n\n### 如何确认是否受到DDOS攻击？\n\n由于我是直接重装了系统，所以这一步仅供参考\n{% codeblock %}\nnetstat -ntu | awk '{print $5}' | cut -d: -f1 | sort | uniq -c | sort -n\n{% endcodeblock %}\n\n据说：执行后，将会显示服务器上所有的每个IP多少个连接数。\n\n### 1.安装DDoS deflate\n{% codeblock %}\nwget http://www.inetbase.com/scripts/ddos/install.sh   //下载DDoS  deflate\nchmod 0700 install.sh    //添加权限\n./install.sh             //执行\n{% endcodeblock %}\n\n### 2.配置DDoS deflate\nDDoS deflate的默认配置位于/usr/local/ddos/ddos.conf\n内容如下\n![](/img/articleImg/ddosconf.png)\n\n查看/usr/local/ddos/ddos.sh文件的第117行\n(vim模式下 跳转命令：行号 即可)\n{% codeblock %}\nnetstat -ntu | awk ‘{print $5}’ | cut -d: -f1 | sort | uniq -c | sort -nr > $BAD_IP_LIST\n{% endcodeblock %}\n修改为以下代码即可！\n{% codeblock %}\nnetstat -ntu | awk ‘{print $5}’ | cut -d: -f1 | sed -n ‘/[0-9]/p’ | sort | uniq -c | sort -nr > $BAD_IP_LIST\n{% endcodeblock %}","source":"_posts/ddos.md","raw":"---\ntitle: Linux下防御/减轻DDOS攻击 \ndate: 2017-03-03 13:30:03\ntags:\n\t- ddos\ncategories:\n\t- 运维\n\t- 安全\n---\n好久没管我的vps了，直到前天发现vpn居然用不了了，一脸懵逼。\n登录后台就发现可能是被攻击了，导致被官方限制使用。\n![](/img/articleImg/vpsproblem.jpg)\n<!--more-->\n被莫名的攻击后也是张二和尚摸不着头脑。\n还能咋办叻?Goole~&Baidu~\n然后就开始了如下操作，也不知有没有用，O(∩_∩)O哈哈~\n\n## DDoS deflate介绍\n\n>DDoS deflate是一款免费的用来防御和减轻DDoS攻击的脚本。它通过>netstat监测跟踪创建大量网络连接的IP地址，在检测到某个结点超过\n>预设的限 制时，该程序会通过APF或IPTABLES禁止或阻挡这些IP.\n\n### 如何确认是否受到DDOS攻击？\n\n由于我是直接重装了系统，所以这一步仅供参考\n{% codeblock %}\nnetstat -ntu | awk '{print $5}' | cut -d: -f1 | sort | uniq -c | sort -n\n{% endcodeblock %}\n\n据说：执行后，将会显示服务器上所有的每个IP多少个连接数。\n\n### 1.安装DDoS deflate\n{% codeblock %}\nwget http://www.inetbase.com/scripts/ddos/install.sh   //下载DDoS  deflate\nchmod 0700 install.sh    //添加权限\n./install.sh             //执行\n{% endcodeblock %}\n\n### 2.配置DDoS deflate\nDDoS deflate的默认配置位于/usr/local/ddos/ddos.conf\n内容如下\n![](/img/articleImg/ddosconf.png)\n\n查看/usr/local/ddos/ddos.sh文件的第117行\n(vim模式下 跳转命令：行号 即可)\n{% codeblock %}\nnetstat -ntu | awk ‘{print $5}’ | cut -d: -f1 | sort | uniq -c | sort -nr > $BAD_IP_LIST\n{% endcodeblock %}\n修改为以下代码即可！\n{% codeblock %}\nnetstat -ntu | awk ‘{print $5}’ | cut -d: -f1 | sed -n ‘/[0-9]/p’ | sort | uniq -c | sort -nr > $BAD_IP_LIST\n{% endcodeblock %}","slug":"ddos","published":1,"updated":"2020-07-02T03:29:13.393Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcbttrbj000lwgto9ykn8rnm","content":"<p>好久没管我的vps了，直到前天发现vpn居然用不了了，一脸懵逼。<br>登录后台就发现可能是被攻击了，导致被官方限制使用。<br><img src=\"/img/articleImg/vpsproblem.jpg\" alt=\"\"></p>\n<a id=\"more\"></a>\n<p>被莫名的攻击后也是张二和尚摸不着头脑。<br>还能咋办叻?Goole<del>&amp;Baidu</del><br>然后就开始了如下操作，也不知有没有用，O(∩_∩)O哈哈~</p>\n<h2 id=\"DDoS-deflate介绍\"><a href=\"#DDoS-deflate介绍\" class=\"headerlink\" title=\"DDoS deflate介绍\"></a>DDoS deflate介绍</h2><blockquote>\n<p>DDoS deflate是一款免费的用来防御和减轻DDoS攻击的脚本。它通过&gt;netstat监测跟踪创建大量网络连接的IP地址，在检测到某个结点超过<br>预设的限 制时，该程序会通过APF或IPTABLES禁止或阻挡这些IP.</p>\n</blockquote>\n<h3 id=\"如何确认是否受到DDOS攻击？\"><a href=\"#如何确认是否受到DDOS攻击？\" class=\"headerlink\" title=\"如何确认是否受到DDOS攻击？\"></a>如何确认是否受到DDOS攻击？</h3><p>由于我是直接重装了系统，所以这一步仅供参考</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ntu | awk &#39;&#123;print $5&#125;&#39; | cut -d: -f1 | sort | uniq -c | sort -n</span><br></pre></td></tr></table></figure>\n\n<p>据说：执行后，将会显示服务器上所有的每个IP多少个连接数。</p>\n<h3 id=\"1-安装DDoS-deflate\"><a href=\"#1-安装DDoS-deflate\" class=\"headerlink\" title=\"1.安装DDoS deflate\"></a>1.安装DDoS deflate</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http:&#x2F;&#x2F;www.inetbase.com&#x2F;scripts&#x2F;ddos&#x2F;install.sh   &#x2F;&#x2F;下载DDoS  deflate</span><br><span class=\"line\">chmod 0700 install.sh    &#x2F;&#x2F;添加权限</span><br><span class=\"line\">.&#x2F;install.sh             &#x2F;&#x2F;执行</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-配置DDoS-deflate\"><a href=\"#2-配置DDoS-deflate\" class=\"headerlink\" title=\"2.配置DDoS deflate\"></a>2.配置DDoS deflate</h3><p>DDoS deflate的默认配置位于/usr/local/ddos/ddos.conf<br>内容如下<br><img src=\"/img/articleImg/ddosconf.png\" alt=\"\"></p>\n<p>查看/usr/local/ddos/ddos.sh文件的第117行<br>(vim模式下 跳转命令：行号 即可)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ntu | awk ‘&#123;print $5&#125;’ | cut -d: -f1 | sort | uniq -c | sort -nr &gt; $BAD_IP_LIST</span><br></pre></td></tr></table></figure>\n<p>修改为以下代码即可！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ntu | awk ‘&#123;print $5&#125;’ | cut -d: -f1 | sed -n ‘&#x2F;[0-9]&#x2F;p’ | sort | uniq -c | sort -nr &gt; $BAD_IP_LIST</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>好久没管我的vps了，直到前天发现vpn居然用不了了，一脸懵逼。<br>登录后台就发现可能是被攻击了，导致被官方限制使用。<br><img src=\"/img/articleImg/vpsproblem.jpg\" alt=\"\"></p>","more":"<p>被莫名的攻击后也是张二和尚摸不着头脑。<br>还能咋办叻?Goole<del>&amp;Baidu</del><br>然后就开始了如下操作，也不知有没有用，O(∩_∩)O哈哈~</p>\n<h2 id=\"DDoS-deflate介绍\"><a href=\"#DDoS-deflate介绍\" class=\"headerlink\" title=\"DDoS deflate介绍\"></a>DDoS deflate介绍</h2><blockquote>\n<p>DDoS deflate是一款免费的用来防御和减轻DDoS攻击的脚本。它通过&gt;netstat监测跟踪创建大量网络连接的IP地址，在检测到某个结点超过<br>预设的限 制时，该程序会通过APF或IPTABLES禁止或阻挡这些IP.</p>\n</blockquote>\n<h3 id=\"如何确认是否受到DDOS攻击？\"><a href=\"#如何确认是否受到DDOS攻击？\" class=\"headerlink\" title=\"如何确认是否受到DDOS攻击？\"></a>如何确认是否受到DDOS攻击？</h3><p>由于我是直接重装了系统，所以这一步仅供参考</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ntu | awk &#39;&#123;print $5&#125;&#39; | cut -d: -f1 | sort | uniq -c | sort -n</span><br></pre></td></tr></table></figure>\n\n<p>据说：执行后，将会显示服务器上所有的每个IP多少个连接数。</p>\n<h3 id=\"1-安装DDoS-deflate\"><a href=\"#1-安装DDoS-deflate\" class=\"headerlink\" title=\"1.安装DDoS deflate\"></a>1.安装DDoS deflate</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http:&#x2F;&#x2F;www.inetbase.com&#x2F;scripts&#x2F;ddos&#x2F;install.sh   &#x2F;&#x2F;下载DDoS  deflate</span><br><span class=\"line\">chmod 0700 install.sh    &#x2F;&#x2F;添加权限</span><br><span class=\"line\">.&#x2F;install.sh             &#x2F;&#x2F;执行</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-配置DDoS-deflate\"><a href=\"#2-配置DDoS-deflate\" class=\"headerlink\" title=\"2.配置DDoS deflate\"></a>2.配置DDoS deflate</h3><p>DDoS deflate的默认配置位于/usr/local/ddos/ddos.conf<br>内容如下<br><img src=\"/img/articleImg/ddosconf.png\" alt=\"\"></p>\n<p>查看/usr/local/ddos/ddos.sh文件的第117行<br>(vim模式下 跳转命令：行号 即可)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ntu | awk ‘&#123;print $5&#125;’ | cut -d: -f1 | sort | uniq -c | sort -nr &gt; $BAD_IP_LIST</span><br></pre></td></tr></table></figure>\n<p>修改为以下代码即可！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ntu | awk ‘&#123;print $5&#125;’ | cut -d: -f1 | sed -n ‘&#x2F;[0-9]&#x2F;p’ | sort | uniq -c | sort -nr &gt; $BAD_IP_LIST</span><br></pre></td></tr></table></figure>"},{"title":"connection holder is null","date":"2017-03-14T02:58:24.000Z","_content":">\"Druid提供的getConnection()或者getConnection(long maxWaitMillis)方法不能保证>在同一个线程中获取的始终是一个连接，直到显式的将连接关闭吗？\"。\n>必须在程序在缓存从Druid中取出的连接才能保证现一个事务在使用的是同一个连接。 \n>而抛出“connection holder is null”异常的原因可能在于： \n>removeAbandonedTimeout //关闭长时间不使用的连接超时时间,单位秒,默认30*1000\n\n假设这个参数的值为30分钟,当一个连接在获取后30分钟还没释放,也就是Connection的DruidPooledPreparedStatement对象执行完了executXXX()方法但还未执行close、commit、rollback方法,对应于Connection的running参数的值为false,这时Durid的DestroyConnectionThread线程会自动将该连接回收。当程序要commit()连接时会执行checkState()方法,这个方法会执行以下代码：\n{% codeblock %}\nif(holder ==null)\n    {\n        if (disableError != null) {\n            throw new SQLException(\"connection holder is null\", disableError);\n        } else {\n            throw new SQLException(\"connection holder is null\");\n        }\n    }\n{% endcodeblock %}\n这段代码就是我们看到的“connection holder is null”异常的来源，因此，我们需要做的就是根据Druid提供的监控信息（主要看“连接持有时间分布”的值）修改这个参数的值，它的值一定要比最长的连接持有时间还要大。","source":"_posts/druidError.md","raw":"---\ntitle: connection holder is null\ndate: 2017-03-14 10:58:24\ntags:\n\t- druid\ncategories:\n\t- 其他\n---\n>\"Druid提供的getConnection()或者getConnection(long maxWaitMillis)方法不能保证>在同一个线程中获取的始终是一个连接，直到显式的将连接关闭吗？\"。\n>必须在程序在缓存从Druid中取出的连接才能保证现一个事务在使用的是同一个连接。 \n>而抛出“connection holder is null”异常的原因可能在于： \n>removeAbandonedTimeout //关闭长时间不使用的连接超时时间,单位秒,默认30*1000\n\n假设这个参数的值为30分钟,当一个连接在获取后30分钟还没释放,也就是Connection的DruidPooledPreparedStatement对象执行完了executXXX()方法但还未执行close、commit、rollback方法,对应于Connection的running参数的值为false,这时Durid的DestroyConnectionThread线程会自动将该连接回收。当程序要commit()连接时会执行checkState()方法,这个方法会执行以下代码：\n{% codeblock %}\nif(holder ==null)\n    {\n        if (disableError != null) {\n            throw new SQLException(\"connection holder is null\", disableError);\n        } else {\n            throw new SQLException(\"connection holder is null\");\n        }\n    }\n{% endcodeblock %}\n这段代码就是我们看到的“connection holder is null”异常的来源，因此，我们需要做的就是根据Druid提供的监控信息（主要看“连接持有时间分布”的值）修改这个参数的值，它的值一定要比最长的连接持有时间还要大。","slug":"druidError","published":1,"updated":"2020-07-02T03:31:09.965Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcbttrbk000mwgtobzpw69gg","content":"<blockquote>\n<p>“Druid提供的getConnection()或者getConnection(long maxWaitMillis)方法不能保证&gt;在同一个线程中获取的始终是一个连接，直到显式的将连接关闭吗？”。<br>必须在程序在缓存从Druid中取出的连接才能保证现一个事务在使用的是同一个连接。<br>而抛出“connection holder is null”异常的原因可能在于：<br>removeAbandonedTimeout //关闭长时间不使用的连接超时时间,单位秒,默认30*1000</p>\n</blockquote>\n<p>假设这个参数的值为30分钟,当一个连接在获取后30分钟还没释放,也就是Connection的DruidPooledPreparedStatement对象执行完了executXXX()方法但还未执行close、commit、rollback方法,对应于Connection的running参数的值为false,这时Durid的DestroyConnectionThread线程会自动将该连接回收。当程序要commit()连接时会执行checkState()方法,这个方法会执行以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(holder &#x3D;&#x3D;null)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (disableError !&#x3D; null) &#123;</span><br><span class=\"line\">            throw new SQLException(&quot;connection holder is null&quot;, disableError);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            throw new SQLException(&quot;connection holder is null&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码就是我们看到的“connection holder is null”异常的来源，因此，我们需要做的就是根据Druid提供的监控信息（主要看“连接持有时间分布”的值）修改这个参数的值，它的值一定要比最长的连接持有时间还要大。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>“Druid提供的getConnection()或者getConnection(long maxWaitMillis)方法不能保证&gt;在同一个线程中获取的始终是一个连接，直到显式的将连接关闭吗？”。<br>必须在程序在缓存从Druid中取出的连接才能保证现一个事务在使用的是同一个连接。<br>而抛出“connection holder is null”异常的原因可能在于：<br>removeAbandonedTimeout //关闭长时间不使用的连接超时时间,单位秒,默认30*1000</p>\n</blockquote>\n<p>假设这个参数的值为30分钟,当一个连接在获取后30分钟还没释放,也就是Connection的DruidPooledPreparedStatement对象执行完了executXXX()方法但还未执行close、commit、rollback方法,对应于Connection的running参数的值为false,这时Durid的DestroyConnectionThread线程会自动将该连接回收。当程序要commit()连接时会执行checkState()方法,这个方法会执行以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(holder &#x3D;&#x3D;null)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (disableError !&#x3D; null) &#123;</span><br><span class=\"line\">            throw new SQLException(&quot;connection holder is null&quot;, disableError);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            throw new SQLException(&quot;connection holder is null&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码就是我们看到的“connection holder is null”异常的来源，因此，我们需要做的就是根据Druid提供的监控信息（主要看“连接持有时间分布”的值）修改这个参数的值，它的值一定要比最长的连接持有时间还要大。</p>\n"},{"title":"TCP滑动窗口","date":"2020-07-07T03:18:29.000Z","_content":"\n#### 概念\n\nRTT：Round-Trip Time, 即往返时延，指发送一个数据包到收到对应的 ACK, 所花费的时间；\nRTO：Retransmission TimeOut, 即重传时间间隔。\n\n#### 滑动窗口\n\n- 保证 TCP 的可靠性。\n- 保证 TCP 的流控特性。\t\t\n\n在TCP协议中，发送方和接受方通过各自维护自己的缓冲区。通过商定包的重传机制等一系列操作，来解决不可靠的问题。\n\n![滑动窗口1](/articleImage/2020-07-07/hdck1.png)\n\n<!--more-->\n\n**1.如何保持有序？**\n\n![滑动窗口2](/articleImage/2020-07-07/3.png)\n\n​\t双方按顺序确认对方已接收的包\n\n**2.如何提高吞吐量？**\n\n​\t![滑动窗口3](/articleImage/2020-07-07/4.png)\n\n​\t同时发送多个包\n\n3.Ack一直未确认如何处理？\n\n​\t超时重传","source":"_posts/TCP滑动窗口.md","raw":"---\ntitle: TCP滑动窗口\ndate: 2020-07-07 11:18:29\ncategories:\n\t- Java面试\n\t- 计算机网络\n\n---\n\n#### 概念\n\nRTT：Round-Trip Time, 即往返时延，指发送一个数据包到收到对应的 ACK, 所花费的时间；\nRTO：Retransmission TimeOut, 即重传时间间隔。\n\n#### 滑动窗口\n\n- 保证 TCP 的可靠性。\n- 保证 TCP 的流控特性。\t\t\n\n在TCP协议中，发送方和接受方通过各自维护自己的缓冲区。通过商定包的重传机制等一系列操作，来解决不可靠的问题。\n\n![滑动窗口1](/articleImage/2020-07-07/hdck1.png)\n\n<!--more-->\n\n**1.如何保持有序？**\n\n![滑动窗口2](/articleImage/2020-07-07/3.png)\n\n​\t双方按顺序确认对方已接收的包\n\n**2.如何提高吞吐量？**\n\n​\t![滑动窗口3](/articleImage/2020-07-07/4.png)\n\n​\t同时发送多个包\n\n3.Ack一直未确认如何处理？\n\n​\t超时重传","slug":"TCP滑动窗口","published":1,"updated":"2020-07-07T06:19:01.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcbttrbl000pwgtoh5ch0x76","content":"<h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><p>RTT：Round-Trip Time, 即往返时延，指发送一个数据包到收到对应的 ACK, 所花费的时间；<br>RTO：Retransmission TimeOut, 即重传时间间隔。</p>\n<h4 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h4><ul>\n<li>保证 TCP 的可靠性。</li>\n<li>保证 TCP 的流控特性。        </li>\n</ul>\n<p>在TCP协议中，发送方和接受方通过各自维护自己的缓冲区。通过商定包的重传机制等一系列操作，来解决不可靠的问题。</p>\n<p><img src=\"/articleImage/2020-07-07/hdck1.png\" alt=\"滑动窗口1\"></p>\n<a id=\"more\"></a>\n\n<p><strong>1.如何保持有序？</strong></p>\n<p><img src=\"/articleImage/2020-07-07/3.png\" alt=\"滑动窗口2\"></p>\n<p>​    双方按顺序确认对方已接收的包</p>\n<p><strong>2.如何提高吞吐量？</strong></p>\n<p>​    <img src=\"/articleImage/2020-07-07/4.png\" alt=\"滑动窗口3\"></p>\n<p>​    同时发送多个包</p>\n<p>3.Ack一直未确认如何处理？</p>\n<p>​    超时重传</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><p>RTT：Round-Trip Time, 即往返时延，指发送一个数据包到收到对应的 ACK, 所花费的时间；<br>RTO：Retransmission TimeOut, 即重传时间间隔。</p>\n<h4 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h4><ul>\n<li>保证 TCP 的可靠性。</li>\n<li>保证 TCP 的流控特性。        </li>\n</ul>\n<p>在TCP协议中，发送方和接受方通过各自维护自己的缓冲区。通过商定包的重传机制等一系列操作，来解决不可靠的问题。</p>\n<p><img src=\"/articleImage/2020-07-07/hdck1.png\" alt=\"滑动窗口1\"></p>","more":"<p><strong>1.如何保持有序？</strong></p>\n<p><img src=\"/articleImage/2020-07-07/3.png\" alt=\"滑动窗口2\"></p>\n<p>​    双方按顺序确认对方已接收的包</p>\n<p><strong>2.如何提高吞吐量？</strong></p>\n<p>​    <img src=\"/articleImage/2020-07-07/4.png\" alt=\"滑动窗口3\"></p>\n<p>​    同时发送多个包</p>\n<p>3.Ack一直未确认如何处理？</p>\n<p>​    超时重传</p>"},{"title":"List集合按对象的某个字段去重","date":"2017-05-26T07:37:46.000Z","_content":"思路:\n利用Set(集合)的不可重复性：List-->Set-->List\nSet是最简单的一种集合。集合中的对象不按特定的方式排序，并且没有重复对象。 Set接口主要实现了两个实现类：\n●HashSet：HashSet类按照哈希算法来存取集合中的对象，存取速度比较快。 \n●TreeSet：TreeSet类实现了SortedSet接口，能够对集合中的对象进行排序。\n<!--more-->\n### 示例代码\nset集合的构造方式列出来了三种:new Comparator; lambda表达式; Comparator.comparing(); \n{% codeblock %}\npublic class CompareTest {\n\n\t\tpublic static void main(String[] args) {\n\t\n\t    \tList<CompanyMsgParam> companyList = new ArrayList<>();\n\t    \tCompanyMsgParam c1 = new CompanyMsgParam(\"2\", \"001\", \"A公司\", \"0\");\n\t    \tCompanyMsgParam c2 = new CompanyMsgParam(\"1\", \"001\", \"B公司\", \"1\");\n\t    \tCompanyMsgParam c3 = new CompanyMsgParam(\"2\", \"002\", \"C公司\", \"2\");\n\t    \tCompanyMsgParam c4 = new CompanyMsgParam(\"1\", \"003\", \"D公司\", \"3\");\n\t    \tcompanyList.add(c1);\n\t    \tcompanyList.add(c2);\n\t    \tcompanyList.add(c3);\n\t    \tcompanyList.add(c4);\n\t//第一种\n\t    \tSet<CompanyMsgParam> set = new TreeSet<CompanyMsgParam>(new Comparator<CompanyMsgParam>() {\n\t        @Override\n\t        public int compare(CompanyMsgParam com1, CompanyMsgParam com2) {\n\t            return com1.getCompanyCode().compareTo(com2.getCompanyCode());\n\t       \t\t}\n\t    \t});\n\t//第二种\n\t    \tSet<CompanyMsgParam> set = new TreeSet<CompanyMsgParam>((com1, com2) -> com1.getCompanyCode().compareTo(com2.getCompanyCode()));\n\t//第三种\n\t    \tSet<CompanyMsgParam> set = new TreeSet<CompanyMsgParam>(Comparator.comparing(CompanyMsgParam::getCompanyCode));\n\t    \tset.addAll(companyList);\n\t\n\t    \tcompanyList = new ArrayList<CompanyMsgParam>(set);\n\t\n\t    \tfor (CompanyMsgParam param : companyList) {\n\t        \tSystem.out.println(param.getCompanyCode());\n\t    \t\t}\n\t\t}\n\t}\n\n{% endcodeblock %}\n### IDEA配置LanguageLevel和JavaCompiler版本的问题\n按个人需要修改下面的配置即可：\n{% codeblock %}\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>2.3.2</version>\n            <configuration>\n                <source>1.8</source>\n                <target>1.8</target>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n{% endcodeblock %}","source":"_posts/duplicateRemoval.md","raw":"---\ntitle: List集合按对象的某个字段去重\ndate: 2017-05-26 15:37:46\ntags:\n\t- Java基础\ncategories:\n\t- 编程\n\t- Java\n---\n思路:\n利用Set(集合)的不可重复性：List-->Set-->List\nSet是最简单的一种集合。集合中的对象不按特定的方式排序，并且没有重复对象。 Set接口主要实现了两个实现类：\n●HashSet：HashSet类按照哈希算法来存取集合中的对象，存取速度比较快。 \n●TreeSet：TreeSet类实现了SortedSet接口，能够对集合中的对象进行排序。\n<!--more-->\n### 示例代码\nset集合的构造方式列出来了三种:new Comparator; lambda表达式; Comparator.comparing(); \n{% codeblock %}\npublic class CompareTest {\n\n\t\tpublic static void main(String[] args) {\n\t\n\t    \tList<CompanyMsgParam> companyList = new ArrayList<>();\n\t    \tCompanyMsgParam c1 = new CompanyMsgParam(\"2\", \"001\", \"A公司\", \"0\");\n\t    \tCompanyMsgParam c2 = new CompanyMsgParam(\"1\", \"001\", \"B公司\", \"1\");\n\t    \tCompanyMsgParam c3 = new CompanyMsgParam(\"2\", \"002\", \"C公司\", \"2\");\n\t    \tCompanyMsgParam c4 = new CompanyMsgParam(\"1\", \"003\", \"D公司\", \"3\");\n\t    \tcompanyList.add(c1);\n\t    \tcompanyList.add(c2);\n\t    \tcompanyList.add(c3);\n\t    \tcompanyList.add(c4);\n\t//第一种\n\t    \tSet<CompanyMsgParam> set = new TreeSet<CompanyMsgParam>(new Comparator<CompanyMsgParam>() {\n\t        @Override\n\t        public int compare(CompanyMsgParam com1, CompanyMsgParam com2) {\n\t            return com1.getCompanyCode().compareTo(com2.getCompanyCode());\n\t       \t\t}\n\t    \t});\n\t//第二种\n\t    \tSet<CompanyMsgParam> set = new TreeSet<CompanyMsgParam>((com1, com2) -> com1.getCompanyCode().compareTo(com2.getCompanyCode()));\n\t//第三种\n\t    \tSet<CompanyMsgParam> set = new TreeSet<CompanyMsgParam>(Comparator.comparing(CompanyMsgParam::getCompanyCode));\n\t    \tset.addAll(companyList);\n\t\n\t    \tcompanyList = new ArrayList<CompanyMsgParam>(set);\n\t\n\t    \tfor (CompanyMsgParam param : companyList) {\n\t        \tSystem.out.println(param.getCompanyCode());\n\t    \t\t}\n\t\t}\n\t}\n\n{% endcodeblock %}\n### IDEA配置LanguageLevel和JavaCompiler版本的问题\n按个人需要修改下面的配置即可：\n{% codeblock %}\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>2.3.2</version>\n            <configuration>\n                <source>1.8</source>\n                <target>1.8</target>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n{% endcodeblock %}","slug":"duplicateRemoval","published":1,"updated":"2020-07-02T03:33:18.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcbttrbn000rwgto9kvbfujr","content":"<p>思路:<br>利用Set(集合)的不可重复性：List–&gt;Set–&gt;List<br>Set是最简单的一种集合。集合中的对象不按特定的方式排序，并且没有重复对象。 Set接口主要实现了两个实现类：<br>●HashSet：HashSet类按照哈希算法来存取集合中的对象，存取速度比较快。<br>●TreeSet：TreeSet类实现了SortedSet接口，能够对集合中的对象进行排序。</p>\n<a id=\"more\"></a>\n<h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><p>set集合的构造方式列出来了三种:new Comparator; lambda表达式; Comparator.comparing(); </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CompareTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    \tList&lt;CompanyMsgParam&gt; companyList &#x3D; new ArrayList&lt;&gt;();</span><br><span class=\"line\">\t    \tCompanyMsgParam c1 &#x3D; new CompanyMsgParam(&quot;2&quot;, &quot;001&quot;, &quot;A公司&quot;, &quot;0&quot;);</span><br><span class=\"line\">\t    \tCompanyMsgParam c2 &#x3D; new CompanyMsgParam(&quot;1&quot;, &quot;001&quot;, &quot;B公司&quot;, &quot;1&quot;);</span><br><span class=\"line\">\t    \tCompanyMsgParam c3 &#x3D; new CompanyMsgParam(&quot;2&quot;, &quot;002&quot;, &quot;C公司&quot;, &quot;2&quot;);</span><br><span class=\"line\">\t    \tCompanyMsgParam c4 &#x3D; new CompanyMsgParam(&quot;1&quot;, &quot;003&quot;, &quot;D公司&quot;, &quot;3&quot;);</span><br><span class=\"line\">\t    \tcompanyList.add(c1);</span><br><span class=\"line\">\t    \tcompanyList.add(c2);</span><br><span class=\"line\">\t    \tcompanyList.add(c3);</span><br><span class=\"line\">\t    \tcompanyList.add(c4);</span><br><span class=\"line\">\t&#x2F;&#x2F;第一种</span><br><span class=\"line\">\t    \tSet&lt;CompanyMsgParam&gt; set &#x3D; new TreeSet&lt;CompanyMsgParam&gt;(new Comparator&lt;CompanyMsgParam&gt;() &#123;</span><br><span class=\"line\">\t        @Override</span><br><span class=\"line\">\t        public int compare(CompanyMsgParam com1, CompanyMsgParam com2) &#123;</span><br><span class=\"line\">\t            return com1.getCompanyCode().compareTo(com2.getCompanyCode());</span><br><span class=\"line\">\t       \t\t&#125;</span><br><span class=\"line\">\t    \t&#125;);</span><br><span class=\"line\">\t&#x2F;&#x2F;第二种</span><br><span class=\"line\">\t    \tSet&lt;CompanyMsgParam&gt; set &#x3D; new TreeSet&lt;CompanyMsgParam&gt;((com1, com2) -&gt; com1.getCompanyCode().compareTo(com2.getCompanyCode()));</span><br><span class=\"line\">\t&#x2F;&#x2F;第三种</span><br><span class=\"line\">\t    \tSet&lt;CompanyMsgParam&gt; set &#x3D; new TreeSet&lt;CompanyMsgParam&gt;(Comparator.comparing(CompanyMsgParam::getCompanyCode));</span><br><span class=\"line\">\t    \tset.addAll(companyList);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    \tcompanyList &#x3D; new ArrayList&lt;CompanyMsgParam&gt;(set);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    \tfor (CompanyMsgParam param : companyList) &#123;</span><br><span class=\"line\">\t        \tSystem.out.println(param.getCompanyCode());</span><br><span class=\"line\">\t    \t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"IDEA配置LanguageLevel和JavaCompiler版本的问题\"><a href=\"#IDEA配置LanguageLevel和JavaCompiler版本的问题\" class=\"headerlink\" title=\"IDEA配置LanguageLevel和JavaCompiler版本的问题\"></a>IDEA配置LanguageLevel和JavaCompiler版本的问题</h3><p>按个人需要修改下面的配置即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;build&gt;</span><br><span class=\"line\">    &lt;plugins&gt;</span><br><span class=\"line\">        &lt;plugin&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;maven-compiler-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;2.3.2&lt;&#x2F;version&gt;</span><br><span class=\"line\">            &lt;configuration&gt;</span><br><span class=\"line\">                &lt;source&gt;1.8&lt;&#x2F;source&gt;</span><br><span class=\"line\">                &lt;target&gt;1.8&lt;&#x2F;target&gt;</span><br><span class=\"line\">            &lt;&#x2F;configuration&gt;</span><br><span class=\"line\">        &lt;&#x2F;plugin&gt;</span><br><span class=\"line\">    &lt;&#x2F;plugins&gt;</span><br><span class=\"line\">&lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>思路:<br>利用Set(集合)的不可重复性：List–&gt;Set–&gt;List<br>Set是最简单的一种集合。集合中的对象不按特定的方式排序，并且没有重复对象。 Set接口主要实现了两个实现类：<br>●HashSet：HashSet类按照哈希算法来存取集合中的对象，存取速度比较快。<br>●TreeSet：TreeSet类实现了SortedSet接口，能够对集合中的对象进行排序。</p>","more":"<h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><p>set集合的构造方式列出来了三种:new Comparator; lambda表达式; Comparator.comparing(); </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CompareTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    \tList&lt;CompanyMsgParam&gt; companyList &#x3D; new ArrayList&lt;&gt;();</span><br><span class=\"line\">\t    \tCompanyMsgParam c1 &#x3D; new CompanyMsgParam(&quot;2&quot;, &quot;001&quot;, &quot;A公司&quot;, &quot;0&quot;);</span><br><span class=\"line\">\t    \tCompanyMsgParam c2 &#x3D; new CompanyMsgParam(&quot;1&quot;, &quot;001&quot;, &quot;B公司&quot;, &quot;1&quot;);</span><br><span class=\"line\">\t    \tCompanyMsgParam c3 &#x3D; new CompanyMsgParam(&quot;2&quot;, &quot;002&quot;, &quot;C公司&quot;, &quot;2&quot;);</span><br><span class=\"line\">\t    \tCompanyMsgParam c4 &#x3D; new CompanyMsgParam(&quot;1&quot;, &quot;003&quot;, &quot;D公司&quot;, &quot;3&quot;);</span><br><span class=\"line\">\t    \tcompanyList.add(c1);</span><br><span class=\"line\">\t    \tcompanyList.add(c2);</span><br><span class=\"line\">\t    \tcompanyList.add(c3);</span><br><span class=\"line\">\t    \tcompanyList.add(c4);</span><br><span class=\"line\">\t&#x2F;&#x2F;第一种</span><br><span class=\"line\">\t    \tSet&lt;CompanyMsgParam&gt; set &#x3D; new TreeSet&lt;CompanyMsgParam&gt;(new Comparator&lt;CompanyMsgParam&gt;() &#123;</span><br><span class=\"line\">\t        @Override</span><br><span class=\"line\">\t        public int compare(CompanyMsgParam com1, CompanyMsgParam com2) &#123;</span><br><span class=\"line\">\t            return com1.getCompanyCode().compareTo(com2.getCompanyCode());</span><br><span class=\"line\">\t       \t\t&#125;</span><br><span class=\"line\">\t    \t&#125;);</span><br><span class=\"line\">\t&#x2F;&#x2F;第二种</span><br><span class=\"line\">\t    \tSet&lt;CompanyMsgParam&gt; set &#x3D; new TreeSet&lt;CompanyMsgParam&gt;((com1, com2) -&gt; com1.getCompanyCode().compareTo(com2.getCompanyCode()));</span><br><span class=\"line\">\t&#x2F;&#x2F;第三种</span><br><span class=\"line\">\t    \tSet&lt;CompanyMsgParam&gt; set &#x3D; new TreeSet&lt;CompanyMsgParam&gt;(Comparator.comparing(CompanyMsgParam::getCompanyCode));</span><br><span class=\"line\">\t    \tset.addAll(companyList);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    \tcompanyList &#x3D; new ArrayList&lt;CompanyMsgParam&gt;(set);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    \tfor (CompanyMsgParam param : companyList) &#123;</span><br><span class=\"line\">\t        \tSystem.out.println(param.getCompanyCode());</span><br><span class=\"line\">\t    \t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"IDEA配置LanguageLevel和JavaCompiler版本的问题\"><a href=\"#IDEA配置LanguageLevel和JavaCompiler版本的问题\" class=\"headerlink\" title=\"IDEA配置LanguageLevel和JavaCompiler版本的问题\"></a>IDEA配置LanguageLevel和JavaCompiler版本的问题</h3><p>按个人需要修改下面的配置即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;build&gt;</span><br><span class=\"line\">    &lt;plugins&gt;</span><br><span class=\"line\">        &lt;plugin&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;maven-compiler-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;2.3.2&lt;&#x2F;version&gt;</span><br><span class=\"line\">            &lt;configuration&gt;</span><br><span class=\"line\">                &lt;source&gt;1.8&lt;&#x2F;source&gt;</span><br><span class=\"line\">                &lt;target&gt;1.8&lt;&#x2F;target&gt;</span><br><span class=\"line\">            &lt;&#x2F;configuration&gt;</span><br><span class=\"line\">        &lt;&#x2F;plugin&gt;</span><br><span class=\"line\">    &lt;&#x2F;plugins&gt;</span><br><span class=\"line\">&lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>"},{"title":"javaMail发送邮件","date":"2017-05-25T06:39:47.000Z","_content":">使用163邮箱作为邮件测试时遇到身份验证不通过的问题,在此略做记录..\n\n<!--more-->\t\n### 部分代码\n{% codeblock %}\n\t/**\n\t * 发送邮件\n\t * \n\t * @param toAddress\t\t: 收件人邮箱\n\t * @param mailSubject\t: 邮件主题\n\t * @param mailBody\t\t: 邮件正文\n\t * @param mailBodyIsHtml: 邮件正文格式,true:HTML格式;false:文本格式\n\t * //@param inLineFile\t: 内嵌文件\n\t * @param attachments\t: 附件\n\t */\n\tpublic static boolean sendMail (String toAddress, String mailSubject, String mailBody, \n\t\t\tboolean mailBodyIsHtml, File[] attachments){\n        try {\n\t\t\t// 创建邮件发送类 JavaMailSender (用于发送多元化邮件，包括附件，图片，html 等    )\n        \tJavaMailSenderImpl mailSender = new JavaMailSenderImpl();\n        \tmailSender.setHost(host); \t\t\t// 设置邮件服务主机    \n        \tmailSender.setUsername(username); \t// 发送者邮箱的用户名\n        \tmailSender.setPassword(password); \t// 发送者邮箱的密码\n        \t\n\t\t\t//配置文件，用于实例化java.mail.session    \n\t\t\tProperties pro = new Properties();\n\t\t\tpro.put(\"mail.smtp.auth\", \"true\");\t\t\n\t\t\tpro.put(\"mail.smtp.socketFactory.port\", port);\n\t\t\tpro.put(\"mail.smtp.socketFactory.fallback\", \"false\");\n\t\t\tpro.put(\"mail.smtp.starttls.enable\", \"true\");\n\t\t\tmailSender.setJavaMailProperties(pro);\n\t\n\t\t\t//创建多元化邮件 (创建 mimeMessage 帮助类，用于封装信息至 mimeMessage)\n\t\t\tMimeMessage mimeMessage = mailSender.createMimeMessage();\n\t\t\tMimeMessageHelper helper = new MimeMessageHelper(mimeMessage, ArrayUtils.isNotEmpty(attachments), \"UTF-8\");\n\t\t\t\n\t\t\thelper.setFrom(sendFrom, sendNick);\n\t\t\thelper.setTo(toAddress);\n\t\n\t\t\thelper.setSubject(mailSubject);\n\t\t\thelper.setText(mailBody, mailBodyIsHtml); \n\t\t\t\n\t\t\t// 添加内嵌文件，第1个参数为cid标识这个文件,第2个参数为资源\n\t\t\t//helper.addInline(MimeUtility.encodeText(inLineFile.getName()), inLineFile);\t\n\t\t\t\n\t\t\t// 添加附件    \n\t\t\tif (ArrayUtils.isNotEmpty(attachments)) {\n\t\t\t\tfor (File file : attachments) {\n\t\t\t\t\thelper.addAttachment(MimeUtility.encodeText(file.getName()), file);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tmailSender.send(mimeMessage);\n\t\t\treturn true;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn false;\n\t}\n{% endcodeblock %}\n\n### 运行报错：\n>“Authentication failed; nested exception is javax.mail.AuthenticationFailedException: 550 User has no permission.....”\n\n### 解决\n网易163邮箱 \"设置--POP3/SMTP/IMAP\" 中 \"客户端授权\" 未开启。\n开启授权码后，它将代替邮箱密码在客户端使用。\n![](/img/articleImg/163sqm.png)\n\n\n\n\n","source":"_posts/javaMail.md","raw":"---\ntitle: javaMail发送邮件\ndate: 2017-05-25 14:39:47\ntags:\n\t- JavaMail\ncategories:\n\t- 编程\n\t- Java\n---\n>使用163邮箱作为邮件测试时遇到身份验证不通过的问题,在此略做记录..\n\n<!--more-->\t\n### 部分代码\n{% codeblock %}\n\t/**\n\t * 发送邮件\n\t * \n\t * @param toAddress\t\t: 收件人邮箱\n\t * @param mailSubject\t: 邮件主题\n\t * @param mailBody\t\t: 邮件正文\n\t * @param mailBodyIsHtml: 邮件正文格式,true:HTML格式;false:文本格式\n\t * //@param inLineFile\t: 内嵌文件\n\t * @param attachments\t: 附件\n\t */\n\tpublic static boolean sendMail (String toAddress, String mailSubject, String mailBody, \n\t\t\tboolean mailBodyIsHtml, File[] attachments){\n        try {\n\t\t\t// 创建邮件发送类 JavaMailSender (用于发送多元化邮件，包括附件，图片，html 等    )\n        \tJavaMailSenderImpl mailSender = new JavaMailSenderImpl();\n        \tmailSender.setHost(host); \t\t\t// 设置邮件服务主机    \n        \tmailSender.setUsername(username); \t// 发送者邮箱的用户名\n        \tmailSender.setPassword(password); \t// 发送者邮箱的密码\n        \t\n\t\t\t//配置文件，用于实例化java.mail.session    \n\t\t\tProperties pro = new Properties();\n\t\t\tpro.put(\"mail.smtp.auth\", \"true\");\t\t\n\t\t\tpro.put(\"mail.smtp.socketFactory.port\", port);\n\t\t\tpro.put(\"mail.smtp.socketFactory.fallback\", \"false\");\n\t\t\tpro.put(\"mail.smtp.starttls.enable\", \"true\");\n\t\t\tmailSender.setJavaMailProperties(pro);\n\t\n\t\t\t//创建多元化邮件 (创建 mimeMessage 帮助类，用于封装信息至 mimeMessage)\n\t\t\tMimeMessage mimeMessage = mailSender.createMimeMessage();\n\t\t\tMimeMessageHelper helper = new MimeMessageHelper(mimeMessage, ArrayUtils.isNotEmpty(attachments), \"UTF-8\");\n\t\t\t\n\t\t\thelper.setFrom(sendFrom, sendNick);\n\t\t\thelper.setTo(toAddress);\n\t\n\t\t\thelper.setSubject(mailSubject);\n\t\t\thelper.setText(mailBody, mailBodyIsHtml); \n\t\t\t\n\t\t\t// 添加内嵌文件，第1个参数为cid标识这个文件,第2个参数为资源\n\t\t\t//helper.addInline(MimeUtility.encodeText(inLineFile.getName()), inLineFile);\t\n\t\t\t\n\t\t\t// 添加附件    \n\t\t\tif (ArrayUtils.isNotEmpty(attachments)) {\n\t\t\t\tfor (File file : attachments) {\n\t\t\t\t\thelper.addAttachment(MimeUtility.encodeText(file.getName()), file);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tmailSender.send(mimeMessage);\n\t\t\treturn true;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn false;\n\t}\n{% endcodeblock %}\n\n### 运行报错：\n>“Authentication failed; nested exception is javax.mail.AuthenticationFailedException: 550 User has no permission.....”\n\n### 解决\n网易163邮箱 \"设置--POP3/SMTP/IMAP\" 中 \"客户端授权\" 未开启。\n开启授权码后，它将代替邮箱密码在客户端使用。\n![](/img/articleImg/163sqm.png)\n\n\n\n\n","slug":"javaMail","published":1,"updated":"2020-07-02T03:39:46.170Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcbttrbp000vwgto7y3ef004","content":"<blockquote>\n<p>使用163邮箱作为邮件测试时遇到身份验证不通过的问题,在此略做记录..</p>\n</blockquote>\n<a id=\"more\"></a>    \n<h3 id=\"部分代码\"><a href=\"#部分代码\" class=\"headerlink\" title=\"部分代码\"></a>部分代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 发送邮件</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * @param toAddress\t\t: 收件人邮箱</span><br><span class=\"line\"> * @param mailSubject\t: 邮件主题</span><br><span class=\"line\"> * @param mailBody\t\t: 邮件正文</span><br><span class=\"line\"> * @param mailBodyIsHtml: 邮件正文格式,true:HTML格式;false:文本格式</span><br><span class=\"line\"> * &#x2F;&#x2F;@param inLineFile\t: 内嵌文件</span><br><span class=\"line\"> * @param attachments\t: 附件</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public static boolean sendMail (String toAddress, String mailSubject, String mailBody, </span><br><span class=\"line\">\t\tboolean mailBodyIsHtml, File[] attachments)&#123;</span><br><span class=\"line\">       try &#123;</span><br><span class=\"line\">\t\t&#x2F;&#x2F; 创建邮件发送类 JavaMailSender (用于发送多元化邮件，包括附件，图片，html 等    )</span><br><span class=\"line\">       \tJavaMailSenderImpl mailSender &#x3D; new JavaMailSenderImpl();</span><br><span class=\"line\">       \tmailSender.setHost(host); \t\t\t&#x2F;&#x2F; 设置邮件服务主机    </span><br><span class=\"line\">       \tmailSender.setUsername(username); \t&#x2F;&#x2F; 发送者邮箱的用户名</span><br><span class=\"line\">       \tmailSender.setPassword(password); \t&#x2F;&#x2F; 发送者邮箱的密码</span><br><span class=\"line\">       \t</span><br><span class=\"line\">\t\t&#x2F;&#x2F;配置文件，用于实例化java.mail.session    </span><br><span class=\"line\">\t\tProperties pro &#x3D; new Properties();</span><br><span class=\"line\">\t\tpro.put(&quot;mail.smtp.auth&quot;, &quot;true&quot;);\t\t</span><br><span class=\"line\">\t\tpro.put(&quot;mail.smtp.socketFactory.port&quot;, port);</span><br><span class=\"line\">\t\tpro.put(&quot;mail.smtp.socketFactory.fallback&quot;, &quot;false&quot;);</span><br><span class=\"line\">\t\tpro.put(&quot;mail.smtp.starttls.enable&quot;, &quot;true&quot;);</span><br><span class=\"line\">\t\tmailSender.setJavaMailProperties(pro);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#x2F;&#x2F;创建多元化邮件 (创建 mimeMessage 帮助类，用于封装信息至 mimeMessage)</span><br><span class=\"line\">\t\tMimeMessage mimeMessage &#x3D; mailSender.createMimeMessage();</span><br><span class=\"line\">\t\tMimeMessageHelper helper &#x3D; new MimeMessageHelper(mimeMessage, ArrayUtils.isNotEmpty(attachments), &quot;UTF-8&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\thelper.setFrom(sendFrom, sendNick);</span><br><span class=\"line\">\t\thelper.setTo(toAddress);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\thelper.setSubject(mailSubject);</span><br><span class=\"line\">\t\thelper.setText(mailBody, mailBodyIsHtml); </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;&#x2F; 添加内嵌文件，第1个参数为cid标识这个文件,第2个参数为资源</span><br><span class=\"line\">\t\t&#x2F;&#x2F;helper.addInline(MimeUtility.encodeText(inLineFile.getName()), inLineFile);\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;&#x2F; 添加附件    </span><br><span class=\"line\">\t\tif (ArrayUtils.isNotEmpty(attachments)) &#123;</span><br><span class=\"line\">\t\t\tfor (File file : attachments) &#123;</span><br><span class=\"line\">\t\t\t\thelper.addAttachment(MimeUtility.encodeText(file.getName()), file);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tmailSender.send(mimeMessage);</span><br><span class=\"line\">\t\treturn true;</span><br><span class=\"line\">\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行报错：\"><a href=\"#运行报错：\" class=\"headerlink\" title=\"运行报错：\"></a>运行报错：</h3><blockquote>\n<p>“Authentication failed; nested exception is javax.mail.AuthenticationFailedException: 550 User has no permission…..”</p>\n</blockquote>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>网易163邮箱 “设置–POP3/SMTP/IMAP” 中 “客户端授权” 未开启。<br>开启授权码后，它将代替邮箱密码在客户端使用。<br><img src=\"/img/articleImg/163sqm.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>使用163邮箱作为邮件测试时遇到身份验证不通过的问题,在此略做记录..</p>\n</blockquote>","more":"<h3 id=\"部分代码\"><a href=\"#部分代码\" class=\"headerlink\" title=\"部分代码\"></a>部分代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 发送邮件</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * @param toAddress\t\t: 收件人邮箱</span><br><span class=\"line\"> * @param mailSubject\t: 邮件主题</span><br><span class=\"line\"> * @param mailBody\t\t: 邮件正文</span><br><span class=\"line\"> * @param mailBodyIsHtml: 邮件正文格式,true:HTML格式;false:文本格式</span><br><span class=\"line\"> * &#x2F;&#x2F;@param inLineFile\t: 内嵌文件</span><br><span class=\"line\"> * @param attachments\t: 附件</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public static boolean sendMail (String toAddress, String mailSubject, String mailBody, </span><br><span class=\"line\">\t\tboolean mailBodyIsHtml, File[] attachments)&#123;</span><br><span class=\"line\">       try &#123;</span><br><span class=\"line\">\t\t&#x2F;&#x2F; 创建邮件发送类 JavaMailSender (用于发送多元化邮件，包括附件，图片，html 等    )</span><br><span class=\"line\">       \tJavaMailSenderImpl mailSender &#x3D; new JavaMailSenderImpl();</span><br><span class=\"line\">       \tmailSender.setHost(host); \t\t\t&#x2F;&#x2F; 设置邮件服务主机    </span><br><span class=\"line\">       \tmailSender.setUsername(username); \t&#x2F;&#x2F; 发送者邮箱的用户名</span><br><span class=\"line\">       \tmailSender.setPassword(password); \t&#x2F;&#x2F; 发送者邮箱的密码</span><br><span class=\"line\">       \t</span><br><span class=\"line\">\t\t&#x2F;&#x2F;配置文件，用于实例化java.mail.session    </span><br><span class=\"line\">\t\tProperties pro &#x3D; new Properties();</span><br><span class=\"line\">\t\tpro.put(&quot;mail.smtp.auth&quot;, &quot;true&quot;);\t\t</span><br><span class=\"line\">\t\tpro.put(&quot;mail.smtp.socketFactory.port&quot;, port);</span><br><span class=\"line\">\t\tpro.put(&quot;mail.smtp.socketFactory.fallback&quot;, &quot;false&quot;);</span><br><span class=\"line\">\t\tpro.put(&quot;mail.smtp.starttls.enable&quot;, &quot;true&quot;);</span><br><span class=\"line\">\t\tmailSender.setJavaMailProperties(pro);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#x2F;&#x2F;创建多元化邮件 (创建 mimeMessage 帮助类，用于封装信息至 mimeMessage)</span><br><span class=\"line\">\t\tMimeMessage mimeMessage &#x3D; mailSender.createMimeMessage();</span><br><span class=\"line\">\t\tMimeMessageHelper helper &#x3D; new MimeMessageHelper(mimeMessage, ArrayUtils.isNotEmpty(attachments), &quot;UTF-8&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\thelper.setFrom(sendFrom, sendNick);</span><br><span class=\"line\">\t\thelper.setTo(toAddress);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\thelper.setSubject(mailSubject);</span><br><span class=\"line\">\t\thelper.setText(mailBody, mailBodyIsHtml); </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;&#x2F; 添加内嵌文件，第1个参数为cid标识这个文件,第2个参数为资源</span><br><span class=\"line\">\t\t&#x2F;&#x2F;helper.addInline(MimeUtility.encodeText(inLineFile.getName()), inLineFile);\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;&#x2F; 添加附件    </span><br><span class=\"line\">\t\tif (ArrayUtils.isNotEmpty(attachments)) &#123;</span><br><span class=\"line\">\t\t\tfor (File file : attachments) &#123;</span><br><span class=\"line\">\t\t\t\thelper.addAttachment(MimeUtility.encodeText(file.getName()), file);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tmailSender.send(mimeMessage);</span><br><span class=\"line\">\t\treturn true;</span><br><span class=\"line\">\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行报错：\"><a href=\"#运行报错：\" class=\"headerlink\" title=\"运行报错：\"></a>运行报错：</h3><blockquote>\n<p>“Authentication failed; nested exception is javax.mail.AuthenticationFailedException: 550 User has no permission…..”</p>\n</blockquote>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>网易163邮箱 “设置–POP3/SMTP/IMAP” 中 “客户端授权” 未开启。<br>开启授权码后，它将代替邮箱密码在客户端使用。<br><img src=\"/img/articleImg/163sqm.png\" alt=\"\"></p>"},{"title":"Map按值排序","date":"2017-03-15T05:37:37.000Z","_content":"### Map按值排序\n问题描述如下：\n>现有Map<String,String>结构的数据，需要对其中包含的date值按降序排列输出\n>直观了解：\n>{\n>\"zhanshan\" :\"{\"date\":\"2010-03-09 17:52:49:074\",\"age\":\"21\"},\n>\"lisi\" :\"{\"date\":\"2015-01-09 10:52:49:088\",\"age\":\"19\"},\n>\"zhaowu\" :\"{\"date\":\"2016-06-01 17:52:49:574\",\"age\":\"30\"}\n>}\n>注：此Map的值也为String类型\n\n程序代码如下：\n<!--more-->\n{% codeblock %}\npublic Object MapSortTest(Map<String, String> map) {\n\n\tList<Map<String,String>> resList=new ArrayList<>();\n\t  if(!MapUtils.isEmpty(map)){\n\t\n\t//取Map映射集，遍历时可以getKey()，getValue()\n\t    List<Map.Entry<String,String>> entryList=new ArrayList<Map.Entry<String,String>>(map.entrySet());\n\t//自定义比较器\n\t    Collections.sort(entryList, new Comparator<Map.Entry<String, String>>(){\n\t        @Override\n\t        public int compare(Map.Entry<String, String> entry1, Map.Entry<String, String> entry2) {\n\t\n\t             String str1=entry1.getValue();\n\t             String str2=entry2.getValue();\n\t\t//切割截取date的值，subString前闭后开[)\n\t             String date1=str1.substring(str1.indexOf(\":\")+2,str1.indexOf(\",\")-1);\n\t             String date2=str2.substring(str2.indexOf(\":\")+2,str2.indexOf(\",\")-1);\n\t               try {\n\t                  Date d1=DateUtils.parseDate(date1,\"yyyy-MM-dd HH:mm:ss:SSS\");\n\t                  Date d2=DateUtils.parseDate(date2,\"yyyy-MM-dd HH:mm:ss:SSS\");\n\t\t\t//日期降序\n\t                  return d2.compareTo(d1);\n\t                } catch (ParseException e) {\n\t                    e.printStackTrace();\n\t                    return 0;\n\t                }\n\t            }\n\t        });\n\t     //遍历排序后的映射集，封装返回\n\t        Iterator<Map.Entry<String,String>> iter=entryList.iterator();\n\t        Map.Entry<String,String> temEntry =null;\n\t        while (iter.hasNext()){\n\t            Map<String,String> sortedMap = new LinkedHashMap<String,String>();\n\t            temEntry=iter.next();\n\t            sortedMap.put(\"type\",temEntry.getKey());\n\t            sortedMap.put(\"message\",temEntry.getValue());\n\t            resList.add(sortedMap);\n\t        }\n\t    }\n\t    return resList;\n\t}\n\n{% endcodeblock %}\n说明:上述程序不直接返回sortedMap，而是将其放入List中，是为了便于解析及防止架构上可能的重新排序（若返回map，可能会按map的key排序）。","source":"_posts/mapSort.md","raw":"---\ntitle: Map按值排序\ndate: 2017-03-15 13:37:37\ntags: \n\t- Java基础\ncategories:\n\t- 编程\n\t- Java\n---\n### Map按值排序\n问题描述如下：\n>现有Map<String,String>结构的数据，需要对其中包含的date值按降序排列输出\n>直观了解：\n>{\n>\"zhanshan\" :\"{\"date\":\"2010-03-09 17:52:49:074\",\"age\":\"21\"},\n>\"lisi\" :\"{\"date\":\"2015-01-09 10:52:49:088\",\"age\":\"19\"},\n>\"zhaowu\" :\"{\"date\":\"2016-06-01 17:52:49:574\",\"age\":\"30\"}\n>}\n>注：此Map的值也为String类型\n\n程序代码如下：\n<!--more-->\n{% codeblock %}\npublic Object MapSortTest(Map<String, String> map) {\n\n\tList<Map<String,String>> resList=new ArrayList<>();\n\t  if(!MapUtils.isEmpty(map)){\n\t\n\t//取Map映射集，遍历时可以getKey()，getValue()\n\t    List<Map.Entry<String,String>> entryList=new ArrayList<Map.Entry<String,String>>(map.entrySet());\n\t//自定义比较器\n\t    Collections.sort(entryList, new Comparator<Map.Entry<String, String>>(){\n\t        @Override\n\t        public int compare(Map.Entry<String, String> entry1, Map.Entry<String, String> entry2) {\n\t\n\t             String str1=entry1.getValue();\n\t             String str2=entry2.getValue();\n\t\t//切割截取date的值，subString前闭后开[)\n\t             String date1=str1.substring(str1.indexOf(\":\")+2,str1.indexOf(\",\")-1);\n\t             String date2=str2.substring(str2.indexOf(\":\")+2,str2.indexOf(\",\")-1);\n\t               try {\n\t                  Date d1=DateUtils.parseDate(date1,\"yyyy-MM-dd HH:mm:ss:SSS\");\n\t                  Date d2=DateUtils.parseDate(date2,\"yyyy-MM-dd HH:mm:ss:SSS\");\n\t\t\t//日期降序\n\t                  return d2.compareTo(d1);\n\t                } catch (ParseException e) {\n\t                    e.printStackTrace();\n\t                    return 0;\n\t                }\n\t            }\n\t        });\n\t     //遍历排序后的映射集，封装返回\n\t        Iterator<Map.Entry<String,String>> iter=entryList.iterator();\n\t        Map.Entry<String,String> temEntry =null;\n\t        while (iter.hasNext()){\n\t            Map<String,String> sortedMap = new LinkedHashMap<String,String>();\n\t            temEntry=iter.next();\n\t            sortedMap.put(\"type\",temEntry.getKey());\n\t            sortedMap.put(\"message\",temEntry.getValue());\n\t            resList.add(sortedMap);\n\t        }\n\t    }\n\t    return resList;\n\t}\n\n{% endcodeblock %}\n说明:上述程序不直接返回sortedMap，而是将其放入List中，是为了便于解析及防止架构上可能的重新排序（若返回map，可能会按map的key排序）。","slug":"mapSort","published":1,"updated":"2020-07-02T03:34:11.063Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcbttrbq000zwgtod3663z02","content":"<h3 id=\"Map按值排序\"><a href=\"#Map按值排序\" class=\"headerlink\" title=\"Map按值排序\"></a>Map按值排序</h3><p>问题描述如下：</p>\n<blockquote>\n<p>现有Map&lt;String,String&gt;结构的数据，需要对其中包含的date值按降序排列输出<br>直观了解：<br>{<br>“zhanshan” :”{“date”:”2010-03-09 17:52:49:074”,”age”:”21”},<br>“lisi” :”{“date”:”2015-01-09 10:52:49:088”,”age”:”19”},<br>“zhaowu” :”{“date”:”2016-06-01 17:52:49:574”,”age”:”30”}<br>}<br>注：此Map的值也为String类型</p>\n</blockquote>\n<p>程序代码如下：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Object MapSortTest(Map&lt;String, String&gt; map) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tList&lt;Map&lt;String,String&gt;&gt; resList&#x3D;new ArrayList&lt;&gt;();</span><br><span class=\"line\">\t  if(!MapUtils.isEmpty(map))&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#x2F;&#x2F;取Map映射集，遍历时可以getKey()，getValue()</span><br><span class=\"line\">\t    List&lt;Map.Entry&lt;String,String&gt;&gt; entryList&#x3D;new ArrayList&lt;Map.Entry&lt;String,String&gt;&gt;(map.entrySet());</span><br><span class=\"line\">\t&#x2F;&#x2F;自定义比较器</span><br><span class=\"line\">\t    Collections.sort(entryList, new Comparator&lt;Map.Entry&lt;String, String&gt;&gt;()&#123;</span><br><span class=\"line\">\t        @Override</span><br><span class=\"line\">\t        public int compare(Map.Entry&lt;String, String&gt; entry1, Map.Entry&lt;String, String&gt; entry2) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t             String str1&#x3D;entry1.getValue();</span><br><span class=\"line\">\t             String str2&#x3D;entry2.getValue();</span><br><span class=\"line\">\t\t&#x2F;&#x2F;切割截取date的值，subString前闭后开[)</span><br><span class=\"line\">\t             String date1&#x3D;str1.substring(str1.indexOf(&quot;:&quot;)+2,str1.indexOf(&quot;,&quot;)-1);</span><br><span class=\"line\">\t             String date2&#x3D;str2.substring(str2.indexOf(&quot;:&quot;)+2,str2.indexOf(&quot;,&quot;)-1);</span><br><span class=\"line\">\t               try &#123;</span><br><span class=\"line\">\t                  Date d1&#x3D;DateUtils.parseDate(date1,&quot;yyyy-MM-dd HH:mm:ss:SSS&quot;);</span><br><span class=\"line\">\t                  Date d2&#x3D;DateUtils.parseDate(date2,&quot;yyyy-MM-dd HH:mm:ss:SSS&quot;);</span><br><span class=\"line\">\t\t\t&#x2F;&#x2F;日期降序</span><br><span class=\"line\">\t                  return d2.compareTo(d1);</span><br><span class=\"line\">\t                &#125; catch (ParseException e) &#123;</span><br><span class=\"line\">\t                    e.printStackTrace();</span><br><span class=\"line\">\t                    return 0;</span><br><span class=\"line\">\t                &#125;</span><br><span class=\"line\">\t            &#125;</span><br><span class=\"line\">\t        &#125;);</span><br><span class=\"line\">\t     &#x2F;&#x2F;遍历排序后的映射集，封装返回</span><br><span class=\"line\">\t        Iterator&lt;Map.Entry&lt;String,String&gt;&gt; iter&#x3D;entryList.iterator();</span><br><span class=\"line\">\t        Map.Entry&lt;String,String&gt; temEntry &#x3D;null;</span><br><span class=\"line\">\t        while (iter.hasNext())&#123;</span><br><span class=\"line\">\t            Map&lt;String,String&gt; sortedMap &#x3D; new LinkedHashMap&lt;String,String&gt;();</span><br><span class=\"line\">\t            temEntry&#x3D;iter.next();</span><br><span class=\"line\">\t            sortedMap.put(&quot;type&quot;,temEntry.getKey());</span><br><span class=\"line\">\t            sortedMap.put(&quot;message&quot;,temEntry.getValue());</span><br><span class=\"line\">\t            resList.add(sortedMap);</span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    return resList;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>说明:上述程序不直接返回sortedMap，而是将其放入List中，是为了便于解析及防止架构上可能的重新排序（若返回map，可能会按map的key排序）。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"Map按值排序\"><a href=\"#Map按值排序\" class=\"headerlink\" title=\"Map按值排序\"></a>Map按值排序</h3><p>问题描述如下：</p>\n<blockquote>\n<p>现有Map&lt;String,String&gt;结构的数据，需要对其中包含的date值按降序排列输出<br>直观了解：<br>{<br>“zhanshan” :”{“date”:”2010-03-09 17:52:49:074”,”age”:”21”},<br>“lisi” :”{“date”:”2015-01-09 10:52:49:088”,”age”:”19”},<br>“zhaowu” :”{“date”:”2016-06-01 17:52:49:574”,”age”:”30”}<br>}<br>注：此Map的值也为String类型</p>\n</blockquote>\n<p>程序代码如下：</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Object MapSortTest(Map&lt;String, String&gt; map) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tList&lt;Map&lt;String,String&gt;&gt; resList&#x3D;new ArrayList&lt;&gt;();</span><br><span class=\"line\">\t  if(!MapUtils.isEmpty(map))&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#x2F;&#x2F;取Map映射集，遍历时可以getKey()，getValue()</span><br><span class=\"line\">\t    List&lt;Map.Entry&lt;String,String&gt;&gt; entryList&#x3D;new ArrayList&lt;Map.Entry&lt;String,String&gt;&gt;(map.entrySet());</span><br><span class=\"line\">\t&#x2F;&#x2F;自定义比较器</span><br><span class=\"line\">\t    Collections.sort(entryList, new Comparator&lt;Map.Entry&lt;String, String&gt;&gt;()&#123;</span><br><span class=\"line\">\t        @Override</span><br><span class=\"line\">\t        public int compare(Map.Entry&lt;String, String&gt; entry1, Map.Entry&lt;String, String&gt; entry2) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t             String str1&#x3D;entry1.getValue();</span><br><span class=\"line\">\t             String str2&#x3D;entry2.getValue();</span><br><span class=\"line\">\t\t&#x2F;&#x2F;切割截取date的值，subString前闭后开[)</span><br><span class=\"line\">\t             String date1&#x3D;str1.substring(str1.indexOf(&quot;:&quot;)+2,str1.indexOf(&quot;,&quot;)-1);</span><br><span class=\"line\">\t             String date2&#x3D;str2.substring(str2.indexOf(&quot;:&quot;)+2,str2.indexOf(&quot;,&quot;)-1);</span><br><span class=\"line\">\t               try &#123;</span><br><span class=\"line\">\t                  Date d1&#x3D;DateUtils.parseDate(date1,&quot;yyyy-MM-dd HH:mm:ss:SSS&quot;);</span><br><span class=\"line\">\t                  Date d2&#x3D;DateUtils.parseDate(date2,&quot;yyyy-MM-dd HH:mm:ss:SSS&quot;);</span><br><span class=\"line\">\t\t\t&#x2F;&#x2F;日期降序</span><br><span class=\"line\">\t                  return d2.compareTo(d1);</span><br><span class=\"line\">\t                &#125; catch (ParseException e) &#123;</span><br><span class=\"line\">\t                    e.printStackTrace();</span><br><span class=\"line\">\t                    return 0;</span><br><span class=\"line\">\t                &#125;</span><br><span class=\"line\">\t            &#125;</span><br><span class=\"line\">\t        &#125;);</span><br><span class=\"line\">\t     &#x2F;&#x2F;遍历排序后的映射集，封装返回</span><br><span class=\"line\">\t        Iterator&lt;Map.Entry&lt;String,String&gt;&gt; iter&#x3D;entryList.iterator();</span><br><span class=\"line\">\t        Map.Entry&lt;String,String&gt; temEntry &#x3D;null;</span><br><span class=\"line\">\t        while (iter.hasNext())&#123;</span><br><span class=\"line\">\t            Map&lt;String,String&gt; sortedMap &#x3D; new LinkedHashMap&lt;String,String&gt;();</span><br><span class=\"line\">\t            temEntry&#x3D;iter.next();</span><br><span class=\"line\">\t            sortedMap.put(&quot;type&quot;,temEntry.getKey());</span><br><span class=\"line\">\t            sortedMap.put(&quot;message&quot;,temEntry.getValue());</span><br><span class=\"line\">\t            resList.add(sortedMap);</span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    return resList;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>说明:上述程序不直接返回sortedMap，而是将其放入List中，是为了便于解析及防止架构上可能的重新排序（若返回map，可能会按map的key排序）。</p>"},{"title":"IDEA+Maven+SpringMVC+Hibernate环境搭建","date":"2017-03-20T06:09:10.000Z","_content":"\n>一篇十分详细的博文[地址](http://blog.lunhui.ren/archives/235)\n>[源码地址](https://git.coding.net/letra/MvcDemo.git)","source":"_posts/mvcdemo.md","raw":"---\ntitle: IDEA+Maven+SpringMVC+Hibernate环境搭建\ndate: 2017-03-20 14:09:10\ntags: \n\t- Java基础\ncategories:\n\t- 编程\n\t- Spring\n---\n\n>一篇十分详细的博文[地址](http://blog.lunhui.ren/archives/235)\n>[源码地址](https://git.coding.net/letra/MvcDemo.git)","slug":"mvcdemo","published":1,"updated":"2020-07-02T03:34:19.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcbttrbr0012wgtof8jw6v4y","content":"<blockquote>\n<p>一篇十分详细的博文<a href=\"http://blog.lunhui.ren/archives/235\" target=\"_blank\" rel=\"noopener\">地址</a><br><a href=\"https://git.coding.net/letra/MvcDemo.git\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>一篇十分详细的博文<a href=\"http://blog.lunhui.ren/archives/235\" target=\"_blank\" rel=\"noopener\">地址</a><br><a href=\"https://git.coding.net/letra/MvcDemo.git\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n</blockquote>\n"},{"title":"Centos6下redis安装配置","date":"2017-07-21T05:34:00.000Z","_content":">Remote Dictionary Server(Redis)\n>是一个由Salvatore Sanfilippo写的key-value存储系统。Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。\n>\n>它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Map),列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。\n\n<!--more-->\n\n### 1、安装需要的支持环境\n\n在安装Redis之前首要先做的是安装Unix的Tcl工具，如果不安装的话后期将无法对Redis进行测试。在后期执行make test的时候返回如下错误信息：You need tcl 8.xuyao de5 or newer in order to run the Redis test，具体的流程为：\n{% codeblock %}\ncd /usr/local/src\nwget http://downloads.sourceforge.net/tcl/tcl8.6.3-src.tar.gz\ntar -zxvf tcl8.6.3-src.tar.gz\ncd ​tcl8.6.3/unix/\n./configure\nmake\nmake install\n{% endcodeblock %}\n### 2、安装redis\n安装redis的过程非常的简单，具体教程官网也有。具体如下：http://redis.io/download\n{% codeblock %}\ncd /usr/local/src\nwget http://download.redis.io/releases/redis-4.0.0.tar.gz\ntar zxvf redis-2.8.19.tar.gz\ncd redis-2.8.19\nmake\nmake PREFIX=/usr/local/redis install\n{% endcodeblock %}\n其中PREFIX=/usr/local/redis可以省略，省略情况下redis会默认安装到/usr/local/bin目录下。\n### 3、测试Redis\n\tcd src\n\tmake test\n\t通过以上命令就可以对redis进行加大的测试。\n### 4、配置redis\n{% codeblock %}\n#拷贝并修改配置文档\ncp ./redis.conf /usr/local/redis/\nvim /usr/local/redis/redis.conf\n{% endcodeblock %}\n{% codeblock %}\n#我只修改了如下几项：\ndaemonize yes #redis将以守护进程的方式运行，默认为no会暂用你的终端\ntimeout 300​ #当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能\nrequirepass yourpassword #设置密码\n#bind 127.0.0.1 #限制了只能本地连接\n另外，设置密码后，使用redis-cli登录要带密码登录\n否则操作redis会出现身份认证的错误\n命令如下:\nredis-cli -a youPassword\n{% endcodeblock %}\n{% codeblock %}\n#B、启动或关闭服务\nservice redis start\nservice redis stop\n{% endcodeblock %}\n### 5、使用redis\n{% codeblock %}\n[root@localhost redis]# cd /usr/local/redis/bin\n[root@localhost bin]# ./redis-cli\n127.0.0.1:6379> set name cjs\nOK\n127.0.0.1:6379> get name\n\"cjs\"\n127.0.0.1:6379>\n{% endcodeblock %}\n### 6、java使用redis\n\n{% codeblock %}\n<!-- https://mvnrepository.com/artifact/redis.clients/jedis -->\n<dependency>\n    <groupId>redis.clients</groupId>\n    <artifactId>jedis</artifactId>\n    <version>2.9.0</version>\n</dependency>\n{% endcodeblock %}\n\tpublic final class RedisUtil {\n\n    //Redis服务器IP\n    private static String ADDR = \"***.***.***.***\";\n    \n    //Redis的端口号\n    private static int PORT = 6379;\n    \n    //访问密码\n    private static String AUTH = \"****\";\n    \n    //可用连接实例的最大数目，默认值为8；\n    //如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。\n    private static int MAX_ACTIVE = 1024;\n    \n    //控制一个pool最多有多少个状态为idle(空闲的)的jedis实例，默认值也是8。\n    private static int MAX_IDLE = 200;\n    \n    //等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。如果超过等待时间，则直接抛出JedisConnectionException；\n    private static int MAX_WAIT = 10000;\n    \n    private static int TIMEOUT = 10000;\n    \n    //在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的；\n    private static boolean TEST_ON_BORROW = true;\n    \n    private static JedisPool jedisPool = null;\n    \n    /**\n     * 初始化Redis连接池\n     */\n    static {\n        try {\n            JedisPoolConfig config = new JedisPoolConfig();\n    \t\tconfig.setMaxIdle(MAX_IDLE);\n    \t\t//jedis高版本JedisPoolConfig没有maxActive改名为：\n            config.setMaxTotal(MAX_ACTIVE);\n            config.setMaxWaitMillis(MAX_WAIT);\n            config.setTestOnBorrow(TEST_ON_BORROW);\n            jedisPool = new JedisPool(config, ADDR, PORT, TIMEOUT, AUTH);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n    \n    /**\n     * 获取Jedis实例\n     * @return\n     */\n    public synchronized static Jedis getJedis() {\n        try {\n            if (jedisPool != null) {\n                Jedis resource = jedisPool.getResource();\n                return resource;\n            } else {\n                return null;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n    \n    /**\n     * 释放jedis资源\n     * @param jedis\n     */\n    public static void returnResource(final Jedis jedis) {\n        if (jedis != null) {\n            jedisPool.returnResource(jedis);\n        }\n    }\n    }\n","source":"_posts/redis_install.md","raw":"---\ntitle: Centos6下redis安装配置\ndate: 2017-07-21 13:34:00\ntags:\n\t- Redis\ncategories:\n\t- 运维\n---\n>Remote Dictionary Server(Redis)\n>是一个由Salvatore Sanfilippo写的key-value存储系统。Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。\n>\n>它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Map),列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。\n\n<!--more-->\n\n### 1、安装需要的支持环境\n\n在安装Redis之前首要先做的是安装Unix的Tcl工具，如果不安装的话后期将无法对Redis进行测试。在后期执行make test的时候返回如下错误信息：You need tcl 8.xuyao de5 or newer in order to run the Redis test，具体的流程为：\n{% codeblock %}\ncd /usr/local/src\nwget http://downloads.sourceforge.net/tcl/tcl8.6.3-src.tar.gz\ntar -zxvf tcl8.6.3-src.tar.gz\ncd ​tcl8.6.3/unix/\n./configure\nmake\nmake install\n{% endcodeblock %}\n### 2、安装redis\n安装redis的过程非常的简单，具体教程官网也有。具体如下：http://redis.io/download\n{% codeblock %}\ncd /usr/local/src\nwget http://download.redis.io/releases/redis-4.0.0.tar.gz\ntar zxvf redis-2.8.19.tar.gz\ncd redis-2.8.19\nmake\nmake PREFIX=/usr/local/redis install\n{% endcodeblock %}\n其中PREFIX=/usr/local/redis可以省略，省略情况下redis会默认安装到/usr/local/bin目录下。\n### 3、测试Redis\n\tcd src\n\tmake test\n\t通过以上命令就可以对redis进行加大的测试。\n### 4、配置redis\n{% codeblock %}\n#拷贝并修改配置文档\ncp ./redis.conf /usr/local/redis/\nvim /usr/local/redis/redis.conf\n{% endcodeblock %}\n{% codeblock %}\n#我只修改了如下几项：\ndaemonize yes #redis将以守护进程的方式运行，默认为no会暂用你的终端\ntimeout 300​ #当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能\nrequirepass yourpassword #设置密码\n#bind 127.0.0.1 #限制了只能本地连接\n另外，设置密码后，使用redis-cli登录要带密码登录\n否则操作redis会出现身份认证的错误\n命令如下:\nredis-cli -a youPassword\n{% endcodeblock %}\n{% codeblock %}\n#B、启动或关闭服务\nservice redis start\nservice redis stop\n{% endcodeblock %}\n### 5、使用redis\n{% codeblock %}\n[root@localhost redis]# cd /usr/local/redis/bin\n[root@localhost bin]# ./redis-cli\n127.0.0.1:6379> set name cjs\nOK\n127.0.0.1:6379> get name\n\"cjs\"\n127.0.0.1:6379>\n{% endcodeblock %}\n### 6、java使用redis\n\n{% codeblock %}\n<!-- https://mvnrepository.com/artifact/redis.clients/jedis -->\n<dependency>\n    <groupId>redis.clients</groupId>\n    <artifactId>jedis</artifactId>\n    <version>2.9.0</version>\n</dependency>\n{% endcodeblock %}\n\tpublic final class RedisUtil {\n\n    //Redis服务器IP\n    private static String ADDR = \"***.***.***.***\";\n    \n    //Redis的端口号\n    private static int PORT = 6379;\n    \n    //访问密码\n    private static String AUTH = \"****\";\n    \n    //可用连接实例的最大数目，默认值为8；\n    //如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。\n    private static int MAX_ACTIVE = 1024;\n    \n    //控制一个pool最多有多少个状态为idle(空闲的)的jedis实例，默认值也是8。\n    private static int MAX_IDLE = 200;\n    \n    //等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。如果超过等待时间，则直接抛出JedisConnectionException；\n    private static int MAX_WAIT = 10000;\n    \n    private static int TIMEOUT = 10000;\n    \n    //在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的；\n    private static boolean TEST_ON_BORROW = true;\n    \n    private static JedisPool jedisPool = null;\n    \n    /**\n     * 初始化Redis连接池\n     */\n    static {\n        try {\n            JedisPoolConfig config = new JedisPoolConfig();\n    \t\tconfig.setMaxIdle(MAX_IDLE);\n    \t\t//jedis高版本JedisPoolConfig没有maxActive改名为：\n            config.setMaxTotal(MAX_ACTIVE);\n            config.setMaxWaitMillis(MAX_WAIT);\n            config.setTestOnBorrow(TEST_ON_BORROW);\n            jedisPool = new JedisPool(config, ADDR, PORT, TIMEOUT, AUTH);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n    \n    /**\n     * 获取Jedis实例\n     * @return\n     */\n    public synchronized static Jedis getJedis() {\n        try {\n            if (jedisPool != null) {\n                Jedis resource = jedisPool.getResource();\n                return resource;\n            } else {\n                return null;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n    \n    /**\n     * 释放jedis资源\n     * @param jedis\n     */\n    public static void returnResource(final Jedis jedis) {\n        if (jedis != null) {\n            jedisPool.returnResource(jedis);\n        }\n    }\n    }\n","slug":"redis_install","published":1,"updated":"2020-07-02T03:26:01.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcbttrbs0017wgto7rxc9bpk","content":"<blockquote>\n<p>Remote Dictionary Server(Redis)<br>是一个由Salvatore Sanfilippo写的key-value存储系统。Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p>\n<p>它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Map),列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"1、安装需要的支持环境\"><a href=\"#1、安装需要的支持环境\" class=\"headerlink\" title=\"1、安装需要的支持环境\"></a>1、安装需要的支持环境</h3><p>在安装Redis之前首要先做的是安装Unix的Tcl工具，如果不安装的话后期将无法对Redis进行测试。在后期执行make test的时候返回如下错误信息：You need tcl 8.xuyao de5 or newer in order to run the Redis test，具体的流程为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;local&#x2F;src</span><br><span class=\"line\">wget http:&#x2F;&#x2F;downloads.sourceforge.net&#x2F;tcl&#x2F;tcl8.6.3-src.tar.gz</span><br><span class=\"line\">tar -zxvf tcl8.6.3-src.tar.gz</span><br><span class=\"line\">cd ​tcl8.6.3&#x2F;unix&#x2F;</span><br><span class=\"line\">.&#x2F;configure</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、安装redis\"><a href=\"#2、安装redis\" class=\"headerlink\" title=\"2、安装redis\"></a>2、安装redis</h3><p>安装redis的过程非常的简单，具体教程官网也有。具体如下：<a href=\"http://redis.io/download\" target=\"_blank\" rel=\"noopener\">http://redis.io/download</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;local&#x2F;src</span><br><span class=\"line\">wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-4.0.0.tar.gz</span><br><span class=\"line\">tar zxvf redis-2.8.19.tar.gz</span><br><span class=\"line\">cd redis-2.8.19</span><br><span class=\"line\">make</span><br><span class=\"line\">make PREFIX&#x3D;&#x2F;usr&#x2F;local&#x2F;redis install</span><br></pre></td></tr></table></figure>\n<p>其中PREFIX=/usr/local/redis可以省略，省略情况下redis会默认安装到/usr/local/bin目录下。</p>\n<h3 id=\"3、测试Redis\"><a href=\"#3、测试Redis\" class=\"headerlink\" title=\"3、测试Redis\"></a>3、测试Redis</h3><pre><code>cd src\nmake test\n通过以上命令就可以对redis进行加大的测试。</code></pre><h3 id=\"4、配置redis\"><a href=\"#4、配置redis\" class=\"headerlink\" title=\"4、配置redis\"></a>4、配置redis</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#拷贝并修改配置文档</span><br><span class=\"line\">cp .&#x2F;redis.conf &#x2F;usr&#x2F;local&#x2F;redis&#x2F;</span><br><span class=\"line\">vim &#x2F;usr&#x2F;local&#x2F;redis&#x2F;redis.conf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#我只修改了如下几项：</span><br><span class=\"line\">daemonize yes #redis将以守护进程的方式运行，默认为no会暂用你的终端</span><br><span class=\"line\">timeout 300​ #当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</span><br><span class=\"line\">requirepass yourpassword #设置密码</span><br><span class=\"line\">#bind 127.0.0.1 #限制了只能本地连接</span><br><span class=\"line\">另外，设置密码后，使用redis-cli登录要带密码登录</span><br><span class=\"line\">否则操作redis会出现身份认证的错误</span><br><span class=\"line\">命令如下:</span><br><span class=\"line\">redis-cli -a youPassword</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#B、启动或关闭服务</span><br><span class=\"line\">service redis start</span><br><span class=\"line\">service redis stop</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、使用redis\"><a href=\"#5、使用redis\" class=\"headerlink\" title=\"5、使用redis\"></a>5、使用redis</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost redis]# cd &#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin</span><br><span class=\"line\">[root@localhost bin]# .&#x2F;redis-cli</span><br><span class=\"line\">127.0.0.1:6379&gt; set name cjs</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get name</span><br><span class=\"line\">&quot;cjs&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6、java使用redis\"><a href=\"#6、java使用redis\" class=\"headerlink\" title=\"6、java使用redis\"></a>6、java使用redis</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;redis.clients&#x2F;jedis --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;redis.clients&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jedis&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.9.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<pre><code>public final class RedisUtil {\n\n//Redis服务器IP\nprivate static String ADDR = &quot;***.***.***.***&quot;;\n\n//Redis的端口号\nprivate static int PORT = 6379;\n\n//访问密码\nprivate static String AUTH = &quot;****&quot;;\n\n//可用连接实例的最大数目，默认值为8；\n//如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。\nprivate static int MAX_ACTIVE = 1024;\n\n//控制一个pool最多有多少个状态为idle(空闲的)的jedis实例，默认值也是8。\nprivate static int MAX_IDLE = 200;\n\n//等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。如果超过等待时间，则直接抛出JedisConnectionException；\nprivate static int MAX_WAIT = 10000;\n\nprivate static int TIMEOUT = 10000;\n\n//在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的；\nprivate static boolean TEST_ON_BORROW = true;\n\nprivate static JedisPool jedisPool = null;\n\n/**\n * 初始化Redis连接池\n */\nstatic {\n    try {\n        JedisPoolConfig config = new JedisPoolConfig();\n        config.setMaxIdle(MAX_IDLE);\n        //jedis高版本JedisPoolConfig没有maxActive改名为：\n        config.setMaxTotal(MAX_ACTIVE);\n        config.setMaxWaitMillis(MAX_WAIT);\n        config.setTestOnBorrow(TEST_ON_BORROW);\n        jedisPool = new JedisPool(config, ADDR, PORT, TIMEOUT, AUTH);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n\n/**\n * 获取Jedis实例\n * @return\n */\npublic synchronized static Jedis getJedis() {\n    try {\n        if (jedisPool != null) {\n            Jedis resource = jedisPool.getResource();\n            return resource;\n        } else {\n            return null;\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        return null;\n    }\n}\n\n/**\n * 释放jedis资源\n * @param jedis\n */\npublic static void returnResource(final Jedis jedis) {\n    if (jedis != null) {\n        jedisPool.returnResource(jedis);\n    }\n}\n}</code></pre>","site":{"data":{}},"excerpt":"<blockquote>\n<p>Remote Dictionary Server(Redis)<br>是一个由Salvatore Sanfilippo写的key-value存储系统。Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p>\n<p>它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Map),列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。</p>\n</blockquote>","more":"<h3 id=\"1、安装需要的支持环境\"><a href=\"#1、安装需要的支持环境\" class=\"headerlink\" title=\"1、安装需要的支持环境\"></a>1、安装需要的支持环境</h3><p>在安装Redis之前首要先做的是安装Unix的Tcl工具，如果不安装的话后期将无法对Redis进行测试。在后期执行make test的时候返回如下错误信息：You need tcl 8.xuyao de5 or newer in order to run the Redis test，具体的流程为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;local&#x2F;src</span><br><span class=\"line\">wget http:&#x2F;&#x2F;downloads.sourceforge.net&#x2F;tcl&#x2F;tcl8.6.3-src.tar.gz</span><br><span class=\"line\">tar -zxvf tcl8.6.3-src.tar.gz</span><br><span class=\"line\">cd ​tcl8.6.3&#x2F;unix&#x2F;</span><br><span class=\"line\">.&#x2F;configure</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、安装redis\"><a href=\"#2、安装redis\" class=\"headerlink\" title=\"2、安装redis\"></a>2、安装redis</h3><p>安装redis的过程非常的简单，具体教程官网也有。具体如下：<a href=\"http://redis.io/download\" target=\"_blank\" rel=\"noopener\">http://redis.io/download</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;local&#x2F;src</span><br><span class=\"line\">wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-4.0.0.tar.gz</span><br><span class=\"line\">tar zxvf redis-2.8.19.tar.gz</span><br><span class=\"line\">cd redis-2.8.19</span><br><span class=\"line\">make</span><br><span class=\"line\">make PREFIX&#x3D;&#x2F;usr&#x2F;local&#x2F;redis install</span><br></pre></td></tr></table></figure>\n<p>其中PREFIX=/usr/local/redis可以省略，省略情况下redis会默认安装到/usr/local/bin目录下。</p>\n<h3 id=\"3、测试Redis\"><a href=\"#3、测试Redis\" class=\"headerlink\" title=\"3、测试Redis\"></a>3、测试Redis</h3><pre><code>cd src\nmake test\n通过以上命令就可以对redis进行加大的测试。</code></pre><h3 id=\"4、配置redis\"><a href=\"#4、配置redis\" class=\"headerlink\" title=\"4、配置redis\"></a>4、配置redis</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#拷贝并修改配置文档</span><br><span class=\"line\">cp .&#x2F;redis.conf &#x2F;usr&#x2F;local&#x2F;redis&#x2F;</span><br><span class=\"line\">vim &#x2F;usr&#x2F;local&#x2F;redis&#x2F;redis.conf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#我只修改了如下几项：</span><br><span class=\"line\">daemonize yes #redis将以守护进程的方式运行，默认为no会暂用你的终端</span><br><span class=\"line\">timeout 300​ #当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</span><br><span class=\"line\">requirepass yourpassword #设置密码</span><br><span class=\"line\">#bind 127.0.0.1 #限制了只能本地连接</span><br><span class=\"line\">另外，设置密码后，使用redis-cli登录要带密码登录</span><br><span class=\"line\">否则操作redis会出现身份认证的错误</span><br><span class=\"line\">命令如下:</span><br><span class=\"line\">redis-cli -a youPassword</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#B、启动或关闭服务</span><br><span class=\"line\">service redis start</span><br><span class=\"line\">service redis stop</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、使用redis\"><a href=\"#5、使用redis\" class=\"headerlink\" title=\"5、使用redis\"></a>5、使用redis</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost redis]# cd &#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin</span><br><span class=\"line\">[root@localhost bin]# .&#x2F;redis-cli</span><br><span class=\"line\">127.0.0.1:6379&gt; set name cjs</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get name</span><br><span class=\"line\">&quot;cjs&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6、java使用redis\"><a href=\"#6、java使用redis\" class=\"headerlink\" title=\"6、java使用redis\"></a>6、java使用redis</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;redis.clients&#x2F;jedis --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;redis.clients&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jedis&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.9.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<pre><code>public final class RedisUtil {\n\n//Redis服务器IP\nprivate static String ADDR = &quot;***.***.***.***&quot;;\n\n//Redis的端口号\nprivate static int PORT = 6379;\n\n//访问密码\nprivate static String AUTH = &quot;****&quot;;\n\n//可用连接实例的最大数目，默认值为8；\n//如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。\nprivate static int MAX_ACTIVE = 1024;\n\n//控制一个pool最多有多少个状态为idle(空闲的)的jedis实例，默认值也是8。\nprivate static int MAX_IDLE = 200;\n\n//等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。如果超过等待时间，则直接抛出JedisConnectionException；\nprivate static int MAX_WAIT = 10000;\n\nprivate static int TIMEOUT = 10000;\n\n//在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的；\nprivate static boolean TEST_ON_BORROW = true;\n\nprivate static JedisPool jedisPool = null;\n\n/**\n * 初始化Redis连接池\n */\nstatic {\n    try {\n        JedisPoolConfig config = new JedisPoolConfig();\n        config.setMaxIdle(MAX_IDLE);\n        //jedis高版本JedisPoolConfig没有maxActive改名为：\n        config.setMaxTotal(MAX_ACTIVE);\n        config.setMaxWaitMillis(MAX_WAIT);\n        config.setTestOnBorrow(TEST_ON_BORROW);\n        jedisPool = new JedisPool(config, ADDR, PORT, TIMEOUT, AUTH);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n\n/**\n * 获取Jedis实例\n * @return\n */\npublic synchronized static Jedis getJedis() {\n    try {\n        if (jedisPool != null) {\n            Jedis resource = jedisPool.getResource();\n            return resource;\n        } else {\n            return null;\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        return null;\n    }\n}\n\n/**\n * 释放jedis资源\n * @param jedis\n */\npublic static void returnResource(final Jedis jedis) {\n    if (jedis != null) {\n        jedisPool.returnResource(jedis);\n    }\n}\n}</code></pre>"},{"title":"VPS安装及配置nginx","date":"2017-01-04T05:43:14.000Z","_content":"\n反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。\n![](/img/articleImg/nginx.jpg)\n<!--more-->\n## 环境确认\n系统环境：Centos 6\n安装方式：源码编译安装 [几种Linux软件的安装方法](http://www.285868.com/a/xtjc/5635.html)\n安装位置：/usr/local/nginx\n## 安装前提\n在安装nginx前，需要确保系统安装了g++、gcc、openssl-devel、pcre-devel和zlib-devel软件。\n## 开始安装\n进入安装目录\n{% codeblock %}\n cd /usr/local/src\n{% endcodeblock %}\n### 安装pcre(用于Nginx的HTTP Rewrite 模块)\n>注：若使用wget方式下载安装包可能会出现地址变更导致下载失败。\n>另一种方式：xftp可进行文件传输，本地下载好安装包后，利用xftp传输即可。\n\n{% codeblock %}\ncd /usr/local/src \nwget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.38.tar.gz  \t   \ntar -zxvf pcre-8.38.tar.gz #解压文件\nmv pcre-8.38   pcre #修改解压后文件夹名称\ncd pcre\n./configure \t\t#准备编译\nmake & make install\t#编译及安装\n{% endcodeblock %}\n\n### 安装zilb(一个压缩和解压模块)\n{% codeblock %}\ncd /usr/local/src\nwget http://zlib.net/zlib-1.2.8.tar.gz\ntar -zxvf zlib-1.2.8.tar.gz\nmv zlib-1.2.8 zlib\ncd zlib\n./configure\nmake & make install\n{% endcodeblock %}\n### 安装SSl模块\n>openssl是为网络通信提供安全及数据完整性的一种安全协议，囊括了主要的密码算法、常用的密钥和证书封装管理功能以及SSL协议，并提供了丰富的应用程序供测试或其它目的使用。\n\n{% codeblock %}\ncd /usr/local/src\nwget http://www.openssl.org/source/openssl-1.0.1c.tar.gz\ntar -zxvf openssl-1.0.1c.tar.gz\nmv openssl-1.0.1c  openssl\n./config\nmake & make install\n{% endcodeblock %}\n\n### 安装Nginx\n{% codeblock %}\ncd /usr/local/src\nwget http://nginx.org/download/nginx-1.9.9.tar.gz\ntar -zxvf nginx-1.9.9.tar.gz\ncd nginx-1.9.9\n\n./configure --sbin-path=/usr/local/nginx \\\n--conf-path=/usr/local/nginx/nginx.conf \\\n--pid-path=/usr/local/nginx/nginx.pid \\\n--with-http_ssl_module \\\n--with-http_v2_module \\\n--with-pcre=/usr/local/src/pcre \\\n--with-zlib=/usr/local/src/zlib \\\n--with-openssl=/usr/local/src/openssl\n\nmake & make install\n\ncd /usr/local/nginx #进入nginx目录\nnginx\t\t\t\t#启动nginx\n{% endcodeblock %}\n启动后浏览器导航到http://IP 就可以看到默认的欢迎界面了\n\n### Nginx常用命令\n{% codeblock %}\n nginx -s stop停止nginx\n nginx 运行nginx\n nginx -s reload 重启nginx\n nginx -t 测试nginx\n{% endcodeblock %}\n### nginx加入到环境变量\n{% codeblock %}\n vim /etc/profile\n{% endcodeblock %}\n尾行添加\n{% codeblock %}\nPATH=$PATH:/usr/local/nginx #nginx安装目录\nexport PATH \n{% endcodeblock %}\n保存关闭后运行\n{% codeblock %}\n source /etc/profile\n{% endcodeblock %}\n### 修改网站默认根目录路径\n>网站默认根目录放在/usr/local/nginx/html\n\n{% codeblock %}\nvim /usr/local/nginx/conf/nginx.conf\n{% endcodeblock %}\n\n{% codeblock %}\nserver {\n\tlisten       80;\n\tserver_name  你的IP;\n\t#charset koi8-r;\n\n\t#access_log  logs/host.access.log  main;\n\tlocation / {\n\troot  /www/blog/public;\n\tindex index.html index.htm;\n\t}\n\t.\n\t.\n\t.\n}\n{% endcodeblock %}\nroot添加自己想要的根目录，重启nginx生效。","source":"_posts/vps-install-nginx.md","raw":"---\ntitle: VPS安装及配置nginx\ndate: 2017-01-04 13:43:14\ntags: \n\t- Nginx\ncategories:\n\t- 运维\n\t- Linux\t\n---\n\n反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。\n![](/img/articleImg/nginx.jpg)\n<!--more-->\n## 环境确认\n系统环境：Centos 6\n安装方式：源码编译安装 [几种Linux软件的安装方法](http://www.285868.com/a/xtjc/5635.html)\n安装位置：/usr/local/nginx\n## 安装前提\n在安装nginx前，需要确保系统安装了g++、gcc、openssl-devel、pcre-devel和zlib-devel软件。\n## 开始安装\n进入安装目录\n{% codeblock %}\n cd /usr/local/src\n{% endcodeblock %}\n### 安装pcre(用于Nginx的HTTP Rewrite 模块)\n>注：若使用wget方式下载安装包可能会出现地址变更导致下载失败。\n>另一种方式：xftp可进行文件传输，本地下载好安装包后，利用xftp传输即可。\n\n{% codeblock %}\ncd /usr/local/src \nwget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.38.tar.gz  \t   \ntar -zxvf pcre-8.38.tar.gz #解压文件\nmv pcre-8.38   pcre #修改解压后文件夹名称\ncd pcre\n./configure \t\t#准备编译\nmake & make install\t#编译及安装\n{% endcodeblock %}\n\n### 安装zilb(一个压缩和解压模块)\n{% codeblock %}\ncd /usr/local/src\nwget http://zlib.net/zlib-1.2.8.tar.gz\ntar -zxvf zlib-1.2.8.tar.gz\nmv zlib-1.2.8 zlib\ncd zlib\n./configure\nmake & make install\n{% endcodeblock %}\n### 安装SSl模块\n>openssl是为网络通信提供安全及数据完整性的一种安全协议，囊括了主要的密码算法、常用的密钥和证书封装管理功能以及SSL协议，并提供了丰富的应用程序供测试或其它目的使用。\n\n{% codeblock %}\ncd /usr/local/src\nwget http://www.openssl.org/source/openssl-1.0.1c.tar.gz\ntar -zxvf openssl-1.0.1c.tar.gz\nmv openssl-1.0.1c  openssl\n./config\nmake & make install\n{% endcodeblock %}\n\n### 安装Nginx\n{% codeblock %}\ncd /usr/local/src\nwget http://nginx.org/download/nginx-1.9.9.tar.gz\ntar -zxvf nginx-1.9.9.tar.gz\ncd nginx-1.9.9\n\n./configure --sbin-path=/usr/local/nginx \\\n--conf-path=/usr/local/nginx/nginx.conf \\\n--pid-path=/usr/local/nginx/nginx.pid \\\n--with-http_ssl_module \\\n--with-http_v2_module \\\n--with-pcre=/usr/local/src/pcre \\\n--with-zlib=/usr/local/src/zlib \\\n--with-openssl=/usr/local/src/openssl\n\nmake & make install\n\ncd /usr/local/nginx #进入nginx目录\nnginx\t\t\t\t#启动nginx\n{% endcodeblock %}\n启动后浏览器导航到http://IP 就可以看到默认的欢迎界面了\n\n### Nginx常用命令\n{% codeblock %}\n nginx -s stop停止nginx\n nginx 运行nginx\n nginx -s reload 重启nginx\n nginx -t 测试nginx\n{% endcodeblock %}\n### nginx加入到环境变量\n{% codeblock %}\n vim /etc/profile\n{% endcodeblock %}\n尾行添加\n{% codeblock %}\nPATH=$PATH:/usr/local/nginx #nginx安装目录\nexport PATH \n{% endcodeblock %}\n保存关闭后运行\n{% codeblock %}\n source /etc/profile\n{% endcodeblock %}\n### 修改网站默认根目录路径\n>网站默认根目录放在/usr/local/nginx/html\n\n{% codeblock %}\nvim /usr/local/nginx/conf/nginx.conf\n{% endcodeblock %}\n\n{% codeblock %}\nserver {\n\tlisten       80;\n\tserver_name  你的IP;\n\t#charset koi8-r;\n\n\t#access_log  logs/host.access.log  main;\n\tlocation / {\n\troot  /www/blog/public;\n\tindex index.html index.htm;\n\t}\n\t.\n\t.\n\t.\n}\n{% endcodeblock %}\nroot添加自己想要的根目录，重启nginx生效。","slug":"vps-install-nginx","published":1,"updated":"2020-07-02T03:35:07.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcbttrbt001awgto6vdm7cti","content":"<p>反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。<br><img src=\"/img/articleImg/nginx.jpg\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h2 id=\"环境确认\"><a href=\"#环境确认\" class=\"headerlink\" title=\"环境确认\"></a>环境确认</h2><p>系统环境：Centos 6<br>安装方式：源码编译安装 <a href=\"http://www.285868.com/a/xtjc/5635.html\" target=\"_blank\" rel=\"noopener\">几种Linux软件的安装方法</a><br>安装位置：/usr/local/nginx</p>\n<h2 id=\"安装前提\"><a href=\"#安装前提\" class=\"headerlink\" title=\"安装前提\"></a>安装前提</h2><p>在安装nginx前，需要确保系统安装了g++、gcc、openssl-devel、pcre-devel和zlib-devel软件。</p>\n<h2 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h2><p>进入安装目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;local&#x2F;src</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装pcre-用于Nginx的HTTP-Rewrite-模块\"><a href=\"#安装pcre-用于Nginx的HTTP-Rewrite-模块\" class=\"headerlink\" title=\"安装pcre(用于Nginx的HTTP Rewrite 模块)\"></a>安装pcre(用于Nginx的HTTP Rewrite 模块)</h3><blockquote>\n<p>注：若使用wget方式下载安装包可能会出现地址变更导致下载失败。<br>另一种方式：xftp可进行文件传输，本地下载好安装包后，利用xftp传输即可。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;local&#x2F;src </span><br><span class=\"line\">wget ftp:&#x2F;&#x2F;ftp.csx.cam.ac.uk&#x2F;pub&#x2F;software&#x2F;programming&#x2F;pcre&#x2F;pcre-8.38.tar.gz  \t   </span><br><span class=\"line\">tar -zxvf pcre-8.38.tar.gz #解压文件</span><br><span class=\"line\">mv pcre-8.38   pcre #修改解压后文件夹名称</span><br><span class=\"line\">cd pcre</span><br><span class=\"line\">.&#x2F;configure \t\t#准备编译</span><br><span class=\"line\">make &amp; make install\t#编译及安装</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装zilb-一个压缩和解压模块\"><a href=\"#安装zilb-一个压缩和解压模块\" class=\"headerlink\" title=\"安装zilb(一个压缩和解压模块)\"></a>安装zilb(一个压缩和解压模块)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;local&#x2F;src</span><br><span class=\"line\">wget http:&#x2F;&#x2F;zlib.net&#x2F;zlib-1.2.8.tar.gz</span><br><span class=\"line\">tar -zxvf zlib-1.2.8.tar.gz</span><br><span class=\"line\">mv zlib-1.2.8 zlib</span><br><span class=\"line\">cd zlib</span><br><span class=\"line\">.&#x2F;configure</span><br><span class=\"line\">make &amp; make install</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装SSl模块\"><a href=\"#安装SSl模块\" class=\"headerlink\" title=\"安装SSl模块\"></a>安装SSl模块</h3><blockquote>\n<p>openssl是为网络通信提供安全及数据完整性的一种安全协议，囊括了主要的密码算法、常用的密钥和证书封装管理功能以及SSL协议，并提供了丰富的应用程序供测试或其它目的使用。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;local&#x2F;src</span><br><span class=\"line\">wget http:&#x2F;&#x2F;www.openssl.org&#x2F;source&#x2F;openssl-1.0.1c.tar.gz</span><br><span class=\"line\">tar -zxvf openssl-1.0.1c.tar.gz</span><br><span class=\"line\">mv openssl-1.0.1c  openssl</span><br><span class=\"line\">.&#x2F;config</span><br><span class=\"line\">make &amp; make install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;local&#x2F;src</span><br><span class=\"line\">wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.9.9.tar.gz</span><br><span class=\"line\">tar -zxvf nginx-1.9.9.tar.gz</span><br><span class=\"line\">cd nginx-1.9.9</span><br><span class=\"line\"></span><br><span class=\"line\">.&#x2F;configure --sbin-path&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx \\</span><br><span class=\"line\">--conf-path&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx.conf \\</span><br><span class=\"line\">--pid-path&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx.pid \\</span><br><span class=\"line\">--with-http_ssl_module \\</span><br><span class=\"line\">--with-http_v2_module \\</span><br><span class=\"line\">--with-pcre&#x3D;&#x2F;usr&#x2F;local&#x2F;src&#x2F;pcre \\</span><br><span class=\"line\">--with-zlib&#x3D;&#x2F;usr&#x2F;local&#x2F;src&#x2F;zlib \\</span><br><span class=\"line\">--with-openssl&#x3D;&#x2F;usr&#x2F;local&#x2F;src&#x2F;openssl</span><br><span class=\"line\"></span><br><span class=\"line\">make &amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\">cd &#x2F;usr&#x2F;local&#x2F;nginx #进入nginx目录</span><br><span class=\"line\">nginx\t\t\t\t#启动nginx</span><br></pre></td></tr></table></figure>\n<p>启动后浏览器导航到<a href=\"http://IP\" target=\"_blank\" rel=\"noopener\">http://IP</a> 就可以看到默认的欢迎界面了</p>\n<h3 id=\"Nginx常用命令\"><a href=\"#Nginx常用命令\" class=\"headerlink\" title=\"Nginx常用命令\"></a>Nginx常用命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s stop停止nginx</span><br><span class=\"line\">nginx 运行nginx</span><br><span class=\"line\">nginx -s reload 重启nginx</span><br><span class=\"line\">nginx -t 测试nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"nginx加入到环境变量\"><a href=\"#nginx加入到环境变量\" class=\"headerlink\" title=\"nginx加入到环境变量\"></a>nginx加入到环境变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>\n<p>尾行添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;nginx #nginx安装目录</span><br><span class=\"line\">export PATH </span><br></pre></td></tr></table></figure>\n<p>保存关闭后运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改网站默认根目录路径\"><a href=\"#修改网站默认根目录路径\" class=\"headerlink\" title=\"修改网站默认根目录路径\"></a>修改网站默认根目录路径</h3><blockquote>\n<p>网站默认根目录放在/usr/local/nginx/html</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">\tlisten       80;</span><br><span class=\"line\">\tserver_name  你的IP;</span><br><span class=\"line\">\t#charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">\t#access_log  logs&#x2F;host.access.log  main;</span><br><span class=\"line\">\tlocation &#x2F; &#123;</span><br><span class=\"line\">\troot  &#x2F;www&#x2F;blog&#x2F;public;</span><br><span class=\"line\">\tindex index.html index.htm;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t.</span><br><span class=\"line\">\t.</span><br><span class=\"line\">\t.</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>root添加自己想要的根目录，重启nginx生效。</p>\n","site":{"data":{}},"excerpt":"<p>反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。<br><img src=\"/img/articleImg/nginx.jpg\" alt=\"\"></p>","more":"<h2 id=\"环境确认\"><a href=\"#环境确认\" class=\"headerlink\" title=\"环境确认\"></a>环境确认</h2><p>系统环境：Centos 6<br>安装方式：源码编译安装 <a href=\"http://www.285868.com/a/xtjc/5635.html\" target=\"_blank\" rel=\"noopener\">几种Linux软件的安装方法</a><br>安装位置：/usr/local/nginx</p>\n<h2 id=\"安装前提\"><a href=\"#安装前提\" class=\"headerlink\" title=\"安装前提\"></a>安装前提</h2><p>在安装nginx前，需要确保系统安装了g++、gcc、openssl-devel、pcre-devel和zlib-devel软件。</p>\n<h2 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h2><p>进入安装目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;local&#x2F;src</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装pcre-用于Nginx的HTTP-Rewrite-模块\"><a href=\"#安装pcre-用于Nginx的HTTP-Rewrite-模块\" class=\"headerlink\" title=\"安装pcre(用于Nginx的HTTP Rewrite 模块)\"></a>安装pcre(用于Nginx的HTTP Rewrite 模块)</h3><blockquote>\n<p>注：若使用wget方式下载安装包可能会出现地址变更导致下载失败。<br>另一种方式：xftp可进行文件传输，本地下载好安装包后，利用xftp传输即可。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;local&#x2F;src </span><br><span class=\"line\">wget ftp:&#x2F;&#x2F;ftp.csx.cam.ac.uk&#x2F;pub&#x2F;software&#x2F;programming&#x2F;pcre&#x2F;pcre-8.38.tar.gz  \t   </span><br><span class=\"line\">tar -zxvf pcre-8.38.tar.gz #解压文件</span><br><span class=\"line\">mv pcre-8.38   pcre #修改解压后文件夹名称</span><br><span class=\"line\">cd pcre</span><br><span class=\"line\">.&#x2F;configure \t\t#准备编译</span><br><span class=\"line\">make &amp; make install\t#编译及安装</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装zilb-一个压缩和解压模块\"><a href=\"#安装zilb-一个压缩和解压模块\" class=\"headerlink\" title=\"安装zilb(一个压缩和解压模块)\"></a>安装zilb(一个压缩和解压模块)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;local&#x2F;src</span><br><span class=\"line\">wget http:&#x2F;&#x2F;zlib.net&#x2F;zlib-1.2.8.tar.gz</span><br><span class=\"line\">tar -zxvf zlib-1.2.8.tar.gz</span><br><span class=\"line\">mv zlib-1.2.8 zlib</span><br><span class=\"line\">cd zlib</span><br><span class=\"line\">.&#x2F;configure</span><br><span class=\"line\">make &amp; make install</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装SSl模块\"><a href=\"#安装SSl模块\" class=\"headerlink\" title=\"安装SSl模块\"></a>安装SSl模块</h3><blockquote>\n<p>openssl是为网络通信提供安全及数据完整性的一种安全协议，囊括了主要的密码算法、常用的密钥和证书封装管理功能以及SSL协议，并提供了丰富的应用程序供测试或其它目的使用。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;local&#x2F;src</span><br><span class=\"line\">wget http:&#x2F;&#x2F;www.openssl.org&#x2F;source&#x2F;openssl-1.0.1c.tar.gz</span><br><span class=\"line\">tar -zxvf openssl-1.0.1c.tar.gz</span><br><span class=\"line\">mv openssl-1.0.1c  openssl</span><br><span class=\"line\">.&#x2F;config</span><br><span class=\"line\">make &amp; make install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;local&#x2F;src</span><br><span class=\"line\">wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.9.9.tar.gz</span><br><span class=\"line\">tar -zxvf nginx-1.9.9.tar.gz</span><br><span class=\"line\">cd nginx-1.9.9</span><br><span class=\"line\"></span><br><span class=\"line\">.&#x2F;configure --sbin-path&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx \\</span><br><span class=\"line\">--conf-path&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx.conf \\</span><br><span class=\"line\">--pid-path&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx.pid \\</span><br><span class=\"line\">--with-http_ssl_module \\</span><br><span class=\"line\">--with-http_v2_module \\</span><br><span class=\"line\">--with-pcre&#x3D;&#x2F;usr&#x2F;local&#x2F;src&#x2F;pcre \\</span><br><span class=\"line\">--with-zlib&#x3D;&#x2F;usr&#x2F;local&#x2F;src&#x2F;zlib \\</span><br><span class=\"line\">--with-openssl&#x3D;&#x2F;usr&#x2F;local&#x2F;src&#x2F;openssl</span><br><span class=\"line\"></span><br><span class=\"line\">make &amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\">cd &#x2F;usr&#x2F;local&#x2F;nginx #进入nginx目录</span><br><span class=\"line\">nginx\t\t\t\t#启动nginx</span><br></pre></td></tr></table></figure>\n<p>启动后浏览器导航到<a href=\"http://IP\" target=\"_blank\" rel=\"noopener\">http://IP</a> 就可以看到默认的欢迎界面了</p>\n<h3 id=\"Nginx常用命令\"><a href=\"#Nginx常用命令\" class=\"headerlink\" title=\"Nginx常用命令\"></a>Nginx常用命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s stop停止nginx</span><br><span class=\"line\">nginx 运行nginx</span><br><span class=\"line\">nginx -s reload 重启nginx</span><br><span class=\"line\">nginx -t 测试nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"nginx加入到环境变量\"><a href=\"#nginx加入到环境变量\" class=\"headerlink\" title=\"nginx加入到环境变量\"></a>nginx加入到环境变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>\n<p>尾行添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;nginx #nginx安装目录</span><br><span class=\"line\">export PATH </span><br></pre></td></tr></table></figure>\n<p>保存关闭后运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改网站默认根目录路径\"><a href=\"#修改网站默认根目录路径\" class=\"headerlink\" title=\"修改网站默认根目录路径\"></a>修改网站默认根目录路径</h3><blockquote>\n<p>网站默认根目录放在/usr/local/nginx/html</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">\tlisten       80;</span><br><span class=\"line\">\tserver_name  你的IP;</span><br><span class=\"line\">\t#charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">\t#access_log  logs&#x2F;host.access.log  main;</span><br><span class=\"line\">\tlocation &#x2F; &#123;</span><br><span class=\"line\">\troot  &#x2F;www&#x2F;blog&#x2F;public;</span><br><span class=\"line\">\tindex index.html index.htm;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t.</span><br><span class=\"line\">\t.</span><br><span class=\"line\">\t.</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>root添加自己想要的根目录，重启nginx生效。</p>"},{"title":"springmvc导出Excel问题记录","date":"2017-03-31T08:18:15.000Z","_content":">SpringMVC中获取不到POST形式的参数\n>这是form表单的enctype编码方式不同导致的enctype属性规定在发送到服务器之前,应该如何\n>对表单数据进行编码。默认地，表单数据会编码为\"application/x-www-form-urlencoded\"。\n>就是说，在发送到服务器之前,所有字符都会进行编码（空格转换为 \"+\" 加号，特殊符号转换为\n>ASCII HEX 值）。如果使用GET，则强制使用application/x-www-form-urlencoded\"方式。\n>但代码里强制使用了multipart/form-data方式。\n\n<!--more-->\n所以spring mvc如果要接收 multipart/form-data 传输的数据，应该在spring上下文配置：\n{% codeblock %}\n<bean id=\"multipartResolver\" class=\"org.springframework.web.multipart.commons.CommonsMultipartResolver\">       \n</bean>\n{% endcodeblock %}\n并将commons-fileupload-1.3.2jar包引入到项目中\n{% codeblock %}\n<!-- POI导出Exl -->\n<dependency>\n   <groupId>org.apache.poi</groupId>\n   <artifactId>poi-ooxml</artifactId>\n   <version>3.9</version>\n</dependency>\n<dependency>\n   <groupId>commons-fileupload</groupId>\n   <artifactId>commons-fileupload</artifactId>\n   <version>1.3.2</version>\n</dependency>\n{% endcodeblock %}\n这样服务端就既可以接收multipart/form-data 传输的数据，也可以接收application/x-www-form-urlencoded传输的文本数据了。\n\n注：此问题是在上一个项目[git地址](https://coding.net/u/letra/p/mvcdemo/git)的基础上新增了导出Ecxel功能是发现，在此记录一二。","source":"_posts/springmvcPost.md","raw":"---\ntitle: springmvc导出Excel问题记录\ndate: 2017-03-31 16:18:15\ntags: \n\t- Java基础\ncategories:\n\t- 编程\n\t- Java\t\n---\n>SpringMVC中获取不到POST形式的参数\n>这是form表单的enctype编码方式不同导致的enctype属性规定在发送到服务器之前,应该如何\n>对表单数据进行编码。默认地，表单数据会编码为\"application/x-www-form-urlencoded\"。\n>就是说，在发送到服务器之前,所有字符都会进行编码（空格转换为 \"+\" 加号，特殊符号转换为\n>ASCII HEX 值）。如果使用GET，则强制使用application/x-www-form-urlencoded\"方式。\n>但代码里强制使用了multipart/form-data方式。\n\n<!--more-->\n所以spring mvc如果要接收 multipart/form-data 传输的数据，应该在spring上下文配置：\n{% codeblock %}\n<bean id=\"multipartResolver\" class=\"org.springframework.web.multipart.commons.CommonsMultipartResolver\">       \n</bean>\n{% endcodeblock %}\n并将commons-fileupload-1.3.2jar包引入到项目中\n{% codeblock %}\n<!-- POI导出Exl -->\n<dependency>\n   <groupId>org.apache.poi</groupId>\n   <artifactId>poi-ooxml</artifactId>\n   <version>3.9</version>\n</dependency>\n<dependency>\n   <groupId>commons-fileupload</groupId>\n   <artifactId>commons-fileupload</artifactId>\n   <version>1.3.2</version>\n</dependency>\n{% endcodeblock %}\n这样服务端就既可以接收multipart/form-data 传输的数据，也可以接收application/x-www-form-urlencoded传输的文本数据了。\n\n注：此问题是在上一个项目[git地址](https://coding.net/u/letra/p/mvcdemo/git)的基础上新增了导出Ecxel功能是发现，在此记录一二。","slug":"springmvcPost","published":1,"updated":"2020-07-02T03:34:52.962Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcbttrbu001fwgtoa80w1v81","content":"<blockquote>\n<p>SpringMVC中获取不到POST形式的参数<br>这是form表单的enctype编码方式不同导致的enctype属性规定在发送到服务器之前,应该如何<br>对表单数据进行编码。默认地，表单数据会编码为”application/x-www-form-urlencoded”。<br>就是说，在发送到服务器之前,所有字符都会进行编码（空格转换为 “+” 加号，特殊符号转换为<br>ASCII HEX 值）。如果使用GET，则强制使用application/x-www-form-urlencoded”方式。<br>但代码里强制使用了multipart/form-data方式。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>所以spring mvc如果要接收 multipart/form-data 传输的数据，应该在spring上下文配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id&#x3D;&quot;multipartResolver&quot; class&#x3D;&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;       </span><br><span class=\"line\">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>\n<p>并将commons-fileupload-1.3.2jar包引入到项目中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- POI导出Exl --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;org.apache.poi&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;poi-ooxml&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">   &lt;version&gt;3.9&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;commons-fileupload&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;commons-fileupload&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">   &lt;version&gt;1.3.2&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>这样服务端就既可以接收multipart/form-data 传输的数据，也可以接收application/x-www-form-urlencoded传输的文本数据了。</p>\n<p>注：此问题是在上一个项目<a href=\"https://coding.net/u/letra/p/mvcdemo/git\" target=\"_blank\" rel=\"noopener\">git地址</a>的基础上新增了导出Ecxel功能是发现，在此记录一二。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>SpringMVC中获取不到POST形式的参数<br>这是form表单的enctype编码方式不同导致的enctype属性规定在发送到服务器之前,应该如何<br>对表单数据进行编码。默认地，表单数据会编码为”application/x-www-form-urlencoded”。<br>就是说，在发送到服务器之前,所有字符都会进行编码（空格转换为 “+” 加号，特殊符号转换为<br>ASCII HEX 值）。如果使用GET，则强制使用application/x-www-form-urlencoded”方式。<br>但代码里强制使用了multipart/form-data方式。</p>\n</blockquote>","more":"<p>所以spring mvc如果要接收 multipart/form-data 传输的数据，应该在spring上下文配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id&#x3D;&quot;multipartResolver&quot; class&#x3D;&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;       </span><br><span class=\"line\">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>\n<p>并将commons-fileupload-1.3.2jar包引入到项目中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- POI导出Exl --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;org.apache.poi&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;poi-ooxml&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">   &lt;version&gt;3.9&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;commons-fileupload&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;commons-fileupload&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">   &lt;version&gt;1.3.2&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>这样服务端就既可以接收multipart/form-data 传输的数据，也可以接收application/x-www-form-urlencoded传输的文本数据了。</p>\n<p>注：此问题是在上一个项目<a href=\"https://coding.net/u/letra/p/mvcdemo/git\" target=\"_blank\" rel=\"noopener\">git地址</a>的基础上新增了导出Ecxel功能是发现，在此记录一二。</p>"},{"title":"hexo自动部署至VPS","date":"2017-03-03T06:14:15.000Z","_content":"之前每次写好一篇博文后，都是傻傻的打包利用Xftp手动传至VPS中。简直就是一个字“low~”。自从利用webhook实现自动部署后，腰不酸了，腿不疼了，可以扛两袋米一口气上五楼了~o(￣▽￣)o~ (小装一波~)。\n>最终实现：自己电脑上新建文章后，hexo clean && hexo g -d 即可。\n>实现原理：\n>1.hexo 提交代码渲染后文件至远程仓库(coding)\n>2.coding中对应项目配置webhook发送执行请求\n>3.vps 接收指定请求执行脚本(拉取最新代码)\n<!--more-->\n\n操作分为本机上和vps上的操作。\n### hexo本地配置及部署\n>hexo是基于nodejs开发的，npm是nodejs的包管理工具\n>git用于部署代码\n>所以首页应确认本机环境：git，node.js环境\n>git,node.js安装可另查资料\n\n{% codeblock %}\n#安装hexo命令行工具\nnpm install hexo-cli -g\n#创建blog目录，并初始化hexo项目\nhexo init blog\ncd blog\nhexo new \"My First Post\"\n#生成相关静态文件\nhexo g\n#启动本地服务，查看效果（http://localhost:4000）\nhexo server\n{% endcodeblock %}\n\nhexo的git配置，hexo根目录下_config.yml文件中\n{% codeblock %}\ndeploy:\n  type: git\n  message: update\n  repo: git@git.coding.net:letra/hexo.git \n{% endcodeblock %}\n{% codeblock %}\n#代码部署\nhexo deploy\n{% endcodeblock %}\n如果正确，然后在你的远程Git仓库中就有了hexo项目的相关文件了\n重点来了！！！\n### 远程仓库配置WebHooks\n![](/img/articleImg/webhook.png)\n这张图的配置的意思是：当仓库发生push的时候，会发送一个请求到http://karson.cc:4002/webhooks/push/123456。\n\n为了服务端的简易处理，这里没有使用token，而是将url地址当做token，123456就充当了token的角色。\n\n到这，仓库这边的配置就完成了，接下来的问题就是服务器如何接收这个请求并重新部署hexo了。\n\n### VPS相关配置\n在hexo目录中新建webhook.js,内容如下：\n{% codeblock %}\nvar http = require('http')\nvar exec = require('child_process').exec\nhttp.createServer(function (req, res) {\n#该路径与WebHooks中的路径部分需要完全匹配，实现简易的授权认证。\nif(req.url === '/webhooks/push/123456'){\n#如果url匹配，表示认证通过，则执行 sh ./deploy.sh\nexec('sh ./deploy.sh')\n}\nres.end()\n}).listen(4002)\n{% endcodeblock %}\n这段代码就能启动一个nodejs服务，监听4002端口。\n当请求过来的url完全匹配的时候，执行deploy.sh。\n再新建一个文件deploy.sh处理部署相关脚本，内容如下：\n{% codeblock %}\ngit pull origin master\n{% endcodeblock %}\n然后在服务器中启动nodejs服务监听webhooks\n使用PM2执行脚本[PM2](http://www.cnblogs.com/zhongweiv/p/pm2.html)\n{% codeblock %}\nnpm install pm2 -g\npm2 start webhook.js\n{% endcodeblock %}\n然后可以在本机中hexo d 命令，vps就会自动更新hexo文件了...","source":"_posts/webhook.md","raw":"---\ntitle: hexo自动部署至VPS\ndate: 2017-03-03 14:14:15\ntags:\n\t- Git\n\t- Webhook\ncategories: [运维,其他]\n---\n之前每次写好一篇博文后，都是傻傻的打包利用Xftp手动传至VPS中。简直就是一个字“low~”。自从利用webhook实现自动部署后，腰不酸了，腿不疼了，可以扛两袋米一口气上五楼了~o(￣▽￣)o~ (小装一波~)。\n>最终实现：自己电脑上新建文章后，hexo clean && hexo g -d 即可。\n>实现原理：\n>1.hexo 提交代码渲染后文件至远程仓库(coding)\n>2.coding中对应项目配置webhook发送执行请求\n>3.vps 接收指定请求执行脚本(拉取最新代码)\n<!--more-->\n\n操作分为本机上和vps上的操作。\n### hexo本地配置及部署\n>hexo是基于nodejs开发的，npm是nodejs的包管理工具\n>git用于部署代码\n>所以首页应确认本机环境：git，node.js环境\n>git,node.js安装可另查资料\n\n{% codeblock %}\n#安装hexo命令行工具\nnpm install hexo-cli -g\n#创建blog目录，并初始化hexo项目\nhexo init blog\ncd blog\nhexo new \"My First Post\"\n#生成相关静态文件\nhexo g\n#启动本地服务，查看效果（http://localhost:4000）\nhexo server\n{% endcodeblock %}\n\nhexo的git配置，hexo根目录下_config.yml文件中\n{% codeblock %}\ndeploy:\n  type: git\n  message: update\n  repo: git@git.coding.net:letra/hexo.git \n{% endcodeblock %}\n{% codeblock %}\n#代码部署\nhexo deploy\n{% endcodeblock %}\n如果正确，然后在你的远程Git仓库中就有了hexo项目的相关文件了\n重点来了！！！\n### 远程仓库配置WebHooks\n![](/img/articleImg/webhook.png)\n这张图的配置的意思是：当仓库发生push的时候，会发送一个请求到http://karson.cc:4002/webhooks/push/123456。\n\n为了服务端的简易处理，这里没有使用token，而是将url地址当做token，123456就充当了token的角色。\n\n到这，仓库这边的配置就完成了，接下来的问题就是服务器如何接收这个请求并重新部署hexo了。\n\n### VPS相关配置\n在hexo目录中新建webhook.js,内容如下：\n{% codeblock %}\nvar http = require('http')\nvar exec = require('child_process').exec\nhttp.createServer(function (req, res) {\n#该路径与WebHooks中的路径部分需要完全匹配，实现简易的授权认证。\nif(req.url === '/webhooks/push/123456'){\n#如果url匹配，表示认证通过，则执行 sh ./deploy.sh\nexec('sh ./deploy.sh')\n}\nres.end()\n}).listen(4002)\n{% endcodeblock %}\n这段代码就能启动一个nodejs服务，监听4002端口。\n当请求过来的url完全匹配的时候，执行deploy.sh。\n再新建一个文件deploy.sh处理部署相关脚本，内容如下：\n{% codeblock %}\ngit pull origin master\n{% endcodeblock %}\n然后在服务器中启动nodejs服务监听webhooks\n使用PM2执行脚本[PM2](http://www.cnblogs.com/zhongweiv/p/pm2.html)\n{% codeblock %}\nnpm install pm2 -g\npm2 start webhook.js\n{% endcodeblock %}\n然后可以在本机中hexo d 命令，vps就会自动更新hexo文件了...","slug":"webhook","published":1,"updated":"2020-07-02T03:38:14.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcbttrbv001iwgto4u3xee3l","content":"<p>之前每次写好一篇博文后，都是傻傻的打包利用Xftp手动传至VPS中。简直就是一个字“low<del>”。自从利用webhook实现自动部署后，腰不酸了，腿不疼了，可以扛两袋米一口气上五楼了</del>o(￣▽￣)o~ (小装一波~)。</p>\n<blockquote>\n<p>最终实现：自己电脑上新建文章后，hexo clean &amp;&amp; hexo g -d 即可。<br>实现原理：<br>1.hexo 提交代码渲染后文件至远程仓库(coding)<br>2.coding中对应项目配置webhook发送执行请求<br>3.vps 接收指定请求执行脚本(拉取最新代码)</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>操作分为本机上和vps上的操作。</p>\n<h3 id=\"hexo本地配置及部署\"><a href=\"#hexo本地配置及部署\" class=\"headerlink\" title=\"hexo本地配置及部署\"></a>hexo本地配置及部署</h3><blockquote>\n<p>hexo是基于nodejs开发的，npm是nodejs的包管理工具<br>git用于部署代码<br>所以首页应确认本机环境：git，node.js环境<br>git,node.js安装可另查资料</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装hexo命令行工具</span><br><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\">#创建blog目录，并初始化hexo项目</span><br><span class=\"line\">hexo init blog</span><br><span class=\"line\">cd blog</span><br><span class=\"line\">hexo new &quot;My First Post&quot;</span><br><span class=\"line\">#生成相关静态文件</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">#启动本地服务，查看效果（http:&#x2F;&#x2F;localhost:4000）</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n\n<p>hexo的git配置，hexo根目录下_config.yml文件中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  message: update</span><br><span class=\"line\">  repo: git@git.coding.net:letra&#x2F;hexo.git </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#代码部署</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<p>如果正确，然后在你的远程Git仓库中就有了hexo项目的相关文件了<br>重点来了！！！</p>\n<h3 id=\"远程仓库配置WebHooks\"><a href=\"#远程仓库配置WebHooks\" class=\"headerlink\" title=\"远程仓库配置WebHooks\"></a>远程仓库配置WebHooks</h3><p><img src=\"/img/articleImg/webhook.png\" alt=\"\"><br>这张图的配置的意思是：当仓库发生push的时候，会发送一个请求到<a href=\"http://karson.cc:4002/webhooks/push/123456。\" target=\"_blank\" rel=\"noopener\">http://karson.cc:4002/webhooks/push/123456。</a></p>\n<p>为了服务端的简易处理，这里没有使用token，而是将url地址当做token，123456就充当了token的角色。</p>\n<p>到这，仓库这边的配置就完成了，接下来的问题就是服务器如何接收这个请求并重新部署hexo了。</p>\n<h3 id=\"VPS相关配置\"><a href=\"#VPS相关配置\" class=\"headerlink\" title=\"VPS相关配置\"></a>VPS相关配置</h3><p>在hexo目录中新建webhook.js,内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http &#x3D; require(&#39;http&#39;)</span><br><span class=\"line\">var exec &#x3D; require(&#39;child_process&#39;).exec</span><br><span class=\"line\">http.createServer(function (req, res) &#123;</span><br><span class=\"line\">#该路径与WebHooks中的路径部分需要完全匹配，实现简易的授权认证。</span><br><span class=\"line\">if(req.url &#x3D;&#x3D;&#x3D; &#39;&#x2F;webhooks&#x2F;push&#x2F;123456&#39;)&#123;</span><br><span class=\"line\">#如果url匹配，表示认证通过，则执行 sh .&#x2F;deploy.sh</span><br><span class=\"line\">exec(&#39;sh .&#x2F;deploy.sh&#39;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">res.end()</span><br><span class=\"line\">&#125;).listen(4002)</span><br></pre></td></tr></table></figure>\n<p>这段代码就能启动一个nodejs服务，监听4002端口。<br>当请求过来的url完全匹配的时候，执行deploy.sh。<br>再新建一个文件deploy.sh处理部署相关脚本，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure>\n<p>然后在服务器中启动nodejs服务监听webhooks<br>使用PM2执行脚本<a href=\"http://www.cnblogs.com/zhongweiv/p/pm2.html\" target=\"_blank\" rel=\"noopener\">PM2</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install pm2 -g</span><br><span class=\"line\">pm2 start webhook.js</span><br></pre></td></tr></table></figure>\n<p>然后可以在本机中hexo d 命令，vps就会自动更新hexo文件了…</p>\n","site":{"data":{}},"excerpt":"<p>之前每次写好一篇博文后，都是傻傻的打包利用Xftp手动传至VPS中。简直就是一个字“low<del>”。自从利用webhook实现自动部署后，腰不酸了，腿不疼了，可以扛两袋米一口气上五楼了</del>o(￣▽￣)o~ (小装一波~)。</p>\n<blockquote>\n<p>最终实现：自己电脑上新建文章后，hexo clean &amp;&amp; hexo g -d 即可。<br>实现原理：<br>1.hexo 提交代码渲染后文件至远程仓库(coding)<br>2.coding中对应项目配置webhook发送执行请求<br>3.vps 接收指定请求执行脚本(拉取最新代码)</p>\n</blockquote>","more":"<p>操作分为本机上和vps上的操作。</p>\n<h3 id=\"hexo本地配置及部署\"><a href=\"#hexo本地配置及部署\" class=\"headerlink\" title=\"hexo本地配置及部署\"></a>hexo本地配置及部署</h3><blockquote>\n<p>hexo是基于nodejs开发的，npm是nodejs的包管理工具<br>git用于部署代码<br>所以首页应确认本机环境：git，node.js环境<br>git,node.js安装可另查资料</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装hexo命令行工具</span><br><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\">#创建blog目录，并初始化hexo项目</span><br><span class=\"line\">hexo init blog</span><br><span class=\"line\">cd blog</span><br><span class=\"line\">hexo new &quot;My First Post&quot;</span><br><span class=\"line\">#生成相关静态文件</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">#启动本地服务，查看效果（http:&#x2F;&#x2F;localhost:4000）</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n\n<p>hexo的git配置，hexo根目录下_config.yml文件中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  message: update</span><br><span class=\"line\">  repo: git@git.coding.net:letra&#x2F;hexo.git </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#代码部署</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<p>如果正确，然后在你的远程Git仓库中就有了hexo项目的相关文件了<br>重点来了！！！</p>\n<h3 id=\"远程仓库配置WebHooks\"><a href=\"#远程仓库配置WebHooks\" class=\"headerlink\" title=\"远程仓库配置WebHooks\"></a>远程仓库配置WebHooks</h3><p><img src=\"/img/articleImg/webhook.png\" alt=\"\"><br>这张图的配置的意思是：当仓库发生push的时候，会发送一个请求到<a href=\"http://karson.cc:4002/webhooks/push/123456。\" target=\"_blank\" rel=\"noopener\">http://karson.cc:4002/webhooks/push/123456。</a></p>\n<p>为了服务端的简易处理，这里没有使用token，而是将url地址当做token，123456就充当了token的角色。</p>\n<p>到这，仓库这边的配置就完成了，接下来的问题就是服务器如何接收这个请求并重新部署hexo了。</p>\n<h3 id=\"VPS相关配置\"><a href=\"#VPS相关配置\" class=\"headerlink\" title=\"VPS相关配置\"></a>VPS相关配置</h3><p>在hexo目录中新建webhook.js,内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http &#x3D; require(&#39;http&#39;)</span><br><span class=\"line\">var exec &#x3D; require(&#39;child_process&#39;).exec</span><br><span class=\"line\">http.createServer(function (req, res) &#123;</span><br><span class=\"line\">#该路径与WebHooks中的路径部分需要完全匹配，实现简易的授权认证。</span><br><span class=\"line\">if(req.url &#x3D;&#x3D;&#x3D; &#39;&#x2F;webhooks&#x2F;push&#x2F;123456&#39;)&#123;</span><br><span class=\"line\">#如果url匹配，表示认证通过，则执行 sh .&#x2F;deploy.sh</span><br><span class=\"line\">exec(&#39;sh .&#x2F;deploy.sh&#39;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">res.end()</span><br><span class=\"line\">&#125;).listen(4002)</span><br></pre></td></tr></table></figure>\n<p>这段代码就能启动一个nodejs服务，监听4002端口。<br>当请求过来的url完全匹配的时候，执行deploy.sh。<br>再新建一个文件deploy.sh处理部署相关脚本，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure>\n<p>然后在服务器中启动nodejs服务监听webhooks<br>使用PM2执行脚本<a href=\"http://www.cnblogs.com/zhongweiv/p/pm2.html\" target=\"_blank\" rel=\"noopener\">PM2</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install pm2 -g</span><br><span class=\"line\">pm2 start webhook.js</span><br></pre></td></tr></table></figure>\n<p>然后可以在本机中hexo d 命令，vps就会自动更新hexo文件了…</p>"},{"title":"VPS搭建多端口VPN","date":"2016-12-20T08:37:45.000Z","_content":"![](/img/articleImg/naruto.jpg)\n<!--more-->\n## 所需\n1.他乡vps一台\n2.xshell用于远程登录\n3.shadowsocks应用程序。[点这里](https://github.com/shadowsocks/shadowsocks-windows/releases)\n\n## Ready.\n1.本人装备的是搬瓦工的vps,好处是可以无限制的重装系统。\n2.[购买VPS](http://hostingset.com/)\n3.打开xshell连接\n![](/img/articleImg/xshell.png)\n\n## GO！！\n1.安装所需组件\n{% codeblock %}\n yum install m2crypto python-setuptools\n easy_install pip\n pip install shadowsocks\n{% endcodeblock %}\n\n2.新建配置文件：shadowsocks.json\n{% codeblock %}\n{\n    \"server\":\"23.105.215.43\",   #你服务器的ip\n    \"local_address\":\"127.0.0.1\",\n    \"local_port\":1080,\n    \"port_password\":{           #端口以及对应的密码\n         \"9000\":\"password\",\n         \"9001\":\"password\",\n         \"9002\":\"password\"\n    },\n    \"timeout\":300,\n    \"method\":\"rc4-md5\",         #选择的加密方式\n    \"fast_open\": false\n}\n{% endcodeblock %}\n3添加\n{% codeblock %}\n ssserver -c /etc/shadowsocks.json\n\n ssserver -c /etc/shadowsocks.json -d start  #后台运行\n{% endcodeblock %}\n4.开启shadowsocks应用程序，输入ip,端口号,密码。就OK啦~\n5.Android用户想要连接本文配置的vpn,请搜下图app.\n![](/img/articleImg/shadowsocks.png)","source":"_posts/vps.md","raw":"---\ntitle: VPS搭建多端口VPN\ndate: 2016-12-20 16:37:45\ntags: \n\t- vpn\ncategories:\n\t- 运维\n\t- Linux\n---\n![](/img/articleImg/naruto.jpg)\n<!--more-->\n## 所需\n1.他乡vps一台\n2.xshell用于远程登录\n3.shadowsocks应用程序。[点这里](https://github.com/shadowsocks/shadowsocks-windows/releases)\n\n## Ready.\n1.本人装备的是搬瓦工的vps,好处是可以无限制的重装系统。\n2.[购买VPS](http://hostingset.com/)\n3.打开xshell连接\n![](/img/articleImg/xshell.png)\n\n## GO！！\n1.安装所需组件\n{% codeblock %}\n yum install m2crypto python-setuptools\n easy_install pip\n pip install shadowsocks\n{% endcodeblock %}\n\n2.新建配置文件：shadowsocks.json\n{% codeblock %}\n{\n    \"server\":\"23.105.215.43\",   #你服务器的ip\n    \"local_address\":\"127.0.0.1\",\n    \"local_port\":1080,\n    \"port_password\":{           #端口以及对应的密码\n         \"9000\":\"password\",\n         \"9001\":\"password\",\n         \"9002\":\"password\"\n    },\n    \"timeout\":300,\n    \"method\":\"rc4-md5\",         #选择的加密方式\n    \"fast_open\": false\n}\n{% endcodeblock %}\n3添加\n{% codeblock %}\n ssserver -c /etc/shadowsocks.json\n\n ssserver -c /etc/shadowsocks.json -d start  #后台运行\n{% endcodeblock %}\n4.开启shadowsocks应用程序，输入ip,端口号,密码。就OK啦~\n5.Android用户想要连接本文配置的vpn,请搜下图app.\n![](/img/articleImg/shadowsocks.png)","slug":"vps","published":1,"updated":"2020-07-02T03:35:25.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcbttrbw001nwgto8gi84zdy","content":"<p><img src=\"/img/articleImg/naruto.jpg\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h2 id=\"所需\"><a href=\"#所需\" class=\"headerlink\" title=\"所需\"></a>所需</h2><p>1.他乡vps一台<br>2.xshell用于远程登录<br>3.shadowsocks应用程序。<a href=\"https://github.com/shadowsocks/shadowsocks-windows/releases\" target=\"_blank\" rel=\"noopener\">点这里</a></p>\n<h2 id=\"Ready\"><a href=\"#Ready\" class=\"headerlink\" title=\"Ready.\"></a>Ready.</h2><p>1.本人装备的是搬瓦工的vps,好处是可以无限制的重装系统。<br>2.<a href=\"http://hostingset.com/\" target=\"_blank\" rel=\"noopener\">购买VPS</a><br>3.打开xshell连接<br><img src=\"/img/articleImg/xshell.png\" alt=\"\"></p>\n<h2 id=\"GO！！\"><a href=\"#GO！！\" class=\"headerlink\" title=\"GO！！\"></a>GO！！</h2><p>1.安装所需组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install m2crypto python-setuptools</span><br><span class=\"line\">easy_install pip</span><br><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n\n<p>2.新建配置文件：shadowsocks.json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;server&quot;:&quot;23.105.215.43&quot;,   #你服务器的ip</span><br><span class=\"line\">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class=\"line\">    &quot;local_port&quot;:1080,</span><br><span class=\"line\">    &quot;port_password&quot;:&#123;           #端口以及对应的密码</span><br><span class=\"line\">         &quot;9000&quot;:&quot;password&quot;,</span><br><span class=\"line\">         &quot;9001&quot;:&quot;password&quot;,</span><br><span class=\"line\">         &quot;9002&quot;:&quot;password&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;timeout&quot;:300,</span><br><span class=\"line\">    &quot;method&quot;:&quot;rc4-md5&quot;,         #选择的加密方式</span><br><span class=\"line\">    &quot;fast_open&quot;: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -c &#x2F;etc&#x2F;shadowsocks.json</span><br><span class=\"line\"></span><br><span class=\"line\">ssserver -c &#x2F;etc&#x2F;shadowsocks.json -d start  #后台运行</span><br></pre></td></tr></table></figure>\n<p>4.开启shadowsocks应用程序，输入ip,端口号,密码。就OK啦~<br>5.Android用户想要连接本文配置的vpn,请搜下图app.<br><img src=\"/img/articleImg/shadowsocks.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/articleImg/naruto.jpg\" alt=\"\"></p>","more":"<h2 id=\"所需\"><a href=\"#所需\" class=\"headerlink\" title=\"所需\"></a>所需</h2><p>1.他乡vps一台<br>2.xshell用于远程登录<br>3.shadowsocks应用程序。<a href=\"https://github.com/shadowsocks/shadowsocks-windows/releases\" target=\"_blank\" rel=\"noopener\">点这里</a></p>\n<h2 id=\"Ready\"><a href=\"#Ready\" class=\"headerlink\" title=\"Ready.\"></a>Ready.</h2><p>1.本人装备的是搬瓦工的vps,好处是可以无限制的重装系统。<br>2.<a href=\"http://hostingset.com/\" target=\"_blank\" rel=\"noopener\">购买VPS</a><br>3.打开xshell连接<br><img src=\"/img/articleImg/xshell.png\" alt=\"\"></p>\n<h2 id=\"GO！！\"><a href=\"#GO！！\" class=\"headerlink\" title=\"GO！！\"></a>GO！！</h2><p>1.安装所需组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install m2crypto python-setuptools</span><br><span class=\"line\">easy_install pip</span><br><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n\n<p>2.新建配置文件：shadowsocks.json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;server&quot;:&quot;23.105.215.43&quot;,   #你服务器的ip</span><br><span class=\"line\">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class=\"line\">    &quot;local_port&quot;:1080,</span><br><span class=\"line\">    &quot;port_password&quot;:&#123;           #端口以及对应的密码</span><br><span class=\"line\">         &quot;9000&quot;:&quot;password&quot;,</span><br><span class=\"line\">         &quot;9001&quot;:&quot;password&quot;,</span><br><span class=\"line\">         &quot;9002&quot;:&quot;password&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;timeout&quot;:300,</span><br><span class=\"line\">    &quot;method&quot;:&quot;rc4-md5&quot;,         #选择的加密方式</span><br><span class=\"line\">    &quot;fast_open&quot;: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -c &#x2F;etc&#x2F;shadowsocks.json</span><br><span class=\"line\"></span><br><span class=\"line\">ssserver -c &#x2F;etc&#x2F;shadowsocks.json -d start  #后台运行</span><br></pre></td></tr></table></figure>\n<p>4.开启shadowsocks应用程序，输入ip,端口号,密码。就OK啦~<br>5.Android用户想要连接本文配置的vpn,请搜下图app.<br><img src=\"/img/articleImg/shadowsocks.png\" alt=\"\"></p>"},{"title":"java值传递还是引用传递","date":"2017-05-24T07:48:36.000Z","_content":"\n 由一道面试题引发的问题：java是值传递还是引用传递？\n{% codeblock %}\npublic class Test {\n\n    String str=\"abc\";\n    int a[]={1,2,3};\n    int i=1;\n    void change(String str,int a[],int i){\n        \n        str=\"cbd\";\n        a[0]=4;\n        i=2;\n    }\n    public static void main(String[] args) {\n    \n        Test t=new Test();\n        t.change(t.str,t.a,t.i);\n        System.out.println(t.str);\n        System.out.println(t.a[0]);\n        System.out.println(t.i++);\n    }\n}\n{% endcodeblock %}\n\n<!--more-->\n>运行结果\n>abc\n>4\n>1\n\n### 1.按值传递是什么\n指的是在方法调用时，传递的参数是按值的拷贝传递。\n按值传递重要特点:传递的是值的拷贝，也就是说传递后就互不相关了。\n\n### 2.按引用传递是什么\n指的是在方法调用时，传递的参数是按引用进行传递，其实传递的引用的地址，也就是变量所对应的内存空间的地址。\n按引用传递的重要特点:\n传递的是值的引用，也就是说传递前和传递后都指向同一个引用(也就是同一个内存空间)。\n\n详细博文见[>>>](http://blog.csdn.net/zzp_403184692/article/details/8184751)\n","source":"_posts/paramPass.md","raw":"---\ntitle: java值传递还是引用传递\ndate: 2017-05-24 15:48:36\ntags: \n\t- Java基础\ncategories:\n\t- 编程\n\t- Java\t\n---\n\n 由一道面试题引发的问题：java是值传递还是引用传递？\n{% codeblock %}\npublic class Test {\n\n    String str=\"abc\";\n    int a[]={1,2,3};\n    int i=1;\n    void change(String str,int a[],int i){\n        \n        str=\"cbd\";\n        a[0]=4;\n        i=2;\n    }\n    public static void main(String[] args) {\n    \n        Test t=new Test();\n        t.change(t.str,t.a,t.i);\n        System.out.println(t.str);\n        System.out.println(t.a[0]);\n        System.out.println(t.i++);\n    }\n}\n{% endcodeblock %}\n\n<!--more-->\n>运行结果\n>abc\n>4\n>1\n\n### 1.按值传递是什么\n指的是在方法调用时，传递的参数是按值的拷贝传递。\n按值传递重要特点:传递的是值的拷贝，也就是说传递后就互不相关了。\n\n### 2.按引用传递是什么\n指的是在方法调用时，传递的参数是按引用进行传递，其实传递的引用的地址，也就是变量所对应的内存空间的地址。\n按引用传递的重要特点:\n传递的是值的引用，也就是说传递前和传递后都指向同一个引用(也就是同一个内存空间)。\n\n详细博文见[>>>](http://blog.csdn.net/zzp_403184692/article/details/8184751)\n","slug":"paramPass","published":1,"updated":"2020-07-02T03:34:27.564Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcbttrbx001qwgto47izg2ju","content":"<p> 由一道面试题引发的问题：java是值传递还是引用传递？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String str&#x3D;&quot;abc&quot;;</span><br><span class=\"line\">    int a[]&#x3D;&#123;1,2,3&#125;;</span><br><span class=\"line\">    int i&#x3D;1;</span><br><span class=\"line\">    void change(String str,int a[],int i)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        str&#x3D;&quot;cbd&quot;;</span><br><span class=\"line\">        a[0]&#x3D;4;</span><br><span class=\"line\">        i&#x3D;2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        Test t&#x3D;new Test();</span><br><span class=\"line\">        t.change(t.str,t.a,t.i);</span><br><span class=\"line\">        System.out.println(t.str);</span><br><span class=\"line\">        System.out.println(t.a[0]);</span><br><span class=\"line\">        System.out.println(t.i++);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n<blockquote>\n<p>运行结果<br>abc<br>4<br>1</p>\n</blockquote>\n<h3 id=\"1-按值传递是什么\"><a href=\"#1-按值传递是什么\" class=\"headerlink\" title=\"1.按值传递是什么\"></a>1.按值传递是什么</h3><p>指的是在方法调用时，传递的参数是按值的拷贝传递。<br>按值传递重要特点:传递的是值的拷贝，也就是说传递后就互不相关了。</p>\n<h3 id=\"2-按引用传递是什么\"><a href=\"#2-按引用传递是什么\" class=\"headerlink\" title=\"2.按引用传递是什么\"></a>2.按引用传递是什么</h3><p>指的是在方法调用时，传递的参数是按引用进行传递，其实传递的引用的地址，也就是变量所对应的内存空间的地址。<br>按引用传递的重要特点:<br>传递的是值的引用，也就是说传递前和传递后都指向同一个引用(也就是同一个内存空间)。</p>\n<p>详细博文见<a href=\"http://blog.csdn.net/zzp_403184692/article/details/8184751\" target=\"_blank\" rel=\"noopener\">&gt;&gt;&gt;</a></p>\n","site":{"data":{}},"excerpt":"<p> 由一道面试题引发的问题：java是值传递还是引用传递？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String str&#x3D;&quot;abc&quot;;</span><br><span class=\"line\">    int a[]&#x3D;&#123;1,2,3&#125;;</span><br><span class=\"line\">    int i&#x3D;1;</span><br><span class=\"line\">    void change(String str,int a[],int i)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        str&#x3D;&quot;cbd&quot;;</span><br><span class=\"line\">        a[0]&#x3D;4;</span><br><span class=\"line\">        i&#x3D;2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        Test t&#x3D;new Test();</span><br><span class=\"line\">        t.change(t.str,t.a,t.i);</span><br><span class=\"line\">        System.out.println(t.str);</span><br><span class=\"line\">        System.out.println(t.a[0]);</span><br><span class=\"line\">        System.out.println(t.i++);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<blockquote>\n<p>运行结果<br>abc<br>4<br>1</p>\n</blockquote>\n<h3 id=\"1-按值传递是什么\"><a href=\"#1-按值传递是什么\" class=\"headerlink\" title=\"1.按值传递是什么\"></a>1.按值传递是什么</h3><p>指的是在方法调用时，传递的参数是按值的拷贝传递。<br>按值传递重要特点:传递的是值的拷贝，也就是说传递后就互不相关了。</p>\n<h3 id=\"2-按引用传递是什么\"><a href=\"#2-按引用传递是什么\" class=\"headerlink\" title=\"2.按引用传递是什么\"></a>2.按引用传递是什么</h3><p>指的是在方法调用时，传递的参数是按引用进行传递，其实传递的引用的地址，也就是变量所对应的内存空间的地址。<br>按引用传递的重要特点:<br>传递的是值的引用，也就是说传递前和传递后都指向同一个引用(也就是同一个内存空间)。</p>\n<p>详细博文见<a href=\"http://blog.csdn.net/zzp_403184692/article/details/8184751\" target=\"_blank\" rel=\"noopener\">&gt;&gt;&gt;</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckcbttrb50002wgto9gjl9iod","category_id":"ckcbttrbc0008wgto5ywy7fx2","_id":"ckcbttrbj000iwgto7vasfzbd"},{"post_id":"ckcbttrba0006wgto9a9k33mh","category_id":"ckcbttrb80003wgto09ie5ne3","_id":"ckcbttrbp000uwgtoaydi91ni"},{"post_id":"ckcbttrba0006wgto9a9k33mh","category_id":"ckcbttrbj000jwgtodwbwaja4","_id":"ckcbttrbq000ywgto7v86fjjb"},{"post_id":"ckcbttrb30001wgto8ju83xxn","category_id":"ckcbttrb80003wgto09ie5ne3","_id":"ckcbttrbq0011wgtoh1rdfmsi"},{"post_id":"ckcbttrb30001wgto8ju83xxn","category_id":"ckcbttrbj000jwgtodwbwaja4","_id":"ckcbttrbs0016wgtofhe664c7"},{"post_id":"ckcbttrbn000rwgto9kvbfujr","category_id":"ckcbttrb80003wgto09ie5ne3","_id":"ckcbttrbt0019wgtoa1q2d7zg"},{"post_id":"ckcbttrbn000rwgto9kvbfujr","category_id":"ckcbttrbj000jwgtodwbwaja4","_id":"ckcbttrbu001ewgtoh0s9euu1"},{"post_id":"ckcbttrbp000vwgto7y3ef004","category_id":"ckcbttrb80003wgto09ie5ne3","_id":"ckcbttrbv001hwgto3iuthm4w"},{"post_id":"ckcbttrbp000vwgto7y3ef004","category_id":"ckcbttrbj000jwgtodwbwaja4","_id":"ckcbttrbw001lwgtodsyb5wv4"},{"post_id":"ckcbttrbb0007wgto6yc9bz0d","category_id":"ckcbttrb80003wgto09ie5ne3","_id":"ckcbttrbx001pwgtoetcy9262"},{"post_id":"ckcbttrbb0007wgto6yc9bz0d","category_id":"ckcbttrbo000twgto2povfohd","_id":"ckcbttrby001twgtoexgugggf"},{"post_id":"ckcbttrbq000zwgtod3663z02","category_id":"ckcbttrb80003wgto09ie5ne3","_id":"ckcbttrbz001wwgto1igl11yg"},{"post_id":"ckcbttrbq000zwgtod3663z02","category_id":"ckcbttrbj000jwgtodwbwaja4","_id":"ckcbttrbz001zwgto9udjfeby"},{"post_id":"ckcbttrbd000bwgto9eb7h9wd","category_id":"ckcbttrb80003wgto09ie5ne3","_id":"ckcbttrc00021wgto5lfididt"},{"post_id":"ckcbttrbd000bwgto9eb7h9wd","category_id":"ckcbttrbj000jwgtodwbwaja4","_id":"ckcbttrc20024wgto4i7cbcgj"},{"post_id":"ckcbttrbu001fwgtoa80w1v81","category_id":"ckcbttrb80003wgto09ie5ne3","_id":"ckcbttrc20026wgto234g22q5"},{"post_id":"ckcbttrbu001fwgtoa80w1v81","category_id":"ckcbttrbj000jwgtodwbwaja4","_id":"ckcbttrc30029wgtoauwp4o5u"},{"post_id":"ckcbttrbh000gwgtofe1s7rl9","category_id":"ckcbttrbg000dwgtohwxmhs0x","_id":"ckcbttrc3002awgto7bvvhqy4"},{"post_id":"ckcbttrbh000gwgtofe1s7rl9","category_id":"ckcbttrbv001jwgtob73hf5g0","_id":"ckcbttrc4002ewgtofqbvdfj2"},{"post_id":"ckcbttrbx001qwgto47izg2ju","category_id":"ckcbttrb80003wgto09ie5ne3","_id":"ckcbttrc5002gwgto0ovz0dm9"},{"post_id":"ckcbttrbx001qwgto47izg2ju","category_id":"ckcbttrbj000jwgtodwbwaja4","_id":"ckcbttrc6002iwgto6uafd058"},{"post_id":"ckcbttrb90005wgto73gng1aa","category_id":"ckcbttrbg000dwgtohwxmhs0x","_id":"ckcbttrc6002kwgtoeeac3s9f"},{"post_id":"ckcbttrb90005wgto73gng1aa","category_id":"ckcbttrbv001jwgtob73hf5g0","_id":"ckcbttrc6002lwgto2togbo8d"},{"post_id":"ckcbttrbi000hwgto8l6n8zgi","category_id":"ckcbttrbg000dwgtohwxmhs0x","_id":"ckcbttrc6002nwgto44c39gqv"},{"post_id":"ckcbttrbi000hwgto8l6n8zgi","category_id":"ckcbttrbv001jwgtob73hf5g0","_id":"ckcbttrc7002owgto76n594io"},{"post_id":"ckcbttrbk000mwgtobzpw69gg","category_id":"ckcbttrc30028wgtodrbk0cci","_id":"ckcbttrc7002qwgto4e0n2rb0"},{"post_id":"ckcbttrbl000pwgtoh5ch0x76","category_id":"ckcbttrbg000dwgtohwxmhs0x","_id":"ckcbttrc7002rwgtobjpidmxk"},{"post_id":"ckcbttrbl000pwgtoh5ch0x76","category_id":"ckcbttrbv001jwgtob73hf5g0","_id":"ckcbttrc7002twgtob71dglq4"},{"post_id":"ckcbttrbr0012wgtof8jw6v4y","category_id":"ckcbttrb80003wgto09ie5ne3","_id":"ckcbttrc7002uwgto30jw0ak6"},{"post_id":"ckcbttrbr0012wgtof8jw6v4y","category_id":"ckcbttrc5002hwgto0a86ftki","_id":"ckcbttrc8002wwgto5e8x2xe0"},{"post_id":"ckcbttrbs0017wgto7rxc9bpk","category_id":"ckcbttrc10023wgtogkudc50y","_id":"ckcbttrc8002xwgto92q958y7"},{"post_id":"ckcbttrbe000cwgto1p6o8uby","category_id":"ckcbttrbg000dwgtohwxmhs0x","_id":"ckcbttrc8002zwgto0t550x1w"},{"post_id":"ckcbttrbe000cwgto1p6o8uby","category_id":"ckcbttrbv001jwgtob73hf5g0","_id":"ckcbttrc80030wgtoesl9bi9s"},{"post_id":"ckcbttrbj000lwgto9ykn8rnm","category_id":"ckcbttrc10023wgtogkudc50y","_id":"ckcbttrc90033wgtohi5ue4ga"},{"post_id":"ckcbttrbj000lwgto9ykn8rnm","category_id":"ckcbttrc80031wgtobmicdv97","_id":"ckcbttrc90035wgtohf9o01tf"},{"post_id":"ckcbttrbt001awgto6vdm7cti","category_id":"ckcbttrc10023wgtogkudc50y","_id":"ckcbttrc90036wgto73qng8dq"},{"post_id":"ckcbttrbt001awgto6vdm7cti","category_id":"ckcbttrc90032wgto1il67b74","_id":"ckcbttrca0038wgtociqb2b6w"},{"post_id":"ckcbttrbv001iwgto4u3xee3l","category_id":"ckcbttrc10023wgtogkudc50y","_id":"ckcbttrca0039wgto19va6f9m"},{"post_id":"ckcbttrbv001iwgto4u3xee3l","category_id":"ckcbttrc90034wgtobqrrfs1d","_id":"ckcbttrca003awgto3dpf0vmx"},{"post_id":"ckcbttrbw001nwgto8gi84zdy","category_id":"ckcbttrc10023wgtogkudc50y","_id":"ckcbttrca003bwgto4hoc1vsc"},{"post_id":"ckcbttrbw001nwgto8gi84zdy","category_id":"ckcbttrc90032wgto1il67b74","_id":"ckcbttrca003cwgtoadji406l"}],"PostTag":[{"post_id":"ckcbttrb30001wgto8ju83xxn","tag_id":"ckcbttrb90004wgto5nsec7l6","_id":"ckcbttrbd000awgto89o0fhjy"},{"post_id":"ckcbttrbd000bwgto9eb7h9wd","tag_id":"ckcbttrb90004wgto5nsec7l6","_id":"ckcbttrbh000fwgto73rkautp"},{"post_id":"ckcbttrb50002wgto9gjl9iod","tag_id":"ckcbttrbc0009wgto2od42gor","_id":"ckcbttrbn000qwgto00ta1pbp"},{"post_id":"ckcbttrb50002wgto9gjl9iod","tag_id":"ckcbttrbg000ewgto1h8ch2j6","_id":"ckcbttrbo000swgto5vws3d40"},{"post_id":"ckcbttrb50002wgto9gjl9iod","tag_id":"ckcbttrbj000kwgtofkfx4x0x","_id":"ckcbttrbp000xwgto80y4fw6n"},{"post_id":"ckcbttrbn000rwgto9kvbfujr","tag_id":"ckcbttrb90004wgto5nsec7l6","_id":"ckcbttrbq0010wgtod9ve70kp"},{"post_id":"ckcbttrba0006wgto9a9k33mh","tag_id":"ckcbttrbl000owgtoahlx7s84","_id":"ckcbttrbs0015wgto5jcl4y2z"},{"post_id":"ckcbttrbq000zwgtod3663z02","tag_id":"ckcbttrb90004wgto5nsec7l6","_id":"ckcbttrbt0018wgtogl6qc7kd"},{"post_id":"ckcbttrbb0007wgto6yc9bz0d","tag_id":"ckcbttrbp000wwgtofps44xue","_id":"ckcbttrbu001dwgto9c9w9xou"},{"post_id":"ckcbttrbr0012wgtof8jw6v4y","tag_id":"ckcbttrb90004wgto5nsec7l6","_id":"ckcbttrbv001gwgto49p73djf"},{"post_id":"ckcbttrbj000lwgto9ykn8rnm","tag_id":"ckcbttrbr0014wgto0bquae3r","_id":"ckcbttrbw001kwgto4qww7stu"},{"post_id":"ckcbttrbu001fwgtoa80w1v81","tag_id":"ckcbttrb90004wgto5nsec7l6","_id":"ckcbttrbx001owgto0u871gin"},{"post_id":"ckcbttrbk000mwgtobzpw69gg","tag_id":"ckcbttrbu001cwgto9bif07y3","_id":"ckcbttrby001swgtoddmz4u8y"},{"post_id":"ckcbttrbx001qwgto47izg2ju","tag_id":"ckcbttrb90004wgto5nsec7l6","_id":"ckcbttrbz001vwgtofjdga2p6"},{"post_id":"ckcbttrbp000vwgto7y3ef004","tag_id":"ckcbttrbw001mwgtogvclgk3d","_id":"ckcbttrbz001ywgto9ckb1tam"},{"post_id":"ckcbttrbs0017wgto7rxc9bpk","tag_id":"ckcbttrby001uwgto4hoybarg","_id":"ckcbttrc10022wgto7yrge9o5"},{"post_id":"ckcbttrbt001awgto6vdm7cti","tag_id":"ckcbttrc00020wgto2plubjwz","_id":"ckcbttrc30027wgtogc0m3q6d"},{"post_id":"ckcbttrbv001iwgto4u3xee3l","tag_id":"ckcbttrbj000kwgtofkfx4x0x","_id":"ckcbttrc4002cwgtob0qiew72"},{"post_id":"ckcbttrbv001iwgto4u3xee3l","tag_id":"ckcbttrc20025wgto4czbexxg","_id":"ckcbttrc5002fwgtoe72l7heu"},{"post_id":"ckcbttrbw001nwgto8gi84zdy","tag_id":"ckcbttrc3002bwgtogidw8u90","_id":"ckcbttrc6002jwgtobxkphysc"}],"Tag":[{"name":"Java基础","_id":"ckcbttrb90004wgto5nsec7l6"},{"name":"Hexo","_id":"ckcbttrbc0009wgto2od42gor"},{"name":"GitHub","_id":"ckcbttrbg000ewgto1h8ch2j6"},{"name":"Git","_id":"ckcbttrbj000kwgtofkfx4x0x"},{"name":"Lambda","_id":"ckcbttrbl000owgtoahlx7s84"},{"name":"dubbo","_id":"ckcbttrbp000wwgtofps44xue"},{"name":"ddos","_id":"ckcbttrbr0014wgto0bquae3r"},{"name":"druid","_id":"ckcbttrbu001cwgto9bif07y3"},{"name":"JavaMail","_id":"ckcbttrbw001mwgtogvclgk3d"},{"name":"Redis","_id":"ckcbttrby001uwgto4hoybarg"},{"name":"Nginx","_id":"ckcbttrc00020wgto2plubjwz"},{"name":"Webhook","_id":"ckcbttrc20025wgto4czbexxg"},{"name":"vpn","_id":"ckcbttrc3002bwgtogidw8u90"}]}}